/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(3);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, common, Backbone) {'use strict';
	
	var _stringify = __webpack_require__(29);
	
	var _JSON$stringify = _interopRequireDefault(_stringify).default;
	
	__webpack_require__(66);
	
	var _AppController = __webpack_require__(247);
	
	var AppController = _interopRequireDefault(_AppController).default;
	
	var _AppRouter = __webpack_require__(531);
	
	var AppRouter = _interopRequireDefault(_AppRouter).default;
	
	__webpack_require__(532);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var app = new Marionette.Application();
	
	var appController = new AppController();
	
	var appRouter = new AppRouter({
	    controller: appController
	});
	
	common.router = appRouter;
	common.appController = appController;
	
	// for development
	window.common = common;
	
	app.on("start", function () {
	    common.user.init();
	    Backbone.history.start({ pushState: false });
	});
	
	if (window.cordova) {
	    var onDeviceReady = function onDeviceReady() {
	        console.log('deviceready', window.cordova);
	
	        if (window.cordova.platformId == "browser") {
	            facebookConnectPlugin.browserInit("1761962527353026");
	        } else {
	            var push = PushNotification.init({
	                android: {
	                    senderID: "555817085435"
	                },
	                ios: {
	                    alert: "true",
	                    badge: "true",
	                    sound: "true"
	                },
	                windows: {}
	            });
	
	            push.on('registration', function (data) {
	                console.log('PushNotification on registration', data);
	                common.storageModel.set(String(window.cordova.platformId) + 'PushId', data.registrationId);
	            });
	
	            push.on('notification', function (data) {
	                console.log('PushNotification on notification', data);
	                new infoModal({ message: "Push notification: " + _JSON$stringify(data) }).showModal();
	
	                //  Надо вставить эту строчку, когда приходит пуш нотификация о новой игре
	                // common.userGameCollection.updateGames();
	            });
	
	            push.on('error', function (error) {
	                console.log('PushNotification on error', data);
	                new infoModal({ message: "Push notifications error: " + _JSON$stringify(error) }).showModal();
	            });
	
	            SocialVk.init("5509617", function (result) {
	                console.log(result);
	                console.log(SocialVk);
	            }, function (error) {
	                console.log(error);
	                new infoModal({ message: "SocialVk init error: " + _JSON$stringify(error) }).showModal();
	            });
	
	            Appodeal.setLogging(true);
	            Appodeal.setTesting(true);
	            Appodeal.disableLocationPermissionCheck();
	            Appodeal.initialize("1cc998a0cabc573ab24df6b7c2880ae2e616253b58120ca4", Appodeal.INTERSTITIAL);
	
	            Appodeal.show(Appodeal.INTERSTITIAL);
	
	            app.start();
	
	            StatusBar.hide();
	        }
	    };
	
	    document.addEventListener("deviceready", onDeviceReady, false);
	} else {
	    app.start();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(10), __webpack_require__(5)))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// MarionetteJS (Backbone.Marionette)
	// ----------------------------------
	// v2.4.7
	//
	// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.
	// Distributed under MIT license
	//
	// http://marionettejs.com
	
	(function(root, factory) {
	
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5), __webpack_require__(6), __webpack_require__(8), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Backbone, _) {
	      return (root.Marionette = root.Mn = factory(root, Backbone, _));
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== 'undefined') {
	    var Backbone = require('backbone');
	    var _ = require('underscore');
	    var Wreqr = require('backbone.wreqr');
	    var BabySitter = require('backbone.babysitter');
	    module.exports = factory(root, Backbone, _);
	  } else {
	    root.Marionette = root.Mn = factory(root, root.Backbone, root._);
	  }
	
	}(this, function(root, Backbone, _) {
	  'use strict';
	
	  var previousMarionette = root.Marionette;
	  var previousMn = root.Mn;
	
	  var Marionette = Backbone.Marionette = {};
	
	  Marionette.VERSION = '2.4.7';
	
	  Marionette.noConflict = function() {
	    root.Marionette = previousMarionette;
	    root.Mn = previousMn;
	    return this;
	  };
	
	  // Get the Deferred creator for later use
	  Marionette.Deferred = Backbone.$.Deferred;
	
	  Marionette.FEATURES = {
	  };
	  
	  Marionette.isEnabled = function(name) {
	    return !!Marionette.FEATURES[name];
	  };
	  
	  /* jshint unused: false *//* global console */
	  
	  // Helpers
	  // -------
	  
	  // Marionette.extend
	  // -----------------
	  
	  // Borrow the Backbone `extend` method so we can use it as needed
	  Marionette.extend = Backbone.Model.extend;
	  
	  // Marionette.isNodeAttached
	  // -------------------------
	  
	  // Determine if `el` is a child of the document
	  Marionette.isNodeAttached = function(el) {
	    return Backbone.$.contains(document.documentElement, el);
	  };
	  
	  // Merge `keys` from `options` onto `this`
	  Marionette.mergeOptions = function(options, keys) {
	    if (!options) { return; }
	    _.extend(this, _.pick(options, keys));
	  };
	  
	  // Marionette.getOption
	  // --------------------
	  
	  // Retrieve an object, function or other value from a target
	  // object or its `options`, with `options` taking precedence.
	  Marionette.getOption = function(target, optionName) {
	    if (!target || !optionName) { return; }
	    if (target.options && (target.options[optionName] !== undefined)) {
	      return target.options[optionName];
	    } else {
	      return target[optionName];
	    }
	  };
	  
	  // Proxy `Marionette.getOption`
	  Marionette.proxyGetOption = function(optionName) {
	    return Marionette.getOption(this, optionName);
	  };
	  
	  // Similar to `_.result`, this is a simple helper
	  // If a function is provided we call it with context
	  // otherwise just return the value. If the value is
	  // undefined return a default value
	  Marionette._getValue = function(value, context, params) {
	    if (_.isFunction(value)) {
	      value = params ? value.apply(context, params) : value.call(context);
	    }
	    return value;
	  };
	  
	  // Marionette.normalizeMethods
	  // ----------------------
	  
	  // Pass in a mapping of events => functions or function names
	  // and return a mapping of events => functions
	  Marionette.normalizeMethods = function(hash) {
	    return _.reduce(hash, function(normalizedHash, method, name) {
	      if (!_.isFunction(method)) {
	        method = this[method];
	      }
	      if (method) {
	        normalizedHash[name] = method;
	      }
	      return normalizedHash;
	    }, {}, this);
	  };
	  
	  // utility method for parsing @ui. syntax strings
	  // into associated selector
	  Marionette.normalizeUIString = function(uiString, ui) {
	    return uiString.replace(/@ui\.[a-zA-Z-_$0-9]*/g, function(r) {
	      return ui[r.slice(4)];
	    });
	  };
	  
	  // allows for the use of the @ui. syntax within
	  // a given key for triggers and events
	  // swaps the @ui with the associated selector.
	  // Returns a new, non-mutated, parsed events hash.
	  Marionette.normalizeUIKeys = function(hash, ui) {
	    return _.reduce(hash, function(memo, val, key) {
	      var normalizedKey = Marionette.normalizeUIString(key, ui);
	      memo[normalizedKey] = val;
	      return memo;
	    }, {});
	  };
	  
	  // allows for the use of the @ui. syntax within
	  // a given value for regions
	  // swaps the @ui with the associated selector
	  Marionette.normalizeUIValues = function(hash, ui, properties) {
	    _.each(hash, function(val, key) {
	      if (_.isString(val)) {
	        hash[key] = Marionette.normalizeUIString(val, ui);
	      } else if (_.isObject(val) && _.isArray(properties)) {
	        _.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui));
	        /* Value is an object, and we got an array of embedded property names to normalize. */
	        _.each(properties, function(property) {
	          var propertyVal = val[property];
	          if (_.isString(propertyVal)) {
	            val[property] = Marionette.normalizeUIString(propertyVal, ui);
	          }
	        });
	      }
	    });
	    return hash;
	  };
	  
	  // Mix in methods from Underscore, for iteration, and other
	  // collection related features.
	  // Borrowing this code from Backbone.Collection:
	  // http://backbonejs.org/docs/backbone.html#section-121
	  Marionette.actAsCollection = function(object, listProperty) {
	    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
	      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
	      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
	      'last', 'without', 'isEmpty', 'pluck'];
	  
	    _.each(methods, function(method) {
	      object[method] = function() {
	        var list = _.values(_.result(this, listProperty));
	        var args = [list].concat(_.toArray(arguments));
	        return _[method].apply(_, args);
	      };
	    });
	  };
	  
	  var deprecate = Marionette.deprecate = function(message, test) {
	    if (_.isObject(message)) {
	      message = (
	        message.prev + ' is going to be removed in the future. ' +
	        'Please use ' + message.next + ' instead.' +
	        (message.url ? ' See: ' + message.url : '')
	      );
	    }
	  
	    if ((test === undefined || !test) && !deprecate._cache[message]) {
	      deprecate._warn('Deprecation warning: ' + message);
	      deprecate._cache[message] = true;
	    }
	  };
	  
	  deprecate._console = typeof console !== 'undefined' ? console : {};
	  deprecate._warn = function() {
	    var warn = deprecate._console.warn || deprecate._console.log || function() {};
	    return warn.apply(deprecate._console, arguments);
	  };
	  deprecate._cache = {};
	  
	  /* jshint maxstatements: 14, maxcomplexity: 7 */
	  
	  // Trigger Method
	  // --------------
	  
	  Marionette._triggerMethod = (function() {
	    // split the event name on the ":"
	    var splitter = /(^|:)(\w)/gi;
	  
	    // take the event section ("section1:section2:section3")
	    // and turn it in to uppercase name
	    function getEventName(match, prefix, eventName) {
	      return eventName.toUpperCase();
	    }
	  
	    return function(context, event, args) {
	      var noEventArg = arguments.length < 3;
	      if (noEventArg) {
	        args = event;
	        event = args[0];
	      }
	  
	      // get the method name from the event name
	      var methodName = 'on' + event.replace(splitter, getEventName);
	      var method = context[methodName];
	      var result;
	  
	      // call the onMethodName if it exists
	      if (_.isFunction(method)) {
	        // pass all args, except the event name
	        result = method.apply(context, noEventArg ? _.rest(args) : args);
	      }
	  
	      // trigger the event, if a trigger method exists
	      if (_.isFunction(context.trigger)) {
	        if (noEventArg + args.length > 1) {
	          context.trigger.apply(context, noEventArg ? args : [event].concat(_.drop(args, 0)));
	        } else {
	          context.trigger(event);
	        }
	      }
	  
	      return result;
	    };
	  })();
	  
	  // Trigger an event and/or a corresponding method name. Examples:
	  //
	  // `this.triggerMethod("foo")` will trigger the "foo" event and
	  // call the "onFoo" method.
	  //
	  // `this.triggerMethod("foo:bar")` will trigger the "foo:bar" event and
	  // call the "onFooBar" method.
	  Marionette.triggerMethod = function(event) {
	    return Marionette._triggerMethod(this, arguments);
	  };
	  
	  // triggerMethodOn invokes triggerMethod on a specific context
	  //
	  // e.g. `Marionette.triggerMethodOn(view, 'show')`
	  // will trigger a "show" event or invoke onShow the view.
	  Marionette.triggerMethodOn = function(context) {
	    var fnc = _.isFunction(context.triggerMethod) ?
	                  context.triggerMethod :
	                  Marionette.triggerMethod;
	  
	    return fnc.apply(context, _.rest(arguments));
	  };
	  
	  // DOM Refresh
	  // -----------
	  
	  // Monitor a view's state, and after it has been rendered and shown
	  // in the DOM, trigger a "dom:refresh" event every time it is
	  // re-rendered.
	  
	  Marionette.MonitorDOMRefresh = function(view) {
	    if (view._isDomRefreshMonitored) { return; }
	    view._isDomRefreshMonitored = true;
	  
	    // track when the view has been shown in the DOM,
	    // using a Marionette.Region (or by other means of triggering "show")
	    function handleShow() {
	      view._isShown = true;
	      triggerDOMRefresh();
	    }
	  
	    // track when the view has been rendered
	    function handleRender() {
	      view._isRendered = true;
	      triggerDOMRefresh();
	    }
	  
	    // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
	    function triggerDOMRefresh() {
	      if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
	        Marionette.triggerMethodOn(view, 'dom:refresh', view);
	      }
	    }
	  
	    view.on({
	      show: handleShow,
	      render: handleRender
	    });
	  };
	  
	  /* jshint maxparams: 5 */
	  
	  // Bind Entity Events & Unbind Entity Events
	  // -----------------------------------------
	  //
	  // These methods are used to bind/unbind a backbone "entity" (e.g. collection/model)
	  // to methods on a target object.
	  //
	  // The first parameter, `target`, must have the Backbone.Events module mixed in.
	  //
	  // The second parameter is the `entity` (Backbone.Model, Backbone.Collection or
	  // any object that has Backbone.Events mixed in) to bind the events from.
	  //
	  // The third parameter is a hash of { "event:name": "eventHandler" }
	  // configuration. Multiple handlers can be separated by a space. A
	  // function can be supplied instead of a string handler name.
	  
	  (function(Marionette) {
	    'use strict';
	  
	    // Bind the event to handlers specified as a string of
	    // handler names on the target object
	    function bindFromStrings(target, entity, evt, methods) {
	      var methodNames = methods.split(/\s+/);
	  
	      _.each(methodNames, function(methodName) {
	  
	        var method = target[methodName];
	        if (!method) {
	          throw new Marionette.Error('Method "' + methodName +
	            '" was configured as an event handler, but does not exist.');
	        }
	  
	        target.listenTo(entity, evt, method);
	      });
	    }
	  
	    // Bind the event to a supplied callback function
	    function bindToFunction(target, entity, evt, method) {
	      target.listenTo(entity, evt, method);
	    }
	  
	    // Bind the event to handlers specified as a string of
	    // handler names on the target object
	    function unbindFromStrings(target, entity, evt, methods) {
	      var methodNames = methods.split(/\s+/);
	  
	      _.each(methodNames, function(methodName) {
	        var method = target[methodName];
	        target.stopListening(entity, evt, method);
	      });
	    }
	  
	    // Bind the event to a supplied callback function
	    function unbindToFunction(target, entity, evt, method) {
	      target.stopListening(entity, evt, method);
	    }
	  
	    // generic looping function
	    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
	      if (!entity || !bindings) { return; }
	  
	      // type-check bindings
	      if (!_.isObject(bindings)) {
	        throw new Marionette.Error({
	          message: 'Bindings must be an object or function.',
	          url: 'marionette.functions.html#marionettebindentityevents'
	        });
	      }
	  
	      // allow the bindings to be a function
	      bindings = Marionette._getValue(bindings, target);
	  
	      // iterate the bindings and bind them
	      _.each(bindings, function(methods, evt) {
	  
	        // allow for a function as the handler,
	        // or a list of event names as a string
	        if (_.isFunction(methods)) {
	          functionCallback(target, entity, evt, methods);
	        } else {
	          stringCallback(target, entity, evt, methods);
	        }
	  
	      });
	    }
	  
	    // Export Public API
	    Marionette.bindEntityEvents = function(target, entity, bindings) {
	      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
	    };
	  
	    Marionette.unbindEntityEvents = function(target, entity, bindings) {
	      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
	    };
	  
	    // Proxy `bindEntityEvents`
	    Marionette.proxyBindEntityEvents = function(entity, bindings) {
	      return Marionette.bindEntityEvents(this, entity, bindings);
	    };
	  
	    // Proxy `unbindEntityEvents`
	    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
	      return Marionette.unbindEntityEvents(this, entity, bindings);
	    };
	  })(Marionette);
	  
	
	  // Error
	  // -----
	  
	  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];
	  
	  Marionette.Error = Marionette.extend.call(Error, {
	    urlRoot: 'http://marionettejs.com/docs/v' + Marionette.VERSION + '/',
	  
	    constructor: function(message, options) {
	      if (_.isObject(message)) {
	        options = message;
	        message = options.message;
	      } else if (!options) {
	        options = {};
	      }
	  
	      var error = Error.call(this, message);
	      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));
	  
	      this.captureStackTrace();
	  
	      if (options.url) {
	        this.url = this.urlRoot + options.url;
	      }
	    },
	  
	    captureStackTrace: function() {
	      if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, Marionette.Error);
	      }
	    },
	  
	    toString: function() {
	      return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');
	    }
	  });
	  
	  Marionette.Error.extend = Marionette.extend;
	  
	  // Callbacks
	  // ---------
	  
	  // A simple way of managing a collection of callbacks
	  // and executing them at a later point in time, using jQuery's
	  // `Deferred` object.
	  Marionette.Callbacks = function() {
	    this._deferred = Marionette.Deferred();
	    this._callbacks = [];
	  };
	  
	  _.extend(Marionette.Callbacks.prototype, {
	  
	    // Add a callback to be executed. Callbacks added here are
	    // guaranteed to execute, even if they are added after the
	    // `run` method is called.
	    add: function(callback, contextOverride) {
	      var promise = _.result(this._deferred, 'promise');
	  
	      this._callbacks.push({cb: callback, ctx: contextOverride});
	  
	      promise.then(function(args) {
	        if (contextOverride) { args.context = contextOverride; }
	        callback.call(args.context, args.options);
	      });
	    },
	  
	    // Run all registered callbacks with the context specified.
	    // Additional callbacks can be added after this has been run
	    // and they will still be executed.
	    run: function(options, context) {
	      this._deferred.resolve({
	        options: options,
	        context: context
	      });
	    },
	  
	    // Resets the list of callbacks to be run, allowing the same list
	    // to be run multiple times - whenever the `run` method is called.
	    reset: function() {
	      var callbacks = this._callbacks;
	      this._deferred = Marionette.Deferred();
	      this._callbacks = [];
	  
	      _.each(callbacks, function(cb) {
	        this.add(cb.cb, cb.ctx);
	      }, this);
	    }
	  });
	  
	  // Controller
	  // ----------
	  
	  // A multi-purpose object to use as a controller for
	  // modules and routers, and as a mediator for workflow
	  // and coordination of other objects, views, and more.
	  Marionette.Controller = function(options) {
	    this.options = options || {};
	  
	    if (_.isFunction(this.initialize)) {
	      this.initialize(this.options);
	    }
	  };
	  
	  Marionette.Controller.extend = Marionette.extend;
	  
	  // Controller Methods
	  // --------------
	  
	  // Ensure it can trigger events with Backbone.Events
	  _.extend(Marionette.Controller.prototype, Backbone.Events, {
	    destroy: function() {
	      Marionette._triggerMethod(this, 'before:destroy', arguments);
	      Marionette._triggerMethod(this, 'destroy', arguments);
	  
	      this.stopListening();
	      this.off();
	      return this;
	    },
	  
	    // import the `triggerMethod` to trigger events with corresponding
	    // methods if the method exists
	    triggerMethod: Marionette.triggerMethod,
	  
	    // A handy way to merge options onto the instance
	    mergeOptions: Marionette.mergeOptions,
	  
	    // Proxy `getOption` to enable getting options from this or this.options by name.
	    getOption: Marionette.proxyGetOption
	  
	  });
	  
	  // Object
	  // ------
	  
	  // A Base Class that other Classes should descend from.
	  // Object borrows many conventions and utilities from Backbone.
	  Marionette.Object = function(options) {
	    this.options = _.extend({}, _.result(this, 'options'), options);
	  
	    this.initialize.apply(this, arguments);
	  };
	  
	  Marionette.Object.extend = Marionette.extend;
	  
	  // Object Methods
	  // --------------
	  
	  // Ensure it can trigger events with Backbone.Events
	  _.extend(Marionette.Object.prototype, Backbone.Events, {
	  
	    //this is a noop method intended to be overridden by classes that extend from this base
	    initialize: function() {},
	  
	    destroy: function(options) {
	      options = options || {};
	  
	      this.triggerMethod('before:destroy', options);
	      this.triggerMethod('destroy', options);
	      this.stopListening();
	  
	      return this;
	    },
	  
	    // Import the `triggerMethod` to trigger events with corresponding
	    // methods if the method exists
	    triggerMethod: Marionette.triggerMethod,
	  
	    // A handy way to merge options onto the instance
	    mergeOptions: Marionette.mergeOptions,
	  
	    // Proxy `getOption` to enable getting options from this or this.options by name.
	    getOption: Marionette.proxyGetOption,
	  
	    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
	    bindEntityEvents: Marionette.proxyBindEntityEvents,
	  
	    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
	    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
	  });
	  
	  /* jshint maxcomplexity: 16, maxstatements: 45, maxlen: 120 */
	  
	  // Region
	  // ------
	  
	  // Manage the visual regions of your composite application. See
	  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/
	  
	  Marionette.Region = Marionette.Object.extend({
	    constructor: function(options) {
	  
	      // set options temporarily so that we can get `el`.
	      // options will be overriden by Object.constructor
	      this.options = options || {};
	      this.el = this.getOption('el');
	  
	      // Handle when this.el is passed in as a $ wrapped element.
	      this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
	  
	      if (!this.el) {
	        throw new Marionette.Error({
	          name: 'NoElError',
	          message: 'An "el" must be specified for a region.'
	        });
	      }
	  
	      this.$el = this.getEl(this.el);
	      Marionette.Object.call(this, options);
	    },
	  
	    // Displays a backbone view instance inside of the region.
	    // Handles calling the `render` method for you. Reads content
	    // directly from the `el` attribute. Also calls an optional
	    // `onShow` and `onDestroy` method on your view, just after showing
	    // or just before destroying the view, respectively.
	    // The `preventDestroy` option can be used to prevent a view from
	    // the old view being destroyed on show.
	    // The `forceShow` option can be used to force a view to be
	    // re-rendered if it's already shown in the region.
	    show: function(view, options) {
	      if (!this._ensureElement()) {
	        return;
	      }
	  
	      this._ensureViewIsIntact(view);
	      Marionette.MonitorDOMRefresh(view);
	  
	      var showOptions     = options || {};
	      var isDifferentView = view !== this.currentView;
	      var preventDestroy  = !!showOptions.preventDestroy;
	      var forceShow       = !!showOptions.forceShow;
	  
	      // We are only changing the view if there is a current view to change to begin with
	      var isChangingView = !!this.currentView;
	  
	      // Only destroy the current view if we don't want to `preventDestroy` and if
	      // the view given in the first argument is different than `currentView`
	      var _shouldDestroyView = isDifferentView && !preventDestroy;
	  
	      // Only show the view given in the first argument if it is different than
	      // the current view or if we want to re-show the view. Note that if
	      // `_shouldDestroyView` is true, then `_shouldShowView` is also necessarily true.
	      var _shouldShowView = isDifferentView || forceShow;
	  
	      if (isChangingView) {
	        this.triggerMethod('before:swapOut', this.currentView, this, options);
	      }
	  
	      if (this.currentView && isDifferentView) {
	        delete this.currentView._parent;
	      }
	  
	      if (_shouldDestroyView) {
	        this.empty();
	  
	      // A `destroy` event is attached to the clean up manually removed views.
	      // We need to detach this event when a new view is going to be shown as it
	      // is no longer relevant.
	      } else if (isChangingView && _shouldShowView) {
	        this.currentView.off('destroy', this.empty, this);
	      }
	  
	      if (_shouldShowView) {
	  
	        // We need to listen for if a view is destroyed
	        // in a way other than through the region.
	        // If this happens we need to remove the reference
	        // to the currentView since once a view has been destroyed
	        // we can not reuse it.
	        view.once('destroy', this.empty, this);
	  
	        // make this region the view's parent,
	        // It's important that this parent binding happens before rendering
	        // so that any events the child may trigger during render can also be
	        // triggered on the child's ancestor views
	        view._parent = this;
	        this._renderView(view);
	  
	        if (isChangingView) {
	          this.triggerMethod('before:swap', view, this, options);
	        }
	  
	        this.triggerMethod('before:show', view, this, options);
	        Marionette.triggerMethodOn(view, 'before:show', view, this, options);
	  
	        if (isChangingView) {
	          this.triggerMethod('swapOut', this.currentView, this, options);
	        }
	  
	        // An array of views that we're about to display
	        var attachedRegion = Marionette.isNodeAttached(this.el);
	  
	        // The views that we're about to attach to the document
	        // It's important that we prevent _getNestedViews from being executed unnecessarily
	        // as it's a potentially-slow method
	        var displayedViews = [];
	  
	        var attachOptions = _.extend({
	          triggerBeforeAttach: this.triggerBeforeAttach,
	          triggerAttach: this.triggerAttach
	        }, showOptions);
	  
	        if (attachedRegion && attachOptions.triggerBeforeAttach) {
	          displayedViews = this._displayedViews(view);
	          this._triggerAttach(displayedViews, 'before:');
	        }
	  
	        this.attachHtml(view);
	        this.currentView = view;
	  
	        if (attachedRegion && attachOptions.triggerAttach) {
	          displayedViews = this._displayedViews(view);
	          this._triggerAttach(displayedViews);
	        }
	  
	        if (isChangingView) {
	          this.triggerMethod('swap', view, this, options);
	        }
	  
	        this.triggerMethod('show', view, this, options);
	        Marionette.triggerMethodOn(view, 'show', view, this, options);
	  
	        return this;
	      }
	  
	      return this;
	    },
	  
	    triggerBeforeAttach: true,
	    triggerAttach: true,
	  
	    _triggerAttach: function(views, prefix) {
	      var eventName = (prefix || '') + 'attach';
	      _.each(views, function(view) {
	        Marionette.triggerMethodOn(view, eventName, view, this);
	      }, this);
	    },
	  
	    _displayedViews: function(view) {
	      return _.union([view], _.result(view, '_getNestedViews') || []);
	    },
	  
	    _renderView: function(view) {
	      if (!view.supportsRenderLifecycle) {
	        Marionette.triggerMethodOn(view, 'before:render', view);
	      }
	      view.render();
	      if (!view.supportsRenderLifecycle) {
	        Marionette.triggerMethodOn(view, 'render', view);
	      }
	    },
	  
	    _ensureElement: function() {
	      if (!_.isObject(this.el)) {
	        this.$el = this.getEl(this.el);
	        this.el = this.$el[0];
	      }
	  
	      if (!this.$el || this.$el.length === 0) {
	        if (this.getOption('allowMissingEl')) {
	          return false;
	        } else {
	          throw new Marionette.Error('An "el" ' + this.$el.selector + ' must exist in DOM');
	        }
	      }
	      return true;
	    },
	  
	    _ensureViewIsIntact: function(view) {
	      if (!view) {
	        throw new Marionette.Error({
	          name: 'ViewNotValid',
	          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'
	        });
	      }
	  
	      if (view.isDestroyed) {
	        throw new Marionette.Error({
	          name: 'ViewDestroyedError',
	          message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
	        });
	      }
	    },
	  
	    // Override this method to change how the region finds the DOM
	    // element that it manages. Return a jQuery selector object scoped
	    // to a provided parent el or the document if none exists.
	    getEl: function(el) {
	      return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
	    },
	  
	    // Override this method to change how the new view is
	    // appended to the `$el` that the region is managing
	    attachHtml: function(view) {
	      this.$el.contents().detach();
	  
	      this.el.appendChild(view.el);
	    },
	  
	    // Destroy the current view, if there is one. If there is no
	    // current view, it does nothing and returns immediately.
	    empty: function(options) {
	      var view = this.currentView;
	  
	      var emptyOptions = options || {};
	      var preventDestroy  = !!emptyOptions.preventDestroy;
	      // If there is no view in the region
	      // we should not remove anything
	      if (!view) { return this; }
	  
	      view.off('destroy', this.empty, this);
	      this.triggerMethod('before:empty', view);
	      if (!preventDestroy) {
	        this._destroyView();
	      }
	      this.triggerMethod('empty', view);
	  
	      // Remove region pointer to the currentView
	      delete this.currentView;
	  
	      if (preventDestroy) {
	        this.$el.contents().detach();
	      }
	  
	      return this;
	    },
	  
	    // call 'destroy' or 'remove', depending on which is found
	    // on the view (if showing a raw Backbone view or a Marionette View)
	    _destroyView: function() {
	      var view = this.currentView;
	      if (view.isDestroyed) { return; }
	  
	      if (!view.supportsDestroyLifecycle) {
	        Marionette.triggerMethodOn(view, 'before:destroy', view);
	      }
	      if (view.destroy) {
	        view.destroy();
	      } else {
	        view.remove();
	  
	        // appending isDestroyed to raw Backbone View allows regions
	        // to throw a ViewDestroyedError for this view
	        view.isDestroyed = true;
	      }
	      if (!view.supportsDestroyLifecycle) {
	        Marionette.triggerMethodOn(view, 'destroy', view);
	      }
	    },
	  
	    // Attach an existing view to the region. This
	    // will not call `render` or `onShow` for the new view,
	    // and will not replace the current HTML for the `el`
	    // of the region.
	    attachView: function(view) {
	      if (this.currentView) {
	        delete this.currentView._parent;
	      }
	      view._parent = this;
	      this.currentView = view;
	      return this;
	    },
	  
	    // Checks whether a view is currently present within
	    // the region. Returns `true` if there is and `false` if
	    // no view is present.
	    hasView: function() {
	      return !!this.currentView;
	    },
	  
	    // Reset the region by destroying any existing view and
	    // clearing out the cached `$el`. The next time a view
	    // is shown via this region, the region will re-query the
	    // DOM for the region's `el`.
	    reset: function() {
	      this.empty();
	  
	      if (this.$el) {
	        this.el = this.$el.selector;
	      }
	  
	      delete this.$el;
	      return this;
	    }
	  
	  },
	  
	  // Static Methods
	  {
	  
	    // Build an instance of a region by passing in a configuration object
	    // and a default region class to use if none is specified in the config.
	    //
	    // The config object should either be a string as a jQuery DOM selector,
	    // a Region class directly, or an object literal that specifies a selector,
	    // a custom regionClass, and any options to be supplied to the region:
	    //
	    // ```js
	    // {
	    //   selector: "#foo",
	    //   regionClass: MyCustomRegion,
	    //   allowMissingEl: false
	    // }
	    // ```
	    //
	    buildRegion: function(regionConfig, DefaultRegionClass) {
	      if (_.isString(regionConfig)) {
	        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
	      }
	  
	      if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
	        return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
	      }
	  
	      if (_.isFunction(regionConfig)) {
	        return this._buildRegionFromRegionClass(regionConfig);
	      }
	  
	      throw new Marionette.Error({
	        message: 'Improper region configuration type.',
	        url: 'marionette.region.html#region-configuration-types'
	      });
	    },
	  
	    // Build the region from a string selector like '#foo-region'
	    _buildRegionFromSelector: function(selector, DefaultRegionClass) {
	      return new DefaultRegionClass({el: selector});
	    },
	  
	    // Build the region from a configuration object
	    // ```js
	    // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }
	    // ```
	    _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
	      var RegionClass = regionConfig.regionClass || DefaultRegionClass;
	      var options = _.omit(regionConfig, 'selector', 'regionClass');
	  
	      if (regionConfig.selector && !options.el) {
	        options.el = regionConfig.selector;
	      }
	  
	      return new RegionClass(options);
	    },
	  
	    // Build the region directly from a given `RegionClass`
	    _buildRegionFromRegionClass: function(RegionClass) {
	      return new RegionClass();
	    }
	  });
	  
	  // Region Manager
	  // --------------
	  
	  // Manage one or more related `Marionette.Region` objects.
	  Marionette.RegionManager = Marionette.Controller.extend({
	    constructor: function(options) {
	      this._regions = {};
	      this.length = 0;
	  
	      Marionette.Controller.call(this, options);
	  
	      this.addRegions(this.getOption('regions'));
	    },
	  
	    // Add multiple regions using an object literal or a
	    // function that returns an object literal, where
	    // each key becomes the region name, and each value is
	    // the region definition.
	    addRegions: function(regionDefinitions, defaults) {
	      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);
	  
	      return _.reduce(regionDefinitions, function(regions, definition, name) {
	        if (_.isString(definition)) {
	          definition = {selector: definition};
	        }
	        if (definition.selector) {
	          definition = _.defaults({}, definition, defaults);
	        }
	  
	        regions[name] = this.addRegion(name, definition);
	        return regions;
	      }, {}, this);
	    },
	  
	    // Add an individual region to the region manager,
	    // and return the region instance
	    addRegion: function(name, definition) {
	      var region;
	  
	      if (definition instanceof Marionette.Region) {
	        region = definition;
	      } else {
	        region = Marionette.Region.buildRegion(definition, Marionette.Region);
	      }
	  
	      this.triggerMethod('before:add:region', name, region);
	  
	      region._parent = this;
	      this._store(name, region);
	  
	      this.triggerMethod('add:region', name, region);
	      return region;
	    },
	  
	    // Get a region by name
	    get: function(name) {
	      return this._regions[name];
	    },
	  
	    // Gets all the regions contained within
	    // the `regionManager` instance.
	    getRegions: function() {
	      return _.clone(this._regions);
	    },
	  
	    // Remove a region by name
	    removeRegion: function(name) {
	      var region = this._regions[name];
	      this._remove(name, region);
	  
	      return region;
	    },
	  
	    // Empty all regions in the region manager, and
	    // remove them
	    removeRegions: function() {
	      var regions = this.getRegions();
	      _.each(this._regions, function(region, name) {
	        this._remove(name, region);
	      }, this);
	  
	      return regions;
	    },
	  
	    // Empty all regions in the region manager, but
	    // leave them attached
	    emptyRegions: function() {
	      var regions = this.getRegions();
	      _.invoke(regions, 'empty');
	      return regions;
	    },
	  
	    // Destroy all regions and shut down the region
	    // manager entirely
	    destroy: function() {
	      this.removeRegions();
	      return Marionette.Controller.prototype.destroy.apply(this, arguments);
	    },
	  
	    // internal method to store regions
	    _store: function(name, region) {
	      if (!this._regions[name]) {
	        this.length++;
	      }
	  
	      this._regions[name] = region;
	    },
	  
	    // internal method to remove a region
	    _remove: function(name, region) {
	      this.triggerMethod('before:remove:region', name, region);
	      region.empty();
	      region.stopListening();
	  
	      delete region._parent;
	      delete this._regions[name];
	      this.length--;
	      this.triggerMethod('remove:region', name, region);
	    }
	  });
	  
	  Marionette.actAsCollection(Marionette.RegionManager.prototype, '_regions');
	  
	
	  // Template Cache
	  // --------------
	  
	  // Manage templates stored in `<script>` blocks,
	  // caching them for faster access.
	  Marionette.TemplateCache = function(templateId) {
	    this.templateId = templateId;
	  };
	  
	  // TemplateCache object-level methods. Manage the template
	  // caches from these method calls instead of creating
	  // your own TemplateCache instances
	  _.extend(Marionette.TemplateCache, {
	    templateCaches: {},
	  
	    // Get the specified template by id. Either
	    // retrieves the cached version, or loads it
	    // from the DOM.
	    get: function(templateId, options) {
	      var cachedTemplate = this.templateCaches[templateId];
	  
	      if (!cachedTemplate) {
	        cachedTemplate = new Marionette.TemplateCache(templateId);
	        this.templateCaches[templateId] = cachedTemplate;
	      }
	  
	      return cachedTemplate.load(options);
	    },
	  
	    // Clear templates from the cache. If no arguments
	    // are specified, clears all templates:
	    // `clear()`
	    //
	    // If arguments are specified, clears each of the
	    // specified templates from the cache:
	    // `clear("#t1", "#t2", "...")`
	    clear: function() {
	      var i;
	      var args = _.toArray(arguments);
	      var length = args.length;
	  
	      if (length > 0) {
	        for (i = 0; i < length; i++) {
	          delete this.templateCaches[args[i]];
	        }
	      } else {
	        this.templateCaches = {};
	      }
	    }
	  });
	  
	  // TemplateCache instance methods, allowing each
	  // template cache object to manage its own state
	  // and know whether or not it has been loaded
	  _.extend(Marionette.TemplateCache.prototype, {
	  
	    // Internal method to load the template
	    load: function(options) {
	      // Guard clause to prevent loading this template more than once
	      if (this.compiledTemplate) {
	        return this.compiledTemplate;
	      }
	  
	      // Load the template and compile it
	      var template = this.loadTemplate(this.templateId, options);
	      this.compiledTemplate = this.compileTemplate(template, options);
	  
	      return this.compiledTemplate;
	    },
	  
	    // Load a template from the DOM, by default. Override
	    // this method to provide your own template retrieval
	    // For asynchronous loading with AMD/RequireJS, consider
	    // using a template-loader plugin as described here:
	    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
	    loadTemplate: function(templateId, options) {
	      var $template = Backbone.$(templateId);
	  
	      if (!$template.length) {
	        throw new Marionette.Error({
	          name: 'NoTemplateError',
	          message: 'Could not find template: "' + templateId + '"'
	        });
	      }
	      return $template.html();
	    },
	  
	    // Pre-compile the template before caching it. Override
	    // this method if you do not need to pre-compile a template
	    // (JST / RequireJS for example) or if you want to change
	    // the template engine used (Handebars, etc).
	    compileTemplate: function(rawTemplate, options) {
	      return _.template(rawTemplate, options);
	    }
	  });
	  
	  // Renderer
	  // --------
	  
	  // Render a template with data by passing in the template
	  // selector and the data to render.
	  Marionette.Renderer = {
	  
	    // Render a template with data. The `template` parameter is
	    // passed to the `TemplateCache` object to retrieve the
	    // template function. Override this method to provide your own
	    // custom rendering and template handling for all of Marionette.
	    render: function(template, data) {
	      if (!template) {
	        throw new Marionette.Error({
	          name: 'TemplateNotFoundError',
	          message: 'Cannot render the template since its false, null or undefined.'
	        });
	      }
	  
	      var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
	  
	      return templateFunc(data);
	    }
	  };
	  
	
	  /* jshint maxlen: 114, nonew: false */
	  // View
	  // ----
	  
	  // The core view class that other Marionette views extend from.
	  Marionette.View = Backbone.View.extend({
	    isDestroyed: false,
	    supportsRenderLifecycle: true,
	    supportsDestroyLifecycle: true,
	  
	    constructor: function(options) {
	      this.render = _.bind(this.render, this);
	  
	      options = Marionette._getValue(options, this);
	  
	      // this exposes view options to the view initializer
	      // this is a backfill since backbone removed the assignment
	      // of this.options
	      // at some point however this may be removed
	      this.options = _.extend({}, _.result(this, 'options'), options);
	  
	      this._behaviors = Marionette.Behaviors(this);
	  
	      Backbone.View.call(this, this.options);
	  
	      Marionette.MonitorDOMRefresh(this);
	    },
	  
	    // Get the template for this view
	    // instance. You can set a `template` attribute in the view
	    // definition or pass a `template: "whatever"` parameter in
	    // to the constructor options.
	    getTemplate: function() {
	      return this.getOption('template');
	    },
	  
	    // Serialize a model by returning its attributes. Clones
	    // the attributes to allow modification.
	    serializeModel: function(model) {
	      return model.toJSON.apply(model, _.rest(arguments));
	    },
	  
	    // Mix in template helper methods. Looks for a
	    // `templateHelpers` attribute, which can either be an
	    // object literal, or a function that returns an object
	    // literal. All methods and attributes from this object
	    // are copies to the object passed in.
	    mixinTemplateHelpers: function(target) {
	      target = target || {};
	      var templateHelpers = this.getOption('templateHelpers');
	      templateHelpers = Marionette._getValue(templateHelpers, this);
	      return _.extend(target, templateHelpers);
	    },
	  
	    // normalize the keys of passed hash with the views `ui` selectors.
	    // `{"@ui.foo": "bar"}`
	    normalizeUIKeys: function(hash) {
	      var uiBindings = _.result(this, '_uiBindings');
	      return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, 'ui'));
	    },
	  
	    // normalize the values of passed hash with the views `ui` selectors.
	    // `{foo: "@ui.bar"}`
	    normalizeUIValues: function(hash, properties) {
	      var ui = _.result(this, 'ui');
	      var uiBindings = _.result(this, '_uiBindings');
	      return Marionette.normalizeUIValues(hash, uiBindings || ui, properties);
	    },
	  
	    // Configure `triggers` to forward DOM events to view
	    // events. `triggers: {"click .foo": "do:foo"}`
	    configureTriggers: function() {
	      if (!this.triggers) { return; }
	  
	      // Allow `triggers` to be configured as a function
	      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));
	  
	      // Configure the triggers, prevent default
	      // action and stop propagation of DOM events
	      return _.reduce(triggers, function(events, value, key) {
	        events[key] = this._buildViewTrigger(value);
	        return events;
	      }, {}, this);
	    },
	  
	    // Overriding Backbone.View's delegateEvents to handle
	    // the `triggers`, `modelEvents`, and `collectionEvents` configuration
	    delegateEvents: function(events) {
	      this._delegateDOMEvents(events);
	      this.bindEntityEvents(this.model, this.getOption('modelEvents'));
	      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));
	  
	      _.each(this._behaviors, function(behavior) {
	        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));
	        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
	      }, this);
	  
	      return this;
	    },
	  
	    // internal method to delegate DOM events and triggers
	    _delegateDOMEvents: function(eventsArg) {
	      var events = Marionette._getValue(eventsArg || this.events, this);
	  
	      // normalize ui keys
	      events = this.normalizeUIKeys(events);
	      if (_.isUndefined(eventsArg)) {this.events = events;}
	  
	      var combinedEvents = {};
	  
	      // look up if this view has behavior events
	      var behaviorEvents = _.result(this, 'behaviorEvents') || {};
	      var triggers = this.configureTriggers();
	      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};
	  
	      // behavior events will be overriden by view events and or triggers
	      _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);
	  
	      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
	    },
	  
	    // Overriding Backbone.View's undelegateEvents to handle unbinding
	    // the `triggers`, `modelEvents`, and `collectionEvents` config
	    undelegateEvents: function() {
	      Backbone.View.prototype.undelegateEvents.apply(this, arguments);
	  
	      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));
	      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));
	  
	      _.each(this._behaviors, function(behavior) {
	        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));
	        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
	      }, this);
	  
	      return this;
	    },
	  
	    // Internal helper method to verify whether the view hasn't been destroyed
	    _ensureViewIsIntact: function() {
	      if (this.isDestroyed) {
	        throw new Marionette.Error({
	          name: 'ViewDestroyedError',
	          message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
	        });
	      }
	    },
	  
	    // Default `destroy` implementation, for removing a view from the
	    // DOM and unbinding it. Regions will call this method
	    // for you. You can specify an `onDestroy` method in your view to
	    // add custom code that is called after the view is destroyed.
	    destroy: function() {
	      if (this.isDestroyed) { return this; }
	  
	      var args = _.toArray(arguments);
	  
	      this.triggerMethod.apply(this, ['before:destroy'].concat(args));
	  
	      // mark as destroyed before doing the actual destroy, to
	      // prevent infinite loops within "destroy" event handlers
	      // that are trying to destroy other views
	      this.isDestroyed = true;
	      this.triggerMethod.apply(this, ['destroy'].concat(args));
	  
	      // unbind UI elements
	      this.unbindUIElements();
	  
	      this.isRendered = false;
	  
	      // remove the view from the DOM
	      this.remove();
	  
	      // Call destroy on each behavior after
	      // destroying the view.
	      // This unbinds event listeners
	      // that behaviors have registered for.
	      _.invoke(this._behaviors, 'destroy', args);
	  
	      return this;
	    },
	  
	    bindUIElements: function() {
	      this._bindUIElements();
	      _.invoke(this._behaviors, this._bindUIElements);
	    },
	  
	    // This method binds the elements specified in the "ui" hash inside the view's code with
	    // the associated jQuery selectors.
	    _bindUIElements: function() {
	      if (!this.ui) { return; }
	  
	      // store the ui hash in _uiBindings so they can be reset later
	      // and so re-rendering the view will be able to find the bindings
	      if (!this._uiBindings) {
	        this._uiBindings = this.ui;
	      }
	  
	      // get the bindings result, as a function or otherwise
	      var bindings = _.result(this, '_uiBindings');
	  
	      // empty the ui so we don't have anything to start with
	      this.ui = {};
	  
	      // bind each of the selectors
	      _.each(bindings, function(selector, key) {
	        this.ui[key] = this.$(selector);
	      }, this);
	    },
	  
	    // This method unbinds the elements specified in the "ui" hash
	    unbindUIElements: function() {
	      this._unbindUIElements();
	      _.invoke(this._behaviors, this._unbindUIElements);
	    },
	  
	    _unbindUIElements: function() {
	      if (!this.ui || !this._uiBindings) { return; }
	  
	      // delete all of the existing ui bindings
	      _.each(this.ui, function($el, name) {
	        delete this.ui[name];
	      }, this);
	  
	      // reset the ui element to the original bindings configuration
	      this.ui = this._uiBindings;
	      delete this._uiBindings;
	    },
	  
	    // Internal method to create an event handler for a given `triggerDef` like
	    // 'click:foo'
	    _buildViewTrigger: function(triggerDef) {
	  
	      var options = _.defaults({}, triggerDef, {
	        preventDefault: true,
	        stopPropagation: true
	      });
	  
	      var eventName = _.isObject(triggerDef) ? options.event : triggerDef;
	  
	      return function(e) {
	        if (e) {
	          if (e.preventDefault && options.preventDefault) {
	            e.preventDefault();
	          }
	  
	          if (e.stopPropagation && options.stopPropagation) {
	            e.stopPropagation();
	          }
	        }
	  
	        var args = {
	          view: this,
	          model: this.model,
	          collection: this.collection
	        };
	  
	        this.triggerMethod(eventName, args);
	      };
	    },
	  
	    setElement: function() {
	      var ret = Backbone.View.prototype.setElement.apply(this, arguments);
	  
	      // proxy behavior $el to the view's $el.
	      // This is needed because a view's $el proxy
	      // is not set until after setElement is called.
	      _.invoke(this._behaviors, 'proxyViewProperties', this);
	  
	      return ret;
	    },
	  
	    // import the `triggerMethod` to trigger events with corresponding
	    // methods if the method exists
	    triggerMethod: function() {
	      var ret = Marionette._triggerMethod(this, arguments);
	  
	      this._triggerEventOnBehaviors(arguments);
	      this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));
	  
	      return ret;
	    },
	  
	    _triggerEventOnBehaviors: function(args) {
	      var triggerMethod = Marionette._triggerMethod;
	      var behaviors = this._behaviors;
	      // Use good ol' for as this is a very hot function
	      for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
	        triggerMethod(behaviors[i], args);
	      }
	    },
	  
	    _triggerEventOnParentLayout: function(eventName, args) {
	      var layoutView = this._parentLayoutView();
	      if (!layoutView) {
	        return;
	      }
	  
	      // invoke triggerMethod on parent view
	      var eventPrefix = Marionette.getOption(layoutView, 'childViewEventPrefix');
	      var prefixedEventName = eventPrefix + ':' + eventName;
	      var callArgs = [this].concat(args);
	  
	      Marionette._triggerMethod(layoutView, prefixedEventName, callArgs);
	  
	      // call the parent view's childEvents handler
	      var childEvents = Marionette.getOption(layoutView, 'childEvents');
	  
	      // since childEvents can be an object or a function use Marionette._getValue
	      // to handle the abstaction for us.
	      childEvents = Marionette._getValue(childEvents, layoutView);
	      var normalizedChildEvents = layoutView.normalizeMethods(childEvents);
	  
	      if (normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName])) {
	        normalizedChildEvents[eventName].apply(layoutView, callArgs);
	      }
	    },
	  
	    // This method returns any views that are immediate
	    // children of this view
	    _getImmediateChildren: function() {
	      return [];
	    },
	  
	    // Returns an array of every nested view within this view
	    _getNestedViews: function() {
	      var children = this._getImmediateChildren();
	  
	      if (!children.length) { return children; }
	  
	      return _.reduce(children, function(memo, view) {
	        if (!view._getNestedViews) { return memo; }
	        return memo.concat(view._getNestedViews());
	      }, children);
	    },
	  
	    // Walk the _parent tree until we find a layout view (if one exists).
	    // Returns the parent layout view hierarchically closest to this view.
	    _parentLayoutView: function() {
	      var parent  = this._parent;
	  
	      while (parent) {
	        if (parent instanceof Marionette.LayoutView) {
	          return parent;
	        }
	        parent = parent._parent;
	      }
	    },
	  
	    // Imports the "normalizeMethods" to transform hashes of
	    // events=>function references/names to a hash of events=>function references
	    normalizeMethods: Marionette.normalizeMethods,
	  
	    // A handy way to merge passed-in options onto the instance
	    mergeOptions: Marionette.mergeOptions,
	  
	    // Proxy `getOption` to enable getting options from this or this.options by name.
	    getOption: Marionette.proxyGetOption,
	  
	    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
	    bindEntityEvents: Marionette.proxyBindEntityEvents,
	  
	    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
	    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
	  });
	  
	  // Item View
	  // ---------
	  
	  // A single item view implementation that contains code for rendering
	  // with underscore.js templates, serializing the view's model or collection,
	  // and calling several methods on extended views, such as `onRender`.
	  Marionette.ItemView = Marionette.View.extend({
	  
	    // Setting up the inheritance chain which allows changes to
	    // Marionette.View.prototype.constructor which allows overriding
	    constructor: function() {
	      Marionette.View.apply(this, arguments);
	    },
	  
	    // Serialize the model or collection for the view. If a model is
	    // found, the view's `serializeModel` is called. If a collection is found,
	    // each model in the collection is serialized by calling
	    // the view's `serializeCollection` and put into an `items` array in
	    // the resulting data. If both are found, defaults to the model.
	    // You can override the `serializeData` method in your own view definition,
	    // to provide custom serialization for your view's data.
	    serializeData: function() {
	      if (!this.model && !this.collection) {
	        return {};
	      }
	  
	      var args = [this.model || this.collection];
	      if (arguments.length) {
	        args.push.apply(args, arguments);
	      }
	  
	      if (this.model) {
	        return this.serializeModel.apply(this, args);
	      } else {
	        return {
	          items: this.serializeCollection.apply(this, args)
	        };
	      }
	    },
	  
	    // Serialize a collection by serializing each of its models.
	    serializeCollection: function(collection) {
	      return collection.toJSON.apply(collection, _.rest(arguments));
	    },
	  
	    // Render the view, defaulting to underscore.js templates.
	    // You can override this in your view definition to provide
	    // a very specific rendering for your view. In general, though,
	    // you should override the `Marionette.Renderer` object to
	    // change how Marionette renders views.
	    render: function() {
	      this._ensureViewIsIntact();
	  
	      this.triggerMethod('before:render', this);
	  
	      this._renderTemplate();
	      this.isRendered = true;
	      this.bindUIElements();
	  
	      this.triggerMethod('render', this);
	  
	      return this;
	    },
	  
	    // Internal method to render the template with the serialized data
	    // and template helpers via the `Marionette.Renderer` object.
	    // Throws an `UndefinedTemplateError` error if the template is
	    // any falsely value but literal `false`.
	    _renderTemplate: function() {
	      var template = this.getTemplate();
	  
	      // Allow template-less item views
	      if (template === false) {
	        return;
	      }
	  
	      if (!template) {
	        throw new Marionette.Error({
	          name: 'UndefinedTemplateError',
	          message: 'Cannot render the template since it is null or undefined.'
	        });
	      }
	  
	      // Add in entity data and template helpers
	      var data = this.mixinTemplateHelpers(this.serializeData());
	  
	      // Render and add to el
	      var html = Marionette.Renderer.render(template, data, this);
	      this.attachElContent(html);
	  
	      return this;
	    },
	  
	    // Attaches the content of a given view.
	    // This method can be overridden to optimize rendering,
	    // or to render in a non standard way.
	    //
	    // For example, using `innerHTML` instead of `$el.html`
	    //
	    // ```js
	    // attachElContent: function(html) {
	    //   this.el.innerHTML = html;
	    //   return this;
	    // }
	    // ```
	    attachElContent: function(html) {
	      this.$el.html(html);
	  
	      return this;
	    }
	  });
	  
	  /* jshint maxstatements: 20, maxcomplexity: 7 */
	  
	  // Collection View
	  // ---------------
	  
	  // A view that iterates over a Backbone.Collection
	  // and renders an individual child view for each model.
	  Marionette.CollectionView = Marionette.View.extend({
	  
	    // used as the prefix for child view events
	    // that are forwarded through the collectionview
	    childViewEventPrefix: 'childview',
	  
	    // flag for maintaining the sorted order of the collection
	    sort: true,
	  
	    // constructor
	    // option to pass `{sort: false}` to prevent the `CollectionView` from
	    // maintaining the sorted order of the collection.
	    // This will fallback onto appending childView's to the end.
	    //
	    // option to pass `{comparator: compFunction()}` to allow the `CollectionView`
	    // to use a custom sort order for the collection.
	    constructor: function(options) {
	      this.once('render', this._initialEvents);
	      this._initChildViewStorage();
	  
	      Marionette.View.apply(this, arguments);
	  
	      this.on({
	        'before:show':   this._onBeforeShowCalled,
	        'show':          this._onShowCalled,
	        'before:attach': this._onBeforeAttachCalled,
	        'attach':        this._onAttachCalled
	      });
	      this.initRenderBuffer();
	    },
	  
	    // Instead of inserting elements one by one into the page,
	    // it's much more performant to insert elements into a document
	    // fragment and then insert that document fragment into the page
	    initRenderBuffer: function() {
	      this._bufferedChildren = [];
	    },
	  
	    startBuffering: function() {
	      this.initRenderBuffer();
	      this.isBuffering = true;
	    },
	  
	    endBuffering: function() {
	      // Only trigger attach if already shown and attached, otherwise Region#show() handles this.
	      var canTriggerAttach = this._isShown && Marionette.isNodeAttached(this.el);
	      var nestedViews;
	  
	      this.isBuffering = false;
	  
	      if (this._isShown) {
	        this._triggerMethodMany(this._bufferedChildren, this, 'before:show');
	      }
	      if (canTriggerAttach && this._triggerBeforeAttach) {
	        nestedViews = this._getNestedViews();
	        this._triggerMethodMany(nestedViews, this, 'before:attach');
	      }
	  
	      this.attachBuffer(this, this._createBuffer());
	  
	      if (canTriggerAttach && this._triggerAttach) {
	        nestedViews = this._getNestedViews();
	        this._triggerMethodMany(nestedViews, this, 'attach');
	      }
	      if (this._isShown) {
	        this._triggerMethodMany(this._bufferedChildren, this, 'show');
	      }
	      this.initRenderBuffer();
	    },
	  
	    _triggerMethodMany: function(targets, source, eventName) {
	      var args = _.drop(arguments, 3);
	  
	      _.each(targets, function(target) {
	        Marionette.triggerMethodOn.apply(target, [target, eventName, target, source].concat(args));
	      });
	    },
	  
	    // Configured the initial events that the collection view
	    // binds to.
	    _initialEvents: function() {
	      if (this.collection) {
	        this.listenTo(this.collection, 'add', this._onCollectionAdd);
	        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
	        this.listenTo(this.collection, 'reset', this.render);
	  
	        if (this.getOption('sort')) {
	          this.listenTo(this.collection, 'sort', this._sortViews);
	        }
	      }
	    },
	  
	    // Handle a child added to the collection
	    _onCollectionAdd: function(child, collection, opts) {
	      // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2
	      var index = opts.at !== undefined && (opts.index || collection.indexOf(child));
	  
	      // When filtered or when there is no initial index, calculate index.
	      if (this.getOption('filter') || index === false) {
	        index = _.indexOf(this._filteredSortedModels(index), child);
	      }
	  
	      if (this._shouldAddChild(child, index)) {
	        this.destroyEmptyView();
	        var ChildView = this.getChildView(child);
	        this.addChild(child, ChildView, index);
	      }
	    },
	  
	    // get the child view by model it holds, and remove it
	    _onCollectionRemove: function(model) {
	      var view = this.children.findByModel(model);
	      this.removeChildView(view);
	      this.checkEmpty();
	    },
	  
	    _onBeforeShowCalled: function() {
	      // Reset attach event flags at the top of the Region#show() event lifecycle; if the Region's
	      // show() options permit onBeforeAttach/onAttach events, these flags will be set true again.
	      this._triggerBeforeAttach = this._triggerAttach = false;
	      this.children.each(function(childView) {
	        Marionette.triggerMethodOn(childView, 'before:show', childView);
	      });
	    },
	  
	    _onShowCalled: function() {
	      this.children.each(function(childView) {
	        Marionette.triggerMethodOn(childView, 'show', childView);
	      });
	    },
	  
	    // If during Region#show() onBeforeAttach was fired, continue firing it for child views
	    _onBeforeAttachCalled: function() {
	      this._triggerBeforeAttach = true;
	    },
	  
	    // If during Region#show() onAttach was fired, continue firing it for child views
	    _onAttachCalled: function() {
	      this._triggerAttach = true;
	    },
	  
	    // Render children views. Override this method to
	    // provide your own implementation of a render function for
	    // the collection view.
	    render: function() {
	      this._ensureViewIsIntact();
	      this.triggerMethod('before:render', this);
	      this._renderChildren();
	      this.isRendered = true;
	      this.triggerMethod('render', this);
	      return this;
	    },
	  
	    // Reorder DOM after sorting. When your element's rendering
	    // do not use their index, you can pass reorderOnSort: true
	    // to only reorder the DOM after a sort instead of rendering
	    // all the collectionView
	    reorder: function() {
	      var children = this.children;
	      var models = this._filteredSortedModels();
	  
	      if (!models.length && this._showingEmptyView) { return this; }
	  
	      var anyModelsAdded = _.some(models, function(model) {
	        return !children.findByModel(model);
	      });
	  
	      // If there are any new models added due to filtering
	      // We need to add child views
	      // So render as normal
	      if (anyModelsAdded) {
	        this.render();
	      } else {
	        // get the DOM nodes in the same order as the models
	        var elsToReorder = _.map(models, function(model, index) {
	          var view = children.findByModel(model);
	          view._index = index;
	          return view.el;
	        });
	  
	        // find the views that were children before but arent in this new ordering
	        var filteredOutViews = children.filter(function(view) {
	          return !_.contains(elsToReorder, view.el);
	        });
	  
	        this.triggerMethod('before:reorder');
	  
	        // since append moves elements that are already in the DOM,
	        // appending the elements will effectively reorder them
	        this._appendReorderedChildren(elsToReorder);
	  
	        // remove any views that have been filtered out
	        _.each(filteredOutViews, this.removeChildView, this);
	        this.checkEmpty();
	  
	        this.triggerMethod('reorder');
	      }
	    },
	  
	    // Render view after sorting. Override this method to
	    // change how the view renders after a `sort` on the collection.
	    // An example of this would be to only `renderChildren` in a `CompositeView`
	    // rather than the full view.
	    resortView: function() {
	      if (Marionette.getOption(this, 'reorderOnSort')) {
	        this.reorder();
	      } else {
	        this.render();
	      }
	    },
	  
	    // Internal method. This checks for any changes in the order of the collection.
	    // If the index of any view doesn't match, it will render.
	    _sortViews: function() {
	      var models = this._filteredSortedModels();
	  
	      // check for any changes in sort order of views
	      var orderChanged = _.find(models, function(item, index) {
	        var view = this.children.findByModel(item);
	        return !view || view._index !== index;
	      }, this);
	  
	      if (orderChanged) {
	        this.resortView();
	      }
	    },
	  
	    // Internal reference to what index a `emptyView` is.
	    _emptyViewIndex: -1,
	  
	    // Internal method. Separated so that CompositeView can append to the childViewContainer
	    // if necessary
	    _appendReorderedChildren: function(children) {
	      this.$el.append(children);
	    },
	  
	    // Internal method. Separated so that CompositeView can have
	    // more control over events being triggered, around the rendering
	    // process
	    _renderChildren: function() {
	      this.destroyEmptyView();
	      this.destroyChildren({checkEmpty: false});
	  
	      if (this.isEmpty(this.collection)) {
	        this.showEmptyView();
	      } else {
	        this.triggerMethod('before:render:collection', this);
	        this.startBuffering();
	        this.showCollection();
	        this.endBuffering();
	        this.triggerMethod('render:collection', this);
	  
	        // If we have shown children and none have passed the filter, show the empty view
	        if (this.children.isEmpty() && this.getOption('filter')) {
	          this.showEmptyView();
	        }
	      }
	    },
	  
	    // Internal method to loop through collection and show each child view.
	    showCollection: function() {
	      var ChildView;
	  
	      var models = this._filteredSortedModels();
	  
	      _.each(models, function(child, index) {
	        ChildView = this.getChildView(child);
	        this.addChild(child, ChildView, index);
	      }, this);
	    },
	  
	    // Allow the collection to be sorted by a custom view comparator
	    _filteredSortedModels: function(addedAt) {
	      var viewComparator = this.getViewComparator();
	      var models = this.collection.models;
	      addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);
	  
	      if (viewComparator) {
	        var addedModel;
	        // Preserve `at` location, even for a sorted view
	        if (addedAt) {
	          addedModel = models[addedAt];
	          models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));
	        }
	        models = this._sortModelsBy(models, viewComparator);
	        if (addedModel) {
	          models.splice(addedAt, 0, addedModel);
	        }
	      }
	  
	      // Filter after sorting in case the filter uses the index
	      if (this.getOption('filter')) {
	        models = _.filter(models, function(model, index) {
	          return this._shouldAddChild(model, index);
	        }, this);
	      }
	  
	      return models;
	    },
	  
	    _sortModelsBy: function(models, comparator) {
	      if (typeof comparator === 'string') {
	        return _.sortBy(models, function(model) {
	          return model.get(comparator);
	        }, this);
	      } else if (comparator.length === 1) {
	        return _.sortBy(models, comparator, this);
	      } else {
	        return models.sort(_.bind(comparator, this));
	      }
	    },
	  
	    // Internal method to show an empty view in place of
	    // a collection of child views, when the collection is empty
	    showEmptyView: function() {
	      var EmptyView = this.getEmptyView();
	  
	      if (EmptyView && !this._showingEmptyView) {
	        this.triggerMethod('before:render:empty');
	  
	        this._showingEmptyView = true;
	        var model = new Backbone.Model();
	        this.addEmptyView(model, EmptyView);
	  
	        this.triggerMethod('render:empty');
	      }
	    },
	  
	    // Internal method to destroy an existing emptyView instance
	    // if one exists. Called when a collection view has been
	    // rendered empty, and then a child is added to the collection.
	    destroyEmptyView: function() {
	      if (this._showingEmptyView) {
	        this.triggerMethod('before:remove:empty');
	  
	        this.destroyChildren();
	        delete this._showingEmptyView;
	  
	        this.triggerMethod('remove:empty');
	      }
	    },
	  
	    // Retrieve the empty view class
	    getEmptyView: function() {
	      return this.getOption('emptyView');
	    },
	  
	    // Render and show the emptyView. Similar to addChild method
	    // but "add:child" events are not fired, and the event from
	    // emptyView are not forwarded
	    addEmptyView: function(child, EmptyView) {
	      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
	      // Region#show() handles this.
	      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
	      var nestedViews;
	  
	      // get the emptyViewOptions, falling back to childViewOptions
	      var emptyViewOptions = this.getOption('emptyViewOptions') ||
	                            this.getOption('childViewOptions');
	  
	      if (_.isFunction(emptyViewOptions)) {
	        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);
	      }
	  
	      // build the empty view
	      var view = this.buildChildView(child, EmptyView, emptyViewOptions);
	  
	      view._parent = this;
	  
	      // Proxy emptyView events
	      this.proxyChildEvents(view);
	  
	      view.once('render', function() {
	        // trigger the 'before:show' event on `view` if the collection view has already been shown
	        if (this._isShown) {
	          Marionette.triggerMethodOn(view, 'before:show', view);
	        }
	  
	        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
	        // to public method `renderChildView()`.
	        if (canTriggerAttach && this._triggerBeforeAttach) {
	          nestedViews = this._getViewAndNested(view);
	          this._triggerMethodMany(nestedViews, this, 'before:attach');
	        }
	      }, this);
	  
	      // Store the `emptyView` like a `childView` so we can properly remove and/or close it later
	      this.children.add(view);
	      this.renderChildView(view, this._emptyViewIndex);
	  
	      // Trigger `attach`
	      if (canTriggerAttach && this._triggerAttach) {
	        nestedViews = this._getViewAndNested(view);
	        this._triggerMethodMany(nestedViews, this, 'attach');
	      }
	      // call the 'show' method if the collection view has already been shown
	      if (this._isShown) {
	        Marionette.triggerMethodOn(view, 'show', view);
	      }
	    },
	  
	    // Retrieve the `childView` class, either from `this.options.childView`
	    // or from the `childView` in the object definition. The "options"
	    // takes precedence.
	    // This method receives the model that will be passed to the instance
	    // created from this `childView`. Overriding methods may use the child
	    // to determine what `childView` class to return.
	    getChildView: function(child) {
	      var childView = this.getOption('childView');
	  
	      if (!childView) {
	        throw new Marionette.Error({
	          name: 'NoChildViewError',
	          message: 'A "childView" must be specified'
	        });
	      }
	  
	      return childView;
	    },
	  
	    // Render the child's view and add it to the
	    // HTML for the collection view at a given index.
	    // This will also update the indices of later views in the collection
	    // in order to keep the children in sync with the collection.
	    addChild: function(child, ChildView, index) {
	      var childViewOptions = this.getOption('childViewOptions');
	      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);
	  
	      var view = this.buildChildView(child, ChildView, childViewOptions);
	  
	      // increment indices of views after this one
	      this._updateIndices(view, true, index);
	  
	      this.triggerMethod('before:add:child', view);
	      this._addChildView(view, index);
	      this.triggerMethod('add:child', view);
	  
	      view._parent = this;
	  
	      return view;
	    },
	  
	    // Internal method. This decrements or increments the indices of views after the
	    // added/removed view to keep in sync with the collection.
	    _updateIndices: function(view, increment, index) {
	      if (!this.getOption('sort')) {
	        return;
	      }
	  
	      if (increment) {
	        // assign the index to the view
	        view._index = index;
	      }
	  
	      // update the indexes of views after this one
	      this.children.each(function(laterView) {
	        if (laterView._index >= view._index) {
	          laterView._index += increment ? 1 : -1;
	        }
	      });
	    },
	  
	    // Internal Method. Add the view to children and render it at
	    // the given index.
	    _addChildView: function(view, index) {
	      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
	      // Region#show() handles this.
	      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
	      var nestedViews;
	  
	      // set up the child view event forwarding
	      this.proxyChildEvents(view);
	  
	      view.once('render', function() {
	        // trigger the 'before:show' event on `view` if the collection view has already been shown
	        if (this._isShown && !this.isBuffering) {
	          Marionette.triggerMethodOn(view, 'before:show', view);
	        }
	  
	        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
	        // to public method `renderChildView()`.
	        if (canTriggerAttach && this._triggerBeforeAttach) {
	          nestedViews = this._getViewAndNested(view);
	          this._triggerMethodMany(nestedViews, this, 'before:attach');
	        }
	      }, this);
	  
	      // Store the child view itself so we can properly remove and/or destroy it later
	      this.children.add(view);
	      this.renderChildView(view, index);
	  
	      // Trigger `attach`
	      if (canTriggerAttach && this._triggerAttach) {
	        nestedViews = this._getViewAndNested(view);
	        this._triggerMethodMany(nestedViews, this, 'attach');
	      }
	      // Trigger `show`
	      if (this._isShown && !this.isBuffering) {
	        Marionette.triggerMethodOn(view, 'show', view);
	      }
	    },
	  
	    // render the child view
	    renderChildView: function(view, index) {
	      if (!view.supportsRenderLifecycle) {
	        Marionette.triggerMethodOn(view, 'before:render', view);
	      }
	      view.render();
	      if (!view.supportsRenderLifecycle) {
	        Marionette.triggerMethodOn(view, 'render', view);
	      }
	      this.attachHtml(this, view, index);
	      return view;
	    },
	  
	    // Build a `childView` for a model in the collection.
	    buildChildView: function(child, ChildViewClass, childViewOptions) {
	      var options = _.extend({model: child}, childViewOptions);
	      var childView = new ChildViewClass(options);
	      Marionette.MonitorDOMRefresh(childView);
	      return childView;
	    },
	  
	    // Remove the child view and destroy it.
	    // This function also updates the indices of
	    // later views in the collection in order to keep
	    // the children in sync with the collection.
	    removeChildView: function(view) {
	      if (!view) { return view; }
	  
	      this.triggerMethod('before:remove:child', view);
	  
	      if (!view.supportsDestroyLifecycle) {
	        Marionette.triggerMethodOn(view, 'before:destroy', view);
	      }
	      // call 'destroy' or 'remove', depending on which is found
	      if (view.destroy) {
	        view.destroy();
	      } else {
	        view.remove();
	      }
	      if (!view.supportsDestroyLifecycle) {
	        Marionette.triggerMethodOn(view, 'destroy', view);
	      }
	  
	      delete view._parent;
	      this.stopListening(view);
	      this.children.remove(view);
	      this.triggerMethod('remove:child', view);
	  
	      // decrement the index of views after this one
	      this._updateIndices(view, false);
	  
	      return view;
	    },
	  
	    // check if the collection is empty
	    isEmpty: function() {
	      return !this.collection || this.collection.length === 0;
	    },
	  
	    // If empty, show the empty view
	    checkEmpty: function() {
	      if (this.isEmpty(this.collection)) {
	        this.showEmptyView();
	      }
	    },
	  
	    // You might need to override this if you've overridden attachHtml
	    attachBuffer: function(collectionView, buffer) {
	      collectionView.$el.append(buffer);
	    },
	  
	    // Create a fragment buffer from the currently buffered children
	    _createBuffer: function() {
	      var elBuffer = document.createDocumentFragment();
	      _.each(this._bufferedChildren, function(b) {
	        elBuffer.appendChild(b.el);
	      });
	      return elBuffer;
	    },
	  
	    // Append the HTML to the collection's `el`.
	    // Override this method to do something other
	    // than `.append`.
	    attachHtml: function(collectionView, childView, index) {
	      if (collectionView.isBuffering) {
	        // buffering happens on reset events and initial renders
	        // in order to reduce the number of inserts into the
	        // document, which are expensive.
	        collectionView._bufferedChildren.splice(index, 0, childView);
	      } else {
	        // If we've already rendered the main collection, append
	        // the new child into the correct order if we need to. Otherwise
	        // append to the end.
	        if (!collectionView._insertBefore(childView, index)) {
	          collectionView._insertAfter(childView);
	        }
	      }
	    },
	  
	    // Internal method. Check whether we need to insert the view into
	    // the correct position.
	    _insertBefore: function(childView, index) {
	      var currentView;
	      var findPosition = this.getOption('sort') && (index < this.children.length - 1);
	      if (findPosition) {
	        // Find the view after this one
	        currentView = this.children.find(function(view) {
	          return view._index === index + 1;
	        });
	      }
	  
	      if (currentView) {
	        currentView.$el.before(childView.el);
	        return true;
	      }
	  
	      return false;
	    },
	  
	    // Internal method. Append a view to the end of the $el
	    _insertAfter: function(childView) {
	      this.$el.append(childView.el);
	    },
	  
	    // Internal method to set up the `children` object for
	    // storing all of the child views
	    _initChildViewStorage: function() {
	      this.children = new Backbone.ChildViewContainer();
	    },
	  
	    // Handle cleanup and other destroying needs for the collection of views
	    destroy: function() {
	      if (this.isDestroyed) { return this; }
	  
	      this.triggerMethod('before:destroy:collection');
	      this.destroyChildren({checkEmpty: false});
	      this.triggerMethod('destroy:collection');
	  
	      return Marionette.View.prototype.destroy.apply(this, arguments);
	    },
	  
	    // Destroy the child views that this collection view
	    // is holding on to, if any
	    destroyChildren: function(options) {
	      var destroyOptions = options || {};
	      var shouldCheckEmpty = true;
	      var childViews = this.children.map(_.identity);
	  
	      if (!_.isUndefined(destroyOptions.checkEmpty)) {
	        shouldCheckEmpty = destroyOptions.checkEmpty;
	      }
	  
	      this.children.each(this.removeChildView, this);
	  
	      if (shouldCheckEmpty) {
	        this.checkEmpty();
	      }
	      return childViews;
	    },
	  
	    // Return true if the given child should be shown
	    // Return false otherwise
	    // The filter will be passed (child, index, collection)
	    // Where
	    //  'child' is the given model
	    //  'index' is the index of that model in the collection
	    //  'collection' is the collection referenced by this CollectionView
	    _shouldAddChild: function(child, index) {
	      var filter = this.getOption('filter');
	      return !_.isFunction(filter) || filter.call(this, child, index, this.collection);
	    },
	  
	    // Set up the child view event forwarding. Uses a "childview:"
	    // prefix in front of all forwarded events.
	    proxyChildEvents: function(view) {
	      var prefix = this.getOption('childViewEventPrefix');
	  
	      // Forward all child view events through the parent,
	      // prepending "childview:" to the event name
	      this.listenTo(view, 'all', function() {
	        var args = _.toArray(arguments);
	        var rootEvent = args[0];
	        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));
	  
	        args[0] = prefix + ':' + rootEvent;
	        args.splice(1, 0, view);
	  
	        // call collectionView childEvent if defined
	        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {
	          childEvents[rootEvent].apply(this, args.slice(1));
	        }
	  
	        this.triggerMethod.apply(this, args);
	      });
	    },
	  
	    _getImmediateChildren: function() {
	      return _.values(this.children._views);
	    },
	  
	    _getViewAndNested: function(view) {
	      // This will not fail on Backbone.View which does not have #_getNestedViews.
	      return [view].concat(_.result(view, '_getNestedViews') || []);
	    },
	  
	    getViewComparator: function() {
	      return this.getOption('viewComparator');
	    }
	  });
	  
	  /* jshint maxstatements: 17, maxlen: 117 */
	  
	  // Composite View
	  // --------------
	  
	  // Used for rendering a branch-leaf, hierarchical structure.
	  // Extends directly from CollectionView and also renders an
	  // a child view as `modelView`, for the top leaf
	  Marionette.CompositeView = Marionette.CollectionView.extend({
	  
	    // Setting up the inheritance chain which allows changes to
	    // Marionette.CollectionView.prototype.constructor which allows overriding
	    // option to pass '{sort: false}' to prevent the CompositeView from
	    // maintaining the sorted order of the collection.
	    // This will fallback onto appending childView's to the end.
	    constructor: function() {
	      Marionette.CollectionView.apply(this, arguments);
	    },
	  
	    // Configured the initial events that the composite view
	    // binds to. Override this method to prevent the initial
	    // events, or to add your own initial events.
	    _initialEvents: function() {
	  
	      // Bind only after composite view is rendered to avoid adding child views
	      // to nonexistent childViewContainer
	  
	      if (this.collection) {
	        this.listenTo(this.collection, 'add', this._onCollectionAdd);
	        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
	        this.listenTo(this.collection, 'reset', this._renderChildren);
	  
	        if (this.getOption('sort')) {
	          this.listenTo(this.collection, 'sort', this._sortViews);
	        }
	      }
	    },
	  
	    // Retrieve the `childView` to be used when rendering each of
	    // the items in the collection. The default is to return
	    // `this.childView` or Marionette.CompositeView if no `childView`
	    // has been defined
	    getChildView: function(child) {
	      var childView = this.getOption('childView') || this.constructor;
	  
	      return childView;
	    },
	  
	    // Serialize the model for the view.
	    // You can override the `serializeData` method in your own view
	    // definition, to provide custom serialization for your view's data.
	    serializeData: function() {
	      var data = {};
	  
	      if (this.model) {
	        data = _.partial(this.serializeModel, this.model).apply(this, arguments);
	      }
	  
	      return data;
	    },
	  
	    // Renders the model and the collection.
	    render: function() {
	      this._ensureViewIsIntact();
	      this._isRendering = true;
	      this.resetChildViewContainer();
	  
	      this.triggerMethod('before:render', this);
	  
	      this._renderTemplate();
	      this._renderChildren();
	  
	      this._isRendering = false;
	      this.isRendered = true;
	      this.triggerMethod('render', this);
	      return this;
	    },
	  
	    _renderChildren: function() {
	      if (this.isRendered || this._isRendering) {
	        Marionette.CollectionView.prototype._renderChildren.call(this);
	      }
	    },
	  
	    // Render the root template that the children
	    // views are appended to
	    _renderTemplate: function() {
	      var data = {};
	      data = this.serializeData();
	      data = this.mixinTemplateHelpers(data);
	  
	      this.triggerMethod('before:render:template');
	  
	      var template = this.getTemplate();
	      var html = Marionette.Renderer.render(template, data, this);
	      this.attachElContent(html);
	  
	      // the ui bindings is done here and not at the end of render since they
	      // will not be available until after the model is rendered, but should be
	      // available before the collection is rendered.
	      this.bindUIElements();
	      this.triggerMethod('render:template');
	    },
	  
	    // Attaches the content of the root.
	    // This method can be overridden to optimize rendering,
	    // or to render in a non standard way.
	    //
	    // For example, using `innerHTML` instead of `$el.html`
	    //
	    // ```js
	    // attachElContent: function(html) {
	    //   this.el.innerHTML = html;
	    //   return this;
	    // }
	    // ```
	    attachElContent: function(html) {
	      this.$el.html(html);
	  
	      return this;
	    },
	  
	    // You might need to override this if you've overridden attachHtml
	    attachBuffer: function(compositeView, buffer) {
	      var $container = this.getChildViewContainer(compositeView);
	      $container.append(buffer);
	    },
	  
	    // Internal method. Append a view to the end of the $el.
	    // Overidden from CollectionView to ensure view is appended to
	    // childViewContainer
	    _insertAfter: function(childView) {
	      var $container = this.getChildViewContainer(this, childView);
	      $container.append(childView.el);
	    },
	  
	    // Internal method. Append reordered childView'.
	    // Overidden from CollectionView to ensure reordered views
	    // are appended to childViewContainer
	    _appendReorderedChildren: function(children) {
	      var $container = this.getChildViewContainer(this);
	      $container.append(children);
	    },
	  
	    // Internal method to ensure an `$childViewContainer` exists, for the
	    // `attachHtml` method to use.
	    getChildViewContainer: function(containerView, childView) {
	      if (!!containerView.$childViewContainer) {
	        return containerView.$childViewContainer;
	      }
	  
	      var container;
	      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');
	      if (childViewContainer) {
	  
	        var selector = Marionette._getValue(childViewContainer, containerView);
	  
	        if (selector.charAt(0) === '@' && containerView.ui) {
	          container = containerView.ui[selector.substr(4)];
	        } else {
	          container = containerView.$(selector);
	        }
	  
	        if (container.length <= 0) {
	          throw new Marionette.Error({
	            name: 'ChildViewContainerMissingError',
	            message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
	          });
	        }
	  
	      } else {
	        container = containerView.$el;
	      }
	  
	      containerView.$childViewContainer = container;
	      return container;
	    },
	  
	    // Internal method to reset the `$childViewContainer` on render
	    resetChildViewContainer: function() {
	      if (this.$childViewContainer) {
	        this.$childViewContainer = undefined;
	      }
	    }
	  });
	  
	  // Layout View
	  // -----------
	  
	  // Used for managing application layoutViews, nested layoutViews and
	  // multiple regions within an application or sub-application.
	  //
	  // A specialized view class that renders an area of HTML and then
	  // attaches `Region` instances to the specified `regions`.
	  // Used for composite view management and sub-application areas.
	  Marionette.LayoutView = Marionette.ItemView.extend({
	    regionClass: Marionette.Region,
	  
	    options: {
	      destroyImmediate: false
	    },
	  
	    // used as the prefix for child view events
	    // that are forwarded through the layoutview
	    childViewEventPrefix: 'childview',
	  
	    // Ensure the regions are available when the `initialize` method
	    // is called.
	    constructor: function(options) {
	      options = options || {};
	  
	      this._firstRender = true;
	      this._initializeRegions(options);
	  
	      Marionette.ItemView.call(this, options);
	    },
	  
	    // LayoutView's render will use the existing region objects the
	    // first time it is called. Subsequent calls will destroy the
	    // views that the regions are showing and then reset the `el`
	    // for the regions to the newly rendered DOM elements.
	    render: function() {
	      this._ensureViewIsIntact();
	  
	      if (this._firstRender) {
	        // if this is the first render, don't do anything to
	        // reset the regions
	        this._firstRender = false;
	      } else {
	        // If this is not the first render call, then we need to
	        // re-initialize the `el` for each region
	        this._reInitializeRegions();
	      }
	  
	      return Marionette.ItemView.prototype.render.apply(this, arguments);
	    },
	  
	    // Handle destroying regions, and then destroy the view itself.
	    destroy: function() {
	      if (this.isDestroyed) { return this; }
	      // #2134: remove parent element before destroying the child views, so
	      // removing the child views doesn't retrigger repaints
	      if (this.getOption('destroyImmediate') === true) {
	        this.$el.remove();
	      }
	      this.regionManager.destroy();
	      return Marionette.ItemView.prototype.destroy.apply(this, arguments);
	    },
	  
	    showChildView: function(regionName, view, options) {
	      var region = this.getRegion(regionName);
	      return region.show.apply(region, _.rest(arguments));
	    },
	  
	    getChildView: function(regionName) {
	      return this.getRegion(regionName).currentView;
	    },
	  
	    // Add a single region, by name, to the layoutView
	    addRegion: function(name, definition) {
	      var regions = {};
	      regions[name] = definition;
	      return this._buildRegions(regions)[name];
	    },
	  
	    // Add multiple regions as a {name: definition, name2: def2} object literal
	    addRegions: function(regions) {
	      this.regions = _.extend({}, this.regions, regions);
	      return this._buildRegions(regions);
	    },
	  
	    // Remove a single region from the LayoutView, by name
	    removeRegion: function(name) {
	      delete this.regions[name];
	      return this.regionManager.removeRegion(name);
	    },
	  
	    // Provides alternative access to regions
	    // Accepts the region name
	    // getRegion('main')
	    getRegion: function(region) {
	      return this.regionManager.get(region);
	    },
	  
	    // Get all regions
	    getRegions: function() {
	      return this.regionManager.getRegions();
	    },
	  
	    // internal method to build regions
	    _buildRegions: function(regions) {
	      var defaults = {
	        regionClass: this.getOption('regionClass'),
	        parentEl: _.partial(_.result, this, 'el')
	      };
	  
	      return this.regionManager.addRegions(regions, defaults);
	    },
	  
	    // Internal method to initialize the regions that have been defined in a
	    // `regions` attribute on this layoutView.
	    _initializeRegions: function(options) {
	      var regions;
	      this._initRegionManager();
	  
	      regions = Marionette._getValue(this.regions, this, [options]) || {};
	  
	      // Enable users to define `regions` as instance options.
	      var regionOptions = this.getOption.call(options, 'regions');
	  
	      // enable region options to be a function
	      regionOptions = Marionette._getValue(regionOptions, this, [options]);
	  
	      _.extend(regions, regionOptions);
	  
	      // Normalize region selectors hash to allow
	      // a user to use the @ui. syntax.
	      regions = this.normalizeUIValues(regions, ['selector', 'el']);
	  
	      this.addRegions(regions);
	    },
	  
	    // Internal method to re-initialize all of the regions by updating the `el` that
	    // they point to
	    _reInitializeRegions: function() {
	      this.regionManager.invoke('reset');
	    },
	  
	    // Enable easy overriding of the default `RegionManager`
	    // for customized region interactions and business specific
	    // view logic for better control over single regions.
	    getRegionManager: function() {
	      return new Marionette.RegionManager();
	    },
	  
	    // Internal method to initialize the region manager
	    // and all regions in it
	    _initRegionManager: function() {
	      this.regionManager = this.getRegionManager();
	      this.regionManager._parent = this;
	  
	      this.listenTo(this.regionManager, 'before:add:region', function(name) {
	        this.triggerMethod('before:add:region', name);
	      });
	  
	      this.listenTo(this.regionManager, 'add:region', function(name, region) {
	        this[name] = region;
	        this.triggerMethod('add:region', name, region);
	      });
	  
	      this.listenTo(this.regionManager, 'before:remove:region', function(name) {
	        this.triggerMethod('before:remove:region', name);
	      });
	  
	      this.listenTo(this.regionManager, 'remove:region', function(name, region) {
	        delete this[name];
	        this.triggerMethod('remove:region', name, region);
	      });
	    },
	  
	    _getImmediateChildren: function() {
	      return _.chain(this.regionManager.getRegions())
	        .pluck('currentView')
	        .compact()
	        .value();
	    }
	  });
	  
	
	  // Behavior
	  // --------
	  
	  // A Behavior is an isolated set of DOM /
	  // user interactions that can be mixed into any View.
	  // Behaviors allow you to blackbox View specific interactions
	  // into portable logical chunks, keeping your views simple and your code DRY.
	  
	  Marionette.Behavior = Marionette.Object.extend({
	    constructor: function(options, view) {
	      // Setup reference to the view.
	      // this comes in handle when a behavior
	      // wants to directly talk up the chain
	      // to the view.
	      this.view = view;
	      this.defaults = _.result(this, 'defaults') || {};
	      this.options  = _.extend({}, this.defaults, options);
	      // Construct an internal UI hash using
	      // the views UI hash and then the behaviors UI hash.
	      // This allows the user to use UI hash elements
	      // defined in the parent view as well as those
	      // defined in the given behavior.
	      this.ui = _.extend({}, _.result(view, 'ui'), _.result(this, 'ui'));
	  
	      Marionette.Object.apply(this, arguments);
	    },
	  
	    // proxy behavior $ method to the view
	    // this is useful for doing jquery DOM lookups
	    // scoped to behaviors view.
	    $: function() {
	      return this.view.$.apply(this.view, arguments);
	    },
	  
	    // Stops the behavior from listening to events.
	    // Overrides Object#destroy to prevent additional events from being triggered.
	    destroy: function() {
	      this.stopListening();
	  
	      return this;
	    },
	  
	    proxyViewProperties: function(view) {
	      this.$el = view.$el;
	      this.el = view.el;
	    }
	  });
	  
	  /* jshint maxlen: 143 */
	  // Behaviors
	  // ---------
	  
	  // Behaviors is a utility class that takes care of
	  // gluing your behavior instances to their given View.
	  // The most important part of this class is that you
	  // **MUST** override the class level behaviorsLookup
	  // method for things to work properly.
	  
	  Marionette.Behaviors = (function(Marionette, _) {
	    // Borrow event splitter from Backbone
	    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	  
	    function Behaviors(view, behaviors) {
	  
	      if (!_.isObject(view.behaviors)) {
	        return {};
	      }
	  
	      // Behaviors defined on a view can be a flat object literal
	      // or it can be a function that returns an object.
	      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));
	  
	      // Wraps several of the view's methods
	      // calling the methods first on each behavior
	      // and then eventually calling the method on the view.
	      Behaviors.wrap(view, behaviors, _.keys(methods));
	      return behaviors;
	    }
	  
	    var methods = {
	      behaviorTriggers: function(behaviorTriggers, behaviors) {
	        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
	        return triggerBuilder.buildBehaviorTriggers();
	      },
	  
	      behaviorEvents: function(behaviorEvents, behaviors) {
	        var _behaviorsEvents = {};
	  
	        _.each(behaviors, function(b, i) {
	          var _events = {};
	          var behaviorEvents = _.clone(_.result(b, 'events')) || {};
	  
	          // Normalize behavior events hash to allow
	          // a user to use the @ui. syntax.
	          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));
	  
	          var j = 0;
	          _.each(behaviorEvents, function(behaviour, key) {
	            var match     = key.match(delegateEventSplitter);
	  
	            // Set event name to be namespaced using the view cid,
	            // the behavior index, and the behavior event index
	            // to generate a non colliding event namespace
	            // http://api.jquery.com/event.namespace/
	            var eventName = match[1] + '.' + [this.cid, i, j++, ' '].join('');
	            var selector  = match[2];
	  
	            var eventKey  = eventName + selector;
	            var handler   = _.isFunction(behaviour) ? behaviour : b[behaviour];
	            if (!handler) { return; }
	            _events[eventKey] = _.bind(handler, b);
	          }, this);
	  
	          _behaviorsEvents = _.extend(_behaviorsEvents, _events);
	        }, this);
	  
	        return _behaviorsEvents;
	      }
	    };
	  
	    _.extend(Behaviors, {
	  
	      // Placeholder method to be extended by the user.
	      // The method should define the object that stores the behaviors.
	      // i.e.
	      //
	      // ```js
	      // Marionette.Behaviors.behaviorsLookup: function() {
	      //   return App.Behaviors
	      // }
	      // ```
	      behaviorsLookup: function() {
	        throw new Marionette.Error({
	          message: 'You must define where your behaviors are stored.',
	          url: 'marionette.behaviors.html#behaviorslookup'
	        });
	      },
	  
	      // Takes care of getting the behavior class
	      // given options and a key.
	      // If a user passes in options.behaviorClass
	      // default to using that. Otherwise delegate
	      // the lookup to the users `behaviorsLookup` implementation.
	      getBehaviorClass: function(options, key) {
	        if (options.behaviorClass) {
	          return options.behaviorClass;
	        }
	  
	        // Get behavior class can be either a flat object or a method
	        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];
	      },
	  
	      // Iterate over the behaviors object, for each behavior
	      // instantiate it and get its grouped behaviors.
	      parseBehaviors: function(view, behaviors) {
	        return _.chain(behaviors).map(function(options, key) {
	          var BehaviorClass = Behaviors.getBehaviorClass(options, key);
	  
	          var behavior = new BehaviorClass(options, view);
	          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));
	  
	          return [behavior].concat(nestedBehaviors);
	        }).flatten().value();
	      },
	  
	      // Wrap view internal methods so that they delegate to behaviors. For example,
	      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.
	      // i.e.
	      //
	      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`
	      wrap: function(view, behaviors, methodNames) {
	        _.each(methodNames, function(methodName) {
	          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
	        });
	      }
	    });
	  
	    // Class to build handlers for `triggers` on behaviors
	    // for views
	    function BehaviorTriggersBuilder(view, behaviors) {
	      this._view      = view;
	      this._behaviors = behaviors;
	      this._triggers  = {};
	    }
	  
	    _.extend(BehaviorTriggersBuilder.prototype, {
	      // Main method to build the triggers hash with event keys and handlers
	      buildBehaviorTriggers: function() {
	        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
	        return this._triggers;
	      },
	  
	      // Internal method to build all trigger handlers for a given behavior
	      _buildTriggerHandlersForBehavior: function(behavior, i) {
	        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};
	  
	        triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));
	  
	        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
	      },
	  
	      // Internal method to create and assign the trigger handler for a given
	      // behavior
	      _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
	        // Unique identifier for the `this._triggers` hash
	        var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
	          return triggerName + '.' + 'behaviortriggers' + i;
	        });
	  
	        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
	      }
	    });
	  
	    function getBehaviorsUI(behavior) {
	      return behavior._uiBindings || behavior.ui;
	    }
	  
	    return Behaviors;
	  
	  })(Marionette, _);
	  
	
	  // App Router
	  // ----------
	  
	  // Reduce the boilerplate code of handling route events
	  // and then calling a single method on another object.
	  // Have your routers configured to call the method on
	  // your object, directly.
	  //
	  // Configure an AppRouter with `appRoutes`.
	  //
	  // App routers can only take one `controller` object.
	  // It is recommended that you divide your controller
	  // objects in to smaller pieces of related functionality
	  // and have multiple routers / controllers, instead of
	  // just one giant router and controller.
	  //
	  // You can also add standard routes to an AppRouter.
	  
	  Marionette.AppRouter = Backbone.Router.extend({
	  
	    constructor: function(options) {
	      this.options = options || {};
	  
	      Backbone.Router.apply(this, arguments);
	  
	      var appRoutes = this.getOption('appRoutes');
	      var controller = this._getController();
	      this.processAppRoutes(controller, appRoutes);
	      this.on('route', this._processOnRoute, this);
	    },
	  
	    // Similar to route method on a Backbone Router but
	    // method is called on the controller
	    appRoute: function(route, methodName) {
	      var controller = this._getController();
	      this._addAppRoute(controller, route, methodName);
	    },
	  
	    // process the route event and trigger the onRoute
	    // method call, if it exists
	    _processOnRoute: function(routeName, routeArgs) {
	      // make sure an onRoute before trying to call it
	      if (_.isFunction(this.onRoute)) {
	        // find the path that matches the current route
	        var routePath = _.invert(this.getOption('appRoutes'))[routeName];
	        this.onRoute(routeName, routePath, routeArgs);
	      }
	    },
	  
	    // Internal method to process the `appRoutes` for the
	    // router, and turn them in to routes that trigger the
	    // specified method on the specified `controller`.
	    processAppRoutes: function(controller, appRoutes) {
	      if (!appRoutes) { return; }
	  
	      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes
	  
	      _.each(routeNames, function(route) {
	        this._addAppRoute(controller, route, appRoutes[route]);
	      }, this);
	    },
	  
	    _getController: function() {
	      return this.getOption('controller');
	    },
	  
	    _addAppRoute: function(controller, route, methodName) {
	      var method = controller[methodName];
	  
	      if (!method) {
	        throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
	      }
	  
	      this.route(route, methodName, _.bind(method, controller));
	    },
	  
	    mergeOptions: Marionette.mergeOptions,
	  
	    // Proxy `getOption` to enable getting options from this or this.options by name.
	    getOption: Marionette.proxyGetOption,
	  
	    triggerMethod: Marionette.triggerMethod,
	  
	    bindEntityEvents: Marionette.proxyBindEntityEvents,
	  
	    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
	  });
	  
	  // Application
	  // -----------
	  
	  // Contain and manage the composite application as a whole.
	  // Stores and starts up `Region` objects, includes an
	  // event aggregator as `app.vent`
	  Marionette.Application = Marionette.Object.extend({
	    constructor: function(options) {
	      this._initializeRegions(options);
	      this._initCallbacks = new Marionette.Callbacks();
	      this.submodules = {};
	      _.extend(this, options);
	      this._initChannel();
	      Marionette.Object.apply(this, arguments);
	    },
	  
	    // Command execution, facilitated by Backbone.Wreqr.Commands
	    execute: function() {
	      this.commands.execute.apply(this.commands, arguments);
	    },
	  
	    // Request/response, facilitated by Backbone.Wreqr.RequestResponse
	    request: function() {
	      return this.reqres.request.apply(this.reqres, arguments);
	    },
	  
	    // Add an initializer that is either run at when the `start`
	    // method is called, or run immediately if added after `start`
	    // has already been called.
	    addInitializer: function(initializer) {
	      this._initCallbacks.add(initializer);
	    },
	  
	    // kick off all of the application's processes.
	    // initializes all of the regions that have been added
	    // to the app, and runs all of the initializer functions
	    start: function(options) {
	      this.triggerMethod('before:start', options);
	      this._initCallbacks.run(options, this);
	      this.triggerMethod('start', options);
	    },
	  
	    // Add regions to your app.
	    // Accepts a hash of named strings or Region objects
	    // addRegions({something: "#someRegion"})
	    // addRegions({something: Region.extend({el: "#someRegion"}) });
	    addRegions: function(regions) {
	      return this._regionManager.addRegions(regions);
	    },
	  
	    // Empty all regions in the app, without removing them
	    emptyRegions: function() {
	      return this._regionManager.emptyRegions();
	    },
	  
	    // Removes a region from your app, by name
	    // Accepts the regions name
	    // removeRegion('myRegion')
	    removeRegion: function(region) {
	      return this._regionManager.removeRegion(region);
	    },
	  
	    // Provides alternative access to regions
	    // Accepts the region name
	    // getRegion('main')
	    getRegion: function(region) {
	      return this._regionManager.get(region);
	    },
	  
	    // Get all the regions from the region manager
	    getRegions: function() {
	      return this._regionManager.getRegions();
	    },
	  
	    // Create a module, attached to the application
	    module: function(moduleNames, moduleDefinition) {
	  
	      // Overwrite the module class if the user specifies one
	      var ModuleClass = Marionette.Module.getClass(moduleDefinition);
	  
	      var args = _.toArray(arguments);
	      args.unshift(this);
	  
	      // see the Marionette.Module object for more information
	      return ModuleClass.create.apply(ModuleClass, args);
	    },
	  
	    // Enable easy overriding of the default `RegionManager`
	    // for customized region interactions and business-specific
	    // view logic for better control over single regions.
	    getRegionManager: function() {
	      return new Marionette.RegionManager();
	    },
	  
	    // Internal method to initialize the regions that have been defined in a
	    // `regions` attribute on the application instance
	    _initializeRegions: function(options) {
	      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
	  
	      this._initRegionManager();
	  
	      // Enable users to define `regions` in instance options.
	      var optionRegions = Marionette.getOption(options, 'regions');
	  
	      // Enable region options to be a function
	      if (_.isFunction(optionRegions)) {
	        optionRegions = optionRegions.call(this, options);
	      }
	  
	      // Overwrite current regions with those passed in options
	      _.extend(regions, optionRegions);
	  
	      this.addRegions(regions);
	  
	      return this;
	    },
	  
	    // Internal method to set up the region manager
	    _initRegionManager: function() {
	      this._regionManager = this.getRegionManager();
	      this._regionManager._parent = this;
	  
	      this.listenTo(this._regionManager, 'before:add:region', function() {
	        Marionette._triggerMethod(this, 'before:add:region', arguments);
	      });
	  
	      this.listenTo(this._regionManager, 'add:region', function(name, region) {
	        this[name] = region;
	        Marionette._triggerMethod(this, 'add:region', arguments);
	      });
	  
	      this.listenTo(this._regionManager, 'before:remove:region', function() {
	        Marionette._triggerMethod(this, 'before:remove:region', arguments);
	      });
	  
	      this.listenTo(this._regionManager, 'remove:region', function(name) {
	        delete this[name];
	        Marionette._triggerMethod(this, 'remove:region', arguments);
	      });
	    },
	  
	    // Internal method to setup the Wreqr.radio channel
	    _initChannel: function() {
	      this.channelName = _.result(this, 'channelName') || 'global';
	      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);
	      this.vent = _.result(this, 'vent') || this.channel.vent;
	      this.commands = _.result(this, 'commands') || this.channel.commands;
	      this.reqres = _.result(this, 'reqres') || this.channel.reqres;
	    }
	  });
	  
	  /* jshint maxparams: 9 */
	  
	  // Module
	  // ------
	  
	  // A simple module system, used to create privacy and encapsulation in
	  // Marionette applications
	  Marionette.Module = function(moduleName, app, options) {
	    this.moduleName = moduleName;
	    this.options = _.extend({}, this.options, options);
	    // Allow for a user to overide the initialize
	    // for a given module instance.
	    this.initialize = options.initialize || this.initialize;
	  
	    // Set up an internal store for sub-modules.
	    this.submodules = {};
	  
	    this._setupInitializersAndFinalizers();
	  
	    // Set an internal reference to the app
	    // within a module.
	    this.app = app;
	  
	    if (_.isFunction(this.initialize)) {
	      this.initialize(moduleName, app, this.options);
	    }
	  };
	  
	  Marionette.Module.extend = Marionette.extend;
	  
	  // Extend the Module prototype with events / listenTo, so that the module
	  // can be used as an event aggregator or pub/sub.
	  _.extend(Marionette.Module.prototype, Backbone.Events, {
	  
	    // By default modules start with their parents.
	    startWithParent: true,
	  
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic when extending Marionette.Module.
	    initialize: function() {},
	  
	    // Initializer for a specific module. Initializers are run when the
	    // module's `start` method is called.
	    addInitializer: function(callback) {
	      this._initializerCallbacks.add(callback);
	    },
	  
	    // Finalizers are run when a module is stopped. They are used to teardown
	    // and finalize any variables, references, events and other code that the
	    // module had set up.
	    addFinalizer: function(callback) {
	      this._finalizerCallbacks.add(callback);
	    },
	  
	    // Start the module, and run all of its initializers
	    start: function(options) {
	      // Prevent re-starting a module that is already started
	      if (this._isInitialized) { return; }
	  
	      // start the sub-modules (depth-first hierarchy)
	      _.each(this.submodules, function(mod) {
	        // check to see if we should start the sub-module with this parent
	        if (mod.startWithParent) {
	          mod.start(options);
	        }
	      });
	  
	      // run the callbacks to "start" the current module
	      this.triggerMethod('before:start', options);
	  
	      this._initializerCallbacks.run(options, this);
	      this._isInitialized = true;
	  
	      this.triggerMethod('start', options);
	    },
	  
	    // Stop this module by running its finalizers and then stop all of
	    // the sub-modules for this module
	    stop: function() {
	      // if we are not initialized, don't bother finalizing
	      if (!this._isInitialized) { return; }
	      this._isInitialized = false;
	  
	      this.triggerMethod('before:stop');
	  
	      // stop the sub-modules; depth-first, to make sure the
	      // sub-modules are stopped / finalized before parents
	      _.invoke(this.submodules, 'stop');
	  
	      // run the finalizers
	      this._finalizerCallbacks.run(undefined, this);
	  
	      // reset the initializers and finalizers
	      this._initializerCallbacks.reset();
	      this._finalizerCallbacks.reset();
	  
	      this.triggerMethod('stop');
	    },
	  
	    // Configure the module with a definition function and any custom args
	    // that are to be passed in to the definition function
	    addDefinition: function(moduleDefinition, customArgs) {
	      this._runModuleDefinition(moduleDefinition, customArgs);
	    },
	  
	    // Internal method: run the module definition function with the correct
	    // arguments
	    _runModuleDefinition: function(definition, customArgs) {
	      // If there is no definition short circut the method.
	      if (!definition) { return; }
	  
	      // build the correct list of arguments for the module definition
	      var args = _.flatten([
	        this,
	        this.app,
	        Backbone,
	        Marionette,
	        Backbone.$, _,
	        customArgs
	      ]);
	  
	      definition.apply(this, args);
	    },
	  
	    // Internal method: set up new copies of initializers and finalizers.
	    // Calling this method will wipe out all existing initializers and
	    // finalizers.
	    _setupInitializersAndFinalizers: function() {
	      this._initializerCallbacks = new Marionette.Callbacks();
	      this._finalizerCallbacks = new Marionette.Callbacks();
	    },
	  
	    // import the `triggerMethod` to trigger events with corresponding
	    // methods if the method exists
	    triggerMethod: Marionette.triggerMethod
	  });
	  
	  // Class methods to create modules
	  _.extend(Marionette.Module, {
	  
	    // Create a module, hanging off the app parameter as the parent object.
	    create: function(app, moduleNames, moduleDefinition) {
	      var module = app;
	  
	      // get the custom args passed in after the module definition and
	      // get rid of the module name and definition function
	      var customArgs = _.drop(arguments, 3);
	  
	      // Split the module names and get the number of submodules.
	      // i.e. an example module name of `Doge.Wow.Amaze` would
	      // then have the potential for 3 module definitions.
	      moduleNames = moduleNames.split('.');
	      var length = moduleNames.length;
	  
	      // store the module definition for the last module in the chain
	      var moduleDefinitions = [];
	      moduleDefinitions[length - 1] = moduleDefinition;
	  
	      // Loop through all the parts of the module definition
	      _.each(moduleNames, function(moduleName, i) {
	        var parentModule = module;
	        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
	        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
	      }, this);
	  
	      // Return the last module in the definition chain
	      return module;
	    },
	  
	    _getModule: function(parentModule, moduleName, app, def, args) {
	      var options = _.extend({}, def);
	      var ModuleClass = this.getClass(def);
	  
	      // Get an existing module of this name if we have one
	      var module = parentModule[moduleName];
	  
	      if (!module) {
	        // Create a new module if we don't have one
	        module = new ModuleClass(moduleName, app, options);
	        parentModule[moduleName] = module;
	        // store the module on the parent
	        parentModule.submodules[moduleName] = module;
	      }
	  
	      return module;
	    },
	  
	    // ## Module Classes
	    //
	    // Module classes can be used as an alternative to the define pattern.
	    // The extend function of a Module is identical to the extend functions
	    // on other Backbone and Marionette classes.
	    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.
	    getClass: function(moduleDefinition) {
	      var ModuleClass = Marionette.Module;
	  
	      if (!moduleDefinition) {
	        return ModuleClass;
	      }
	  
	      // If all of the module's functionality is defined inside its class,
	      // then the class can be passed in directly. `MyApp.module("Foo", FooModule)`.
	      if (moduleDefinition.prototype instanceof ModuleClass) {
	        return moduleDefinition;
	      }
	  
	      return moduleDefinition.moduleClass || ModuleClass;
	    },
	  
	    // Add the module definition and add a startWithParent initializer function.
	    // This is complicated because module definitions are heavily overloaded
	    // and support an anonymous function, module class, or options object
	    _addModuleDefinition: function(parentModule, module, def, args) {
	      var fn = this._getDefine(def);
	      var startWithParent = this._getStartWithParent(def, module);
	  
	      if (fn) {
	        module.addDefinition(fn, args);
	      }
	  
	      this._addStartWithParent(parentModule, module, startWithParent);
	    },
	  
	    _getStartWithParent: function(def, module) {
	      var swp;
	  
	      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {
	        swp = module.constructor.prototype.startWithParent;
	        return _.isUndefined(swp) ? true : swp;
	      }
	  
	      if (_.isObject(def)) {
	        swp = def.startWithParent;
	        return _.isUndefined(swp) ? true : swp;
	      }
	  
	      return true;
	    },
	  
	    _getDefine: function(def) {
	      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
	        return def;
	      }
	  
	      if (_.isObject(def)) {
	        return def.define;
	      }
	  
	      return null;
	    },
	  
	    _addStartWithParent: function(parentModule, module, startWithParent) {
	      module.startWithParent = module.startWithParent && startWithParent;
	  
	      if (!module.startWithParent || !!module.startWithParentIsConfigured) {
	        return;
	      }
	  
	      module.startWithParentIsConfigured = true;
	  
	      parentModule.addInitializer(function(options) {
	        if (module.startWithParent) {
	          module.start(options);
	        }
	      });
	    }
	  });
	  
	
	  return Marionette;
	}));


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {//     Backbone.js 1.3.3
	
	//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Backbone may be freely distributed under the MIT license.
	//     For all details and documentation:
	//     http://backbonejs.org
	
	(function(factory) {
	
	  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
	  // We use `self` instead of `window` for `WebWorker` support.
	  var root = (typeof self == 'object' && self.self === self && self) ||
	            (typeof global == 'object' && global.global === global && global);
	
	  // Set up Backbone appropriately for the environment. Start with AMD.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(7), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, $, exports) {
	      // Export global even in AMD case in case this script is loaded with
	      // others that may still expect a global Backbone.
	      root.Backbone = factory(root, exports, _, $);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
	  } else if (typeof exports !== 'undefined') {
	    var _ = require('underscore'), $;
	    try { $ = require('jquery'); } catch (e) {}
	    factory(root, exports, _, $);
	
	  // Finally, as a browser global.
	  } else {
	    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
	  }
	
	})(function(root, Backbone, _, $) {
	
	  // Initial Setup
	  // -------------
	
	  // Save the previous value of the `Backbone` variable, so that it can be
	  // restored later on, if `noConflict` is used.
	  var previousBackbone = root.Backbone;
	
	  // Create a local reference to a common array method we'll want to use later.
	  var slice = Array.prototype.slice;
	
	  // Current version of the library. Keep in sync with `package.json`.
	  Backbone.VERSION = '1.3.3';
	
	  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
	  // the `$` variable.
	  Backbone.$ = $;
	
	  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
	  // to its previous owner. Returns a reference to this Backbone object.
	  Backbone.noConflict = function() {
	    root.Backbone = previousBackbone;
	    return this;
	  };
	
	  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
	  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
	  // set a `X-Http-Method-Override` header.
	  Backbone.emulateHTTP = false;
	
	  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
	  // `application/json` requests ... this will encode the body as
	  // `application/x-www-form-urlencoded` instead and will send the model in a
	  // form param named `model`.
	  Backbone.emulateJSON = false;
	
	  // Proxy Backbone class methods to Underscore functions, wrapping the model's
	  // `attributes` object or collection's `models` array behind the scenes.
	  //
	  // collection.filter(function(model) { return model.get('age') > 10 });
	  // collection.each(this.addView);
	  //
	  // `Function#apply` can be slow so we use the method's arg count, if we know it.
	  var addMethod = function(length, method, attribute) {
	    switch (length) {
	      case 1: return function() {
	        return _[method](this[attribute]);
	      };
	      case 2: return function(value) {
	        return _[method](this[attribute], value);
	      };
	      case 3: return function(iteratee, context) {
	        return _[method](this[attribute], cb(iteratee, this), context);
	      };
	      case 4: return function(iteratee, defaultVal, context) {
	        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);
	      };
	      default: return function() {
	        var args = slice.call(arguments);
	        args.unshift(this[attribute]);
	        return _[method].apply(_, args);
	      };
	    }
	  };
	  var addUnderscoreMethods = function(Class, methods, attribute) {
	    _.each(methods, function(length, method) {
	      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
	    });
	  };
	
	  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.
	  var cb = function(iteratee, instance) {
	    if (_.isFunction(iteratee)) return iteratee;
	    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
	    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };
	    return iteratee;
	  };
	  var modelMatcher = function(attrs) {
	    var matcher = _.matches(attrs);
	    return function(model) {
	      return matcher(model.attributes);
	    };
	  };
	
	  // Backbone.Events
	  // ---------------
	
	  // A module that can be mixed in to *any object* in order to provide it with
	  // a custom event channel. You may bind a callback to an event with `on` or
	  // remove with `off`; `trigger`-ing an event fires all callbacks in
	  // succession.
	  //
	  //     var object = {};
	  //     _.extend(object, Backbone.Events);
	  //     object.on('expand', function(){ alert('expanded'); });
	  //     object.trigger('expand');
	  //
	  var Events = Backbone.Events = {};
	
	  // Regular expression used to split event strings.
	  var eventSplitter = /\s+/;
	
	  // Iterates over the standard `event, callback` (as well as the fancy multiple
	  // space-separated events `"change blur", callback` and jQuery-style event
	  // maps `{event: callback}`).
	  var eventsApi = function(iteratee, events, name, callback, opts) {
	    var i = 0, names;
	    if (name && typeof name === 'object') {
	      // Handle event maps.
	      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
	      for (names = _.keys(name); i < names.length ; i++) {
	        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
	      }
	    } else if (name && eventSplitter.test(name)) {
	      // Handle space-separated event names by delegating them individually.
	      for (names = name.split(eventSplitter); i < names.length; i++) {
	        events = iteratee(events, names[i], callback, opts);
	      }
	    } else {
	      // Finally, standard events.
	      events = iteratee(events, name, callback, opts);
	    }
	    return events;
	  };
	
	  // Bind an event to a `callback` function. Passing `"all"` will bind
	  // the callback to all events fired.
	  Events.on = function(name, callback, context) {
	    return internalOn(this, name, callback, context);
	  };
	
	  // Guard the `listening` argument from the public API.
	  var internalOn = function(obj, name, callback, context, listening) {
	    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
	      context: context,
	      ctx: obj,
	      listening: listening
	    });
	
	    if (listening) {
	      var listeners = obj._listeners || (obj._listeners = {});
	      listeners[listening.id] = listening;
	    }
	
	    return obj;
	  };
	
	  // Inversion-of-control versions of `on`. Tell *this* object to listen to
	  // an event in another object... keeping track of what it's listening to
	  // for easier unbinding later.
	  Events.listenTo = function(obj, name, callback) {
	    if (!obj) return this;
	    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
	    var listeningTo = this._listeningTo || (this._listeningTo = {});
	    var listening = listeningTo[id];
	
	    // This object is not listening to any other events on `obj` yet.
	    // Setup the necessary references to track the listening callbacks.
	    if (!listening) {
	      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
	      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
	    }
	
	    // Bind callbacks on obj, and keep track of them on listening.
	    internalOn(obj, name, callback, this, listening);
	    return this;
	  };
	
	  // The reducing API that adds a callback to the `events` object.
	  var onApi = function(events, name, callback, options) {
	    if (callback) {
	      var handlers = events[name] || (events[name] = []);
	      var context = options.context, ctx = options.ctx, listening = options.listening;
	      if (listening) listening.count++;
	
	      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});
	    }
	    return events;
	  };
	
	  // Remove one or many callbacks. If `context` is null, removes all
	  // callbacks with that function. If `callback` is null, removes all
	  // callbacks for the event. If `name` is null, removes all bound
	  // callbacks for all events.
	  Events.off = function(name, callback, context) {
	    if (!this._events) return this;
	    this._events = eventsApi(offApi, this._events, name, callback, {
	      context: context,
	      listeners: this._listeners
	    });
	    return this;
	  };
	
	  // Tell this object to stop listening to either specific events ... or
	  // to every object it's currently listening to.
	  Events.stopListening = function(obj, name, callback) {
	    var listeningTo = this._listeningTo;
	    if (!listeningTo) return this;
	
	    var ids = obj ? [obj._listenId] : _.keys(listeningTo);
	
	    for (var i = 0; i < ids.length; i++) {
	      var listening = listeningTo[ids[i]];
	
	      // If listening doesn't exist, this object is not currently
	      // listening to obj. Break out early.
	      if (!listening) break;
	
	      listening.obj.off(name, callback, this);
	    }
	
	    return this;
	  };
	
	  // The reducing API that removes a callback from the `events` object.
	  var offApi = function(events, name, callback, options) {
	    if (!events) return;
	
	    var i = 0, listening;
	    var context = options.context, listeners = options.listeners;
	
	    // Delete all events listeners and "drop" events.
	    if (!name && !callback && !context) {
	      var ids = _.keys(listeners);
	      for (; i < ids.length; i++) {
	        listening = listeners[ids[i]];
	        delete listeners[listening.id];
	        delete listening.listeningTo[listening.objId];
	      }
	      return;
	    }
	
	    var names = name ? [name] : _.keys(events);
	    for (; i < names.length; i++) {
	      name = names[i];
	      var handlers = events[name];
	
	      // Bail out if there are no events stored.
	      if (!handlers) break;
	
	      // Replace events if there are any remaining.  Otherwise, clean up.
	      var remaining = [];
	      for (var j = 0; j < handlers.length; j++) {
	        var handler = handlers[j];
	        if (
	          callback && callback !== handler.callback &&
	            callback !== handler.callback._callback ||
	              context && context !== handler.context
	        ) {
	          remaining.push(handler);
	        } else {
	          listening = handler.listening;
	          if (listening && --listening.count === 0) {
	            delete listeners[listening.id];
	            delete listening.listeningTo[listening.objId];
	          }
	        }
	      }
	
	      // Update tail event if the list has any events.  Otherwise, clean up.
	      if (remaining.length) {
	        events[name] = remaining;
	      } else {
	        delete events[name];
	      }
	    }
	    return events;
	  };
	
	  // Bind an event to only be triggered a single time. After the first time
	  // the callback is invoked, its listener will be removed. If multiple events
	  // are passed in using the space-separated syntax, the handler will fire
	  // once for each event, not once for a combination of all events.
	  Events.once = function(name, callback, context) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
	    if (typeof name === 'string' && context == null) callback = void 0;
	    return this.on(events, callback, context);
	  };
	
	  // Inversion-of-control versions of `once`.
	  Events.listenToOnce = function(obj, name, callback) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
	    return this.listenTo(obj, events);
	  };
	
	  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
	  // `offer` unbinds the `onceWrapper` after it has been called.
	  var onceMap = function(map, name, callback, offer) {
	    if (callback) {
	      var once = map[name] = _.once(function() {
	        offer(name, once);
	        callback.apply(this, arguments);
	      });
	      once._callback = callback;
	    }
	    return map;
	  };
	
	  // Trigger one or many events, firing all bound callbacks. Callbacks are
	  // passed the same arguments as `trigger` is, apart from the event name
	  // (unless you're listening on `"all"`, which will cause your callback to
	  // receive the true name of the event as the first argument).
	  Events.trigger = function(name) {
	    if (!this._events) return this;
	
	    var length = Math.max(0, arguments.length - 1);
	    var args = Array(length);
	    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
	
	    eventsApi(triggerApi, this._events, name, void 0, args);
	    return this;
	  };
	
	  // Handles triggering the appropriate event callbacks.
	  var triggerApi = function(objEvents, name, callback, args) {
	    if (objEvents) {
	      var events = objEvents[name];
	      var allEvents = objEvents.all;
	      if (events && allEvents) allEvents = allEvents.slice();
	      if (events) triggerEvents(events, args);
	      if (allEvents) triggerEvents(allEvents, [name].concat(args));
	    }
	    return objEvents;
	  };
	
	  // A difficult-to-believe, but optimized internal dispatch function for
	  // triggering events. Tries to keep the usual cases speedy (most internal
	  // Backbone events have 3 arguments).
	  var triggerEvents = function(events, args) {
	    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
	    switch (args.length) {
	      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
	      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
	      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
	      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
	      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
	    }
	  };
	
	  // Aliases for backwards compatibility.
	  Events.bind   = Events.on;
	  Events.unbind = Events.off;
	
	  // Allow the `Backbone` object to serve as a global event bus, for folks who
	  // want global "pubsub" in a convenient place.
	  _.extend(Backbone, Events);
	
	  // Backbone.Model
	  // --------------
	
	  // Backbone **Models** are the basic data object in the framework --
	  // frequently representing a row in a table in a database on your server.
	  // A discrete chunk of data and a bunch of useful, related methods for
	  // performing computations and transformations on that data.
	
	  // Create a new model with the specified attributes. A client id (`cid`)
	  // is automatically generated and assigned for you.
	  var Model = Backbone.Model = function(attributes, options) {
	    var attrs = attributes || {};
	    options || (options = {});
	    this.cid = _.uniqueId(this.cidPrefix);
	    this.attributes = {};
	    if (options.collection) this.collection = options.collection;
	    if (options.parse) attrs = this.parse(attrs, options) || {};
	    var defaults = _.result(this, 'defaults');
	    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);
	    this.set(attrs, options);
	    this.changed = {};
	    this.initialize.apply(this, arguments);
	  };
	
	  // Attach all inheritable methods to the Model prototype.
	  _.extend(Model.prototype, Events, {
	
	    // A hash of attributes whose current and previous value differ.
	    changed: null,
	
	    // The value returned during the last failed validation.
	    validationError: null,
	
	    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
	    // CouchDB users may want to set this to `"_id"`.
	    idAttribute: 'id',
	
	    // The prefix is used to create the client id which is used to identify models locally.
	    // You may want to override this if you're experiencing name clashes with model ids.
	    cidPrefix: 'c',
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // Return a copy of the model's `attributes` object.
	    toJSON: function(options) {
	      return _.clone(this.attributes);
	    },
	
	    // Proxy `Backbone.sync` by default -- but override this if you need
	    // custom syncing semantics for *this* particular model.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },
	
	    // Get the value of an attribute.
	    get: function(attr) {
	      return this.attributes[attr];
	    },
	
	    // Get the HTML-escaped value of an attribute.
	    escape: function(attr) {
	      return _.escape(this.get(attr));
	    },
	
	    // Returns `true` if the attribute contains a value that is not null
	    // or undefined.
	    has: function(attr) {
	      return this.get(attr) != null;
	    },
	
	    // Special-cased proxy to underscore's `_.matches` method.
	    matches: function(attrs) {
	      return !!_.iteratee(attrs, this)(this.attributes);
	    },
	
	    // Set a hash of model attributes on the object, firing `"change"`. This is
	    // the core primitive operation of a model, updating the data and notifying
	    // anyone who needs to know about the change in state. The heart of the beast.
	    set: function(key, val, options) {
	      if (key == null) return this;
	
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      options || (options = {});
	
	      // Run validation.
	      if (!this._validate(attrs, options)) return false;
	
	      // Extract attributes and options.
	      var unset      = options.unset;
	      var silent     = options.silent;
	      var changes    = [];
	      var changing   = this._changing;
	      this._changing = true;
	
	      if (!changing) {
	        this._previousAttributes = _.clone(this.attributes);
	        this.changed = {};
	      }
	
	      var current = this.attributes;
	      var changed = this.changed;
	      var prev    = this._previousAttributes;
	
	      // For each `set` attribute, update or delete the current value.
	      for (var attr in attrs) {
	        val = attrs[attr];
	        if (!_.isEqual(current[attr], val)) changes.push(attr);
	        if (!_.isEqual(prev[attr], val)) {
	          changed[attr] = val;
	        } else {
	          delete changed[attr];
	        }
	        unset ? delete current[attr] : current[attr] = val;
	      }
	
	      // Update the `id`.
	      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);
	
	      // Trigger all relevant attribute changes.
	      if (!silent) {
	        if (changes.length) this._pending = options;
	        for (var i = 0; i < changes.length; i++) {
	          this.trigger('change:' + changes[i], this, current[changes[i]], options);
	        }
	      }
	
	      // You might be wondering why there's a `while` loop here. Changes can
	      // be recursively nested within `"change"` events.
	      if (changing) return this;
	      if (!silent) {
	        while (this._pending) {
	          options = this._pending;
	          this._pending = false;
	          this.trigger('change', this, options);
	        }
	      }
	      this._pending = false;
	      this._changing = false;
	      return this;
	    },
	
	    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
	    // if the attribute doesn't exist.
	    unset: function(attr, options) {
	      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
	    },
	
	    // Clear all attributes on the model, firing `"change"`.
	    clear: function(options) {
	      var attrs = {};
	      for (var key in this.attributes) attrs[key] = void 0;
	      return this.set(attrs, _.extend({}, options, {unset: true}));
	    },
	
	    // Determine if the model has changed since the last `"change"` event.
	    // If you specify an attribute name, determine if that attribute has changed.
	    hasChanged: function(attr) {
	      if (attr == null) return !_.isEmpty(this.changed);
	      return _.has(this.changed, attr);
	    },
	
	    // Return an object containing all the attributes that have changed, or
	    // false if there are no changed attributes. Useful for determining what
	    // parts of a view need to be updated and/or what attributes need to be
	    // persisted to the server. Unset attributes will be set to undefined.
	    // You can also pass an attributes object to diff against the model,
	    // determining if there *would be* a change.
	    changedAttributes: function(diff) {
	      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
	      var old = this._changing ? this._previousAttributes : this.attributes;
	      var changed = {};
	      for (var attr in diff) {
	        var val = diff[attr];
	        if (_.isEqual(old[attr], val)) continue;
	        changed[attr] = val;
	      }
	      return _.size(changed) ? changed : false;
	    },
	
	    // Get the previous value of an attribute, recorded at the time the last
	    // `"change"` event was fired.
	    previous: function(attr) {
	      if (attr == null || !this._previousAttributes) return null;
	      return this._previousAttributes[attr];
	    },
	
	    // Get all of the attributes of the model at the time of the previous
	    // `"change"` event.
	    previousAttributes: function() {
	      return _.clone(this._previousAttributes);
	    },
	
	    // Fetch the model from the server, merging the response with the model's
	    // local attributes. Any changed attributes will trigger a "change" event.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var model = this;
	      var success = options.success;
	      options.success = function(resp) {
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (!model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },
	
	    // Set a hash of model attributes, and sync the model to the server.
	    // If the server returns an attributes hash that differs, the model's
	    // state will be `set` again.
	    save: function(key, val, options) {
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (key == null || typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      options = _.extend({validate: true, parse: true}, options);
	      var wait = options.wait;
	
	      // If we're not waiting and attributes exist, save acts as
	      // `set(attr).save(null, opts)` with validation. Otherwise, check if
	      // the model will be valid when the attributes, if any, are set.
	      if (attrs && !wait) {
	        if (!this.set(attrs, options)) return false;
	      } else if (!this._validate(attrs, options)) {
	        return false;
	      }
	
	      // After a successful server-side save, the client is (optionally)
	      // updated with the server-side state.
	      var model = this;
	      var success = options.success;
	      var attributes = this.attributes;
	      options.success = function(resp) {
	        // Ensure attributes are restored during synchronous saves.
	        model.attributes = attributes;
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
	        if (serverAttrs && !model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	
	      // Set temporary attributes if `{wait: true}` to properly find new ids.
	      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);
	
	      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
	      if (method === 'patch' && !options.attrs) options.attrs = attrs;
	      var xhr = this.sync(method, this, options);
	
	      // Restore attributes.
	      this.attributes = attributes;
	
	      return xhr;
	    },
	
	    // Destroy this model on the server if it was already persisted.
	    // Optimistically removes the model from its collection, if it has one.
	    // If `wait: true` is passed, waits for the server to respond before removal.
	    destroy: function(options) {
	      options = options ? _.clone(options) : {};
	      var model = this;
	      var success = options.success;
	      var wait = options.wait;
	
	      var destroy = function() {
	        model.stopListening();
	        model.trigger('destroy', model, model.collection, options);
	      };
	
	      options.success = function(resp) {
	        if (wait) destroy();
	        if (success) success.call(options.context, model, resp, options);
	        if (!model.isNew()) model.trigger('sync', model, resp, options);
	      };
	
	      var xhr = false;
	      if (this.isNew()) {
	        _.defer(options.success);
	      } else {
	        wrapError(this, options);
	        xhr = this.sync('delete', this, options);
	      }
	      if (!wait) destroy();
	      return xhr;
	    },
	
	    // Default URL for the model's representation on the server -- if you're
	    // using Backbone's restful methods, override this to change the endpoint
	    // that will be called.
	    url: function() {
	      var base =
	        _.result(this, 'urlRoot') ||
	        _.result(this.collection, 'url') ||
	        urlError();
	      if (this.isNew()) return base;
	      var id = this.get(this.idAttribute);
	      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
	    },
	
	    // **parse** converts a response into the hash of attributes to be `set` on
	    // the model. The default implementation is just to pass the response along.
	    parse: function(resp, options) {
	      return resp;
	    },
	
	    // Create a new model with identical attributes to this one.
	    clone: function() {
	      return new this.constructor(this.attributes);
	    },
	
	    // A model is new if it has never been saved to the server, and lacks an id.
	    isNew: function() {
	      return !this.has(this.idAttribute);
	    },
	
	    // Check if the model is currently in a valid state.
	    isValid: function(options) {
	      return this._validate({}, _.extend({}, options, {validate: true}));
	    },
	
	    // Run validation against the next complete set of model attributes,
	    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
	    _validate: function(attrs, options) {
	      if (!options.validate || !this.validate) return true;
	      attrs = _.extend({}, this.attributes, attrs);
	      var error = this.validationError = this.validate(attrs, options) || null;
	      if (!error) return true;
	      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
	      return false;
	    }
	
	  });
	
	  // Underscore methods that we want to implement on the Model, mapped to the
	  // number of arguments they take.
	  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
	      omit: 0, chain: 1, isEmpty: 1};
	
	  // Mix in each Underscore method as a proxy to `Model#attributes`.
	  addUnderscoreMethods(Model, modelMethods, 'attributes');
	
	  // Backbone.Collection
	  // -------------------
	
	  // If models tend to represent a single row of data, a Backbone Collection is
	  // more analogous to a table full of data ... or a small slice or page of that
	  // table, or a collection of rows that belong together for a particular reason
	  // -- all of the messages in this particular folder, all of the documents
	  // belonging to this particular author, and so on. Collections maintain
	  // indexes of their models, both in order, and for lookup by `id`.
	
	  // Create a new **Collection**, perhaps to contain a specific type of `model`.
	  // If a `comparator` is specified, the Collection will maintain
	  // its models in sort order, as they're added and removed.
	  var Collection = Backbone.Collection = function(models, options) {
	    options || (options = {});
	    if (options.model) this.model = options.model;
	    if (options.comparator !== void 0) this.comparator = options.comparator;
	    this._reset();
	    this.initialize.apply(this, arguments);
	    if (models) this.reset(models, _.extend({silent: true}, options));
	  };
	
	  // Default options for `Collection#set`.
	  var setOptions = {add: true, remove: true, merge: true};
	  var addOptions = {add: true, remove: false};
	
	  // Splices `insert` into `array` at index `at`.
	  var splice = function(array, insert, at) {
	    at = Math.min(Math.max(at, 0), array.length);
	    var tail = Array(array.length - at);
	    var length = insert.length;
	    var i;
	    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];
	    for (i = 0; i < length; i++) array[i + at] = insert[i];
	    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
	  };
	
	  // Define the Collection's inheritable methods.
	  _.extend(Collection.prototype, Events, {
	
	    // The default model for a collection is just a **Backbone.Model**.
	    // This should be overridden in most cases.
	    model: Model,
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // The JSON representation of a Collection is an array of the
	    // models' attributes.
	    toJSON: function(options) {
	      return this.map(function(model) { return model.toJSON(options); });
	    },
	
	    // Proxy `Backbone.sync` by default.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },
	
	    // Add a model, or list of models to the set. `models` may be Backbone
	    // Models or raw JavaScript objects to be converted to Models, or any
	    // combination of the two.
	    add: function(models, options) {
	      return this.set(models, _.extend({merge: false}, options, addOptions));
	    },
	
	    // Remove a model, or a list of models from the set.
	    remove: function(models, options) {
	      options = _.extend({}, options);
	      var singular = !_.isArray(models);
	      models = singular ? [models] : models.slice();
	      var removed = this._removeModels(models, options);
	      if (!options.silent && removed.length) {
	        options.changes = {added: [], merged: [], removed: removed};
	        this.trigger('update', this, options);
	      }
	      return singular ? removed[0] : removed;
	    },
	
	    // Update a collection by `set`-ing a new list of models, adding new ones,
	    // removing models that are no longer present, and merging models that
	    // already exist in the collection, as necessary. Similar to **Model#set**,
	    // the core operation for updating the data contained by the collection.
	    set: function(models, options) {
	      if (models == null) return;
	
	      options = _.extend({}, setOptions, options);
	      if (options.parse && !this._isModel(models)) {
	        models = this.parse(models, options) || [];
	      }
	
	      var singular = !_.isArray(models);
	      models = singular ? [models] : models.slice();
	
	      var at = options.at;
	      if (at != null) at = +at;
	      if (at > this.length) at = this.length;
	      if (at < 0) at += this.length + 1;
	
	      var set = [];
	      var toAdd = [];
	      var toMerge = [];
	      var toRemove = [];
	      var modelMap = {};
	
	      var add = options.add;
	      var merge = options.merge;
	      var remove = options.remove;
	
	      var sort = false;
	      var sortable = this.comparator && at == null && options.sort !== false;
	      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
	
	      // Turn bare objects into model references, and prevent invalid models
	      // from being added.
	      var model, i;
	      for (i = 0; i < models.length; i++) {
	        model = models[i];
	
	        // If a duplicate is found, prevent it from being added and
	        // optionally merge it into the existing model.
	        var existing = this.get(model);
	        if (existing) {
	          if (merge && model !== existing) {
	            var attrs = this._isModel(model) ? model.attributes : model;
	            if (options.parse) attrs = existing.parse(attrs, options);
	            existing.set(attrs, options);
	            toMerge.push(existing);
	            if (sortable && !sort) sort = existing.hasChanged(sortAttr);
	          }
	          if (!modelMap[existing.cid]) {
	            modelMap[existing.cid] = true;
	            set.push(existing);
	          }
	          models[i] = existing;
	
	        // If this is a new, valid model, push it to the `toAdd` list.
	        } else if (add) {
	          model = models[i] = this._prepareModel(model, options);
	          if (model) {
	            toAdd.push(model);
	            this._addReference(model, options);
	            modelMap[model.cid] = true;
	            set.push(model);
	          }
	        }
	      }
	
	      // Remove stale models.
	      if (remove) {
	        for (i = 0; i < this.length; i++) {
	          model = this.models[i];
	          if (!modelMap[model.cid]) toRemove.push(model);
	        }
	        if (toRemove.length) this._removeModels(toRemove, options);
	      }
	
	      // See if sorting is needed, update `length` and splice in new models.
	      var orderChanged = false;
	      var replace = !sortable && add && remove;
	      if (set.length && replace) {
	        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {
	          return m !== set[index];
	        });
	        this.models.length = 0;
	        splice(this.models, set, 0);
	        this.length = this.models.length;
	      } else if (toAdd.length) {
	        if (sortable) sort = true;
	        splice(this.models, toAdd, at == null ? this.length : at);
	        this.length = this.models.length;
	      }
	
	      // Silently sort the collection if appropriate.
	      if (sort) this.sort({silent: true});
	
	      // Unless silenced, it's time to fire all appropriate add/sort/update events.
	      if (!options.silent) {
	        for (i = 0; i < toAdd.length; i++) {
	          if (at != null) options.index = at + i;
	          model = toAdd[i];
	          model.trigger('add', model, this, options);
	        }
	        if (sort || orderChanged) this.trigger('sort', this, options);
	        if (toAdd.length || toRemove.length || toMerge.length) {
	          options.changes = {
	            added: toAdd,
	            removed: toRemove,
	            merged: toMerge
	          };
	          this.trigger('update', this, options);
	        }
	      }
	
	      // Return the added (or merged) model (or models).
	      return singular ? models[0] : models;
	    },
	
	    // When you have more items than you want to add or remove individually,
	    // you can reset the entire set with a new list of models, without firing
	    // any granular `add` or `remove` events. Fires `reset` when finished.
	    // Useful for bulk operations and optimizations.
	    reset: function(models, options) {
	      options = options ? _.clone(options) : {};
	      for (var i = 0; i < this.models.length; i++) {
	        this._removeReference(this.models[i], options);
	      }
	      options.previousModels = this.models;
	      this._reset();
	      models = this.add(models, _.extend({silent: true}, options));
	      if (!options.silent) this.trigger('reset', this, options);
	      return models;
	    },
	
	    // Add a model to the end of the collection.
	    push: function(model, options) {
	      return this.add(model, _.extend({at: this.length}, options));
	    },
	
	    // Remove a model from the end of the collection.
	    pop: function(options) {
	      var model = this.at(this.length - 1);
	      return this.remove(model, options);
	    },
	
	    // Add a model to the beginning of the collection.
	    unshift: function(model, options) {
	      return this.add(model, _.extend({at: 0}, options));
	    },
	
	    // Remove a model from the beginning of the collection.
	    shift: function(options) {
	      var model = this.at(0);
	      return this.remove(model, options);
	    },
	
	    // Slice out a sub-array of models from the collection.
	    slice: function() {
	      return slice.apply(this.models, arguments);
	    },
	
	    // Get a model from the set by id, cid, model object with id or cid
	    // properties, or an attributes object that is transformed through modelId.
	    get: function(obj) {
	      if (obj == null) return void 0;
	      return this._byId[obj] ||
	        this._byId[this.modelId(obj.attributes || obj)] ||
	        obj.cid && this._byId[obj.cid];
	    },
	
	    // Returns `true` if the model is in the collection.
	    has: function(obj) {
	      return this.get(obj) != null;
	    },
	
	    // Get the model at the given index.
	    at: function(index) {
	      if (index < 0) index += this.length;
	      return this.models[index];
	    },
	
	    // Return models with matching attributes. Useful for simple cases of
	    // `filter`.
	    where: function(attrs, first) {
	      return this[first ? 'find' : 'filter'](attrs);
	    },
	
	    // Return the first model with matching attributes. Useful for simple cases
	    // of `find`.
	    findWhere: function(attrs) {
	      return this.where(attrs, true);
	    },
	
	    // Force the collection to re-sort itself. You don't need to call this under
	    // normal circumstances, as the set will maintain sort order as each item
	    // is added.
	    sort: function(options) {
	      var comparator = this.comparator;
	      if (!comparator) throw new Error('Cannot sort a set without a comparator');
	      options || (options = {});
	
	      var length = comparator.length;
	      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);
	
	      // Run sort based on type of `comparator`.
	      if (length === 1 || _.isString(comparator)) {
	        this.models = this.sortBy(comparator);
	      } else {
	        this.models.sort(comparator);
	      }
	      if (!options.silent) this.trigger('sort', this, options);
	      return this;
	    },
	
	    // Pluck an attribute from each model in the collection.
	    pluck: function(attr) {
	      return this.map(attr + '');
	    },
	
	    // Fetch the default set of models for this collection, resetting the
	    // collection when they arrive. If `reset: true` is passed, the response
	    // data will be passed through the `reset` method instead of `set`.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var success = options.success;
	      var collection = this;
	      options.success = function(resp) {
	        var method = options.reset ? 'reset' : 'set';
	        collection[method](resp, options);
	        if (success) success.call(options.context, collection, resp, options);
	        collection.trigger('sync', collection, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },
	
	    // Create a new instance of a model in this collection. Add the model to the
	    // collection immediately, unless `wait: true` is passed, in which case we
	    // wait for the server to agree.
	    create: function(model, options) {
	      options = options ? _.clone(options) : {};
	      var wait = options.wait;
	      model = this._prepareModel(model, options);
	      if (!model) return false;
	      if (!wait) this.add(model, options);
	      var collection = this;
	      var success = options.success;
	      options.success = function(m, resp, callbackOpts) {
	        if (wait) collection.add(m, callbackOpts);
	        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);
	      };
	      model.save(null, options);
	      return model;
	    },
	
	    // **parse** converts a response into a list of models to be added to the
	    // collection. The default implementation is just to pass it through.
	    parse: function(resp, options) {
	      return resp;
	    },
	
	    // Create a new collection with an identical list of models as this one.
	    clone: function() {
	      return new this.constructor(this.models, {
	        model: this.model,
	        comparator: this.comparator
	      });
	    },
	
	    // Define how to uniquely identify models in the collection.
	    modelId: function(attrs) {
	      return attrs[this.model.prototype.idAttribute || 'id'];
	    },
	
	    // Private method to reset all internal state. Called when the collection
	    // is first initialized or reset.
	    _reset: function() {
	      this.length = 0;
	      this.models = [];
	      this._byId  = {};
	    },
	
	    // Prepare a hash of attributes (or other model) to be added to this
	    // collection.
	    _prepareModel: function(attrs, options) {
	      if (this._isModel(attrs)) {
	        if (!attrs.collection) attrs.collection = this;
	        return attrs;
	      }
	      options = options ? _.clone(options) : {};
	      options.collection = this;
	      var model = new this.model(attrs, options);
	      if (!model.validationError) return model;
	      this.trigger('invalid', this, model.validationError, options);
	      return false;
	    },
	
	    // Internal method called by both remove and set.
	    _removeModels: function(models, options) {
	      var removed = [];
	      for (var i = 0; i < models.length; i++) {
	        var model = this.get(models[i]);
	        if (!model) continue;
	
	        var index = this.indexOf(model);
	        this.models.splice(index, 1);
	        this.length--;
	
	        // Remove references before triggering 'remove' event to prevent an
	        // infinite loop. #3693
	        delete this._byId[model.cid];
	        var id = this.modelId(model.attributes);
	        if (id != null) delete this._byId[id];
	
	        if (!options.silent) {
	          options.index = index;
	          model.trigger('remove', model, this, options);
	        }
	
	        removed.push(model);
	        this._removeReference(model, options);
	      }
	      return removed;
	    },
	
	    // Method for checking whether an object should be considered a model for
	    // the purposes of adding to the collection.
	    _isModel: function(model) {
	      return model instanceof Model;
	    },
	
	    // Internal method to create a model's ties to a collection.
	    _addReference: function(model, options) {
	      this._byId[model.cid] = model;
	      var id = this.modelId(model.attributes);
	      if (id != null) this._byId[id] = model;
	      model.on('all', this._onModelEvent, this);
	    },
	
	    // Internal method to sever a model's ties to a collection.
	    _removeReference: function(model, options) {
	      delete this._byId[model.cid];
	      var id = this.modelId(model.attributes);
	      if (id != null) delete this._byId[id];
	      if (this === model.collection) delete model.collection;
	      model.off('all', this._onModelEvent, this);
	    },
	
	    // Internal method called every time a model in the set fires an event.
	    // Sets need to update their indexes when models change ids. All other
	    // events simply proxy through. "add" and "remove" events that originate
	    // in other collections are ignored.
	    _onModelEvent: function(event, model, collection, options) {
	      if (model) {
	        if ((event === 'add' || event === 'remove') && collection !== this) return;
	        if (event === 'destroy') this.remove(model, options);
	        if (event === 'change') {
	          var prevId = this.modelId(model.previousAttributes());
	          var id = this.modelId(model.attributes);
	          if (prevId !== id) {
	            if (prevId != null) delete this._byId[prevId];
	            if (id != null) this._byId[id] = model;
	          }
	        }
	      }
	      this.trigger.apply(this, arguments);
	    }
	
	  });
	
	  // Underscore methods that we want to implement on the Collection.
	  // 90% of the core usefulness of Backbone Collections is actually implemented
	  // right here:
	  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,
	      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,
	      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,
	      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
	      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
	      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
	      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,
	      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};
	
	  // Mix in each Underscore method as a proxy to `Collection#models`.
	  addUnderscoreMethods(Collection, collectionMethods, 'models');
	
	  // Backbone.View
	  // -------------
	
	  // Backbone Views are almost more convention than they are actual code. A View
	  // is simply a JavaScript object that represents a logical chunk of UI in the
	  // DOM. This might be a single item, an entire list, a sidebar or panel, or
	  // even the surrounding frame which wraps your whole app. Defining a chunk of
	  // UI as a **View** allows you to define your DOM events declaratively, without
	  // having to worry about render order ... and makes it easy for the view to
	  // react to specific changes in the state of your models.
	
	  // Creating a Backbone.View creates its initial element outside of the DOM,
	  // if an existing element is not provided...
	  var View = Backbone.View = function(options) {
	    this.cid = _.uniqueId('view');
	    _.extend(this, _.pick(options, viewOptions));
	    this._ensureElement();
	    this.initialize.apply(this, arguments);
	  };
	
	  // Cached regex to split keys for `delegate`.
	  var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	
	  // List of view options to be set as properties.
	  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];
	
	  // Set up all inheritable **Backbone.View** properties and methods.
	  _.extend(View.prototype, Events, {
	
	    // The default `tagName` of a View's element is `"div"`.
	    tagName: 'div',
	
	    // jQuery delegate for element lookup, scoped to DOM elements within the
	    // current view. This should be preferred to global lookups where possible.
	    $: function(selector) {
	      return this.$el.find(selector);
	    },
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // **render** is the core function that your view should override, in order
	    // to populate its element (`this.el`), with the appropriate HTML. The
	    // convention is for **render** to always return `this`.
	    render: function() {
	      return this;
	    },
	
	    // Remove this view by taking the element out of the DOM, and removing any
	    // applicable Backbone.Events listeners.
	    remove: function() {
	      this._removeElement();
	      this.stopListening();
	      return this;
	    },
	
	    // Remove this view's element from the document and all event listeners
	    // attached to it. Exposed for subclasses using an alternative DOM
	    // manipulation API.
	    _removeElement: function() {
	      this.$el.remove();
	    },
	
	    // Change the view's element (`this.el` property) and re-delegate the
	    // view's events on the new element.
	    setElement: function(element) {
	      this.undelegateEvents();
	      this._setElement(element);
	      this.delegateEvents();
	      return this;
	    },
	
	    // Creates the `this.el` and `this.$el` references for this view using the
	    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
	    // context or an element. Subclasses can override this to utilize an
	    // alternative DOM manipulation API and are only required to set the
	    // `this.el` property.
	    _setElement: function(el) {
	      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
	      this.el = this.$el[0];
	    },
	
	    // Set callbacks, where `this.events` is a hash of
	    //
	    // *{"event selector": "callback"}*
	    //
	    //     {
	    //       'mousedown .title':  'edit',
	    //       'click .button':     'save',
	    //       'click .open':       function(e) { ... }
	    //     }
	    //
	    // pairs. Callbacks will be bound to the view, with `this` set properly.
	    // Uses event delegation for efficiency.
	    // Omitting the selector binds the event to `this.el`.
	    delegateEvents: function(events) {
	      events || (events = _.result(this, 'events'));
	      if (!events) return this;
	      this.undelegateEvents();
	      for (var key in events) {
	        var method = events[key];
	        if (!_.isFunction(method)) method = this[method];
	        if (!method) continue;
	        var match = key.match(delegateEventSplitter);
	        this.delegate(match[1], match[2], _.bind(method, this));
	      }
	      return this;
	    },
	
	    // Add a single event listener to the view's element (or a child element
	    // using `selector`). This only works for delegate-able events: not `focus`,
	    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
	    delegate: function(eventName, selector, listener) {
	      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },
	
	    // Clears all callbacks previously bound to the view by `delegateEvents`.
	    // You usually don't need to use this, but may wish to if you have multiple
	    // Backbone views attached to the same DOM element.
	    undelegateEvents: function() {
	      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
	      return this;
	    },
	
	    // A finer-grained `undelegateEvents` for removing a single delegated event.
	    // `selector` and `listener` are both optional.
	    undelegate: function(eventName, selector, listener) {
	      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },
	
	    // Produces a DOM element to be assigned to your view. Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _createElement: function(tagName) {
	      return document.createElement(tagName);
	    },
	
	    // Ensure that the View has a DOM element to render into.
	    // If `this.el` is a string, pass it through `$()`, take the first
	    // matching element, and re-assign it to `el`. Otherwise, create
	    // an element from the `id`, `className` and `tagName` properties.
	    _ensureElement: function() {
	      if (!this.el) {
	        var attrs = _.extend({}, _.result(this, 'attributes'));
	        if (this.id) attrs.id = _.result(this, 'id');
	        if (this.className) attrs['class'] = _.result(this, 'className');
	        this.setElement(this._createElement(_.result(this, 'tagName')));
	        this._setAttributes(attrs);
	      } else {
	        this.setElement(_.result(this, 'el'));
	      }
	    },
	
	    // Set attributes from a hash on this view's element.  Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _setAttributes: function(attributes) {
	      this.$el.attr(attributes);
	    }
	
	  });
	
	  // Backbone.sync
	  // -------------
	
	  // Override this function to change the manner in which Backbone persists
	  // models to the server. You will be passed the type of request, and the
	  // model in question. By default, makes a RESTful Ajax request
	  // to the model's `url()`. Some possible customizations could be:
	  //
	  // * Use `setTimeout` to batch rapid-fire updates into a single request.
	  // * Send up the models as XML instead of JSON.
	  // * Persist models via WebSockets instead of Ajax.
	  //
	  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
	  // as `POST`, with a `_method` parameter containing the true HTTP method,
	  // as well as all requests with the body as `application/x-www-form-urlencoded`
	  // instead of `application/json` with the model in a param named `model`.
	  // Useful when interfacing with server-side languages like **PHP** that make
	  // it difficult to read the body of `PUT` requests.
	  Backbone.sync = function(method, model, options) {
	    var type = methodMap[method];
	
	    // Default options, unless specified.
	    _.defaults(options || (options = {}), {
	      emulateHTTP: Backbone.emulateHTTP,
	      emulateJSON: Backbone.emulateJSON
	    });
	
	    // Default JSON-request options.
	    var params = {type: type, dataType: 'json'};
	
	    // Ensure that we have a URL.
	    if (!options.url) {
	      params.url = _.result(model, 'url') || urlError();
	    }
	
	    // Ensure that we have the appropriate request data.
	    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
	      params.contentType = 'application/json';
	      params.data = JSON.stringify(options.attrs || model.toJSON(options));
	    }
	
	    // For older servers, emulate JSON by encoding the request into an HTML-form.
	    if (options.emulateJSON) {
	      params.contentType = 'application/x-www-form-urlencoded';
	      params.data = params.data ? {model: params.data} : {};
	    }
	
	    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
	    // And an `X-HTTP-Method-Override` header.
	    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
	      params.type = 'POST';
	      if (options.emulateJSON) params.data._method = type;
	      var beforeSend = options.beforeSend;
	      options.beforeSend = function(xhr) {
	        xhr.setRequestHeader('X-HTTP-Method-Override', type);
	        if (beforeSend) return beforeSend.apply(this, arguments);
	      };
	    }
	
	    // Don't process data on a non-GET request.
	    if (params.type !== 'GET' && !options.emulateJSON) {
	      params.processData = false;
	    }
	
	    // Pass along `textStatus` and `errorThrown` from jQuery.
	    var error = options.error;
	    options.error = function(xhr, textStatus, errorThrown) {
	      options.textStatus = textStatus;
	      options.errorThrown = errorThrown;
	      if (error) error.call(options.context, xhr, textStatus, errorThrown);
	    };
	
	    // Make the request, allowing the user to override any Ajax options.
	    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
	    model.trigger('request', model, xhr, options);
	    return xhr;
	  };
	
	  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
	  var methodMap = {
	    'create': 'POST',
	    'update': 'PUT',
	    'patch': 'PATCH',
	    'delete': 'DELETE',
	    'read': 'GET'
	  };
	
	  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
	  // Override this if you'd like to use a different library.
	  Backbone.ajax = function() {
	    return Backbone.$.ajax.apply(Backbone.$, arguments);
	  };
	
	  // Backbone.Router
	  // ---------------
	
	  // Routers map faux-URLs to actions, and fire events when routes are
	  // matched. Creating a new one sets its `routes` hash, if not set statically.
	  var Router = Backbone.Router = function(options) {
	    options || (options = {});
	    if (options.routes) this.routes = options.routes;
	    this._bindRoutes();
	    this.initialize.apply(this, arguments);
	  };
	
	  // Cached regular expressions for matching named param parts and splatted
	  // parts of route strings.
	  var optionalParam = /\((.*?)\)/g;
	  var namedParam    = /(\(\?)?:\w+/g;
	  var splatParam    = /\*\w+/g;
	  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;
	
	  // Set up all inheritable **Backbone.Router** properties and methods.
	  _.extend(Router.prototype, Events, {
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // Manually bind a single named route to a callback. For example:
	    //
	    //     this.route('search/:query/p:num', 'search', function(query, num) {
	    //       ...
	    //     });
	    //
	    route: function(route, name, callback) {
	      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
	      if (_.isFunction(name)) {
	        callback = name;
	        name = '';
	      }
	      if (!callback) callback = this[name];
	      var router = this;
	      Backbone.history.route(route, function(fragment) {
	        var args = router._extractParameters(route, fragment);
	        if (router.execute(callback, args, name) !== false) {
	          router.trigger.apply(router, ['route:' + name].concat(args));
	          router.trigger('route', name, args);
	          Backbone.history.trigger('route', router, name, args);
	        }
	      });
	      return this;
	    },
	
	    // Execute a route handler with the provided parameters.  This is an
	    // excellent place to do pre-route setup or post-route cleanup.
	    execute: function(callback, args, name) {
	      if (callback) callback.apply(this, args);
	    },
	
	    // Simple proxy to `Backbone.history` to save a fragment into the history.
	    navigate: function(fragment, options) {
	      Backbone.history.navigate(fragment, options);
	      return this;
	    },
	
	    // Bind all defined routes to `Backbone.history`. We have to reverse the
	    // order of the routes here to support behavior where the most general
	    // routes can be defined at the bottom of the route map.
	    _bindRoutes: function() {
	      if (!this.routes) return;
	      this.routes = _.result(this, 'routes');
	      var route, routes = _.keys(this.routes);
	      while ((route = routes.pop()) != null) {
	        this.route(route, this.routes[route]);
	      }
	    },
	
	    // Convert a route string into a regular expression, suitable for matching
	    // against the current location hash.
	    _routeToRegExp: function(route) {
	      route = route.replace(escapeRegExp, '\\$&')
	                   .replace(optionalParam, '(?:$1)?')
	                   .replace(namedParam, function(match, optional) {
	                     return optional ? match : '([^/?]+)';
	                   })
	                   .replace(splatParam, '([^?]*?)');
	      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
	    },
	
	    // Given a route, and a URL fragment that it matches, return the array of
	    // extracted decoded parameters. Empty or unmatched parameters will be
	    // treated as `null` to normalize cross-browser behavior.
	    _extractParameters: function(route, fragment) {
	      var params = route.exec(fragment).slice(1);
	      return _.map(params, function(param, i) {
	        // Don't decode the search params.
	        if (i === params.length - 1) return param || null;
	        return param ? decodeURIComponent(param) : null;
	      });
	    }
	
	  });
	
	  // Backbone.History
	  // ----------------
	
	  // Handles cross-browser history management, based on either
	  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
	  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
	  // and URL fragments. If the browser supports neither (old IE, natch),
	  // falls back to polling.
	  var History = Backbone.History = function() {
	    this.handlers = [];
	    this.checkUrl = _.bind(this.checkUrl, this);
	
	    // Ensure that `History` can be used outside of the browser.
	    if (typeof window !== 'undefined') {
	      this.location = window.location;
	      this.history = window.history;
	    }
	  };
	
	  // Cached regex for stripping a leading hash/slash and trailing space.
	  var routeStripper = /^[#\/]|\s+$/g;
	
	  // Cached regex for stripping leading and trailing slashes.
	  var rootStripper = /^\/+|\/+$/g;
	
	  // Cached regex for stripping urls of hash.
	  var pathStripper = /#.*$/;
	
	  // Has the history handling already been started?
	  History.started = false;
	
	  // Set up all inheritable **Backbone.History** properties and methods.
	  _.extend(History.prototype, Events, {
	
	    // The default interval to poll for hash changes, if necessary, is
	    // twenty times a second.
	    interval: 50,
	
	    // Are we at the app root?
	    atRoot: function() {
	      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
	      return path === this.root && !this.getSearch();
	    },
	
	    // Does the pathname match the root?
	    matchRoot: function() {
	      var path = this.decodeFragment(this.location.pathname);
	      var rootPath = path.slice(0, this.root.length - 1) + '/';
	      return rootPath === this.root;
	    },
	
	    // Unicode characters in `location.pathname` are percent encoded so they're
	    // decoded for comparison. `%25` should not be decoded since it may be part
	    // of an encoded parameter.
	    decodeFragment: function(fragment) {
	      return decodeURI(fragment.replace(/%25/g, '%2525'));
	    },
	
	    // In IE6, the hash fragment and search params are incorrect if the
	    // fragment contains `?`.
	    getSearch: function() {
	      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
	      return match ? match[0] : '';
	    },
	
	    // Gets the true hash value. Cannot use location.hash directly due to bug
	    // in Firefox where location.hash will always be decoded.
	    getHash: function(window) {
	      var match = (window || this).location.href.match(/#(.*)$/);
	      return match ? match[1] : '';
	    },
	
	    // Get the pathname and search params, without the root.
	    getPath: function() {
	      var path = this.decodeFragment(
	        this.location.pathname + this.getSearch()
	      ).slice(this.root.length - 1);
	      return path.charAt(0) === '/' ? path.slice(1) : path;
	    },
	
	    // Get the cross-browser normalized URL fragment from the path or hash.
	    getFragment: function(fragment) {
	      if (fragment == null) {
	        if (this._usePushState || !this._wantsHashChange) {
	          fragment = this.getPath();
	        } else {
	          fragment = this.getHash();
	        }
	      }
	      return fragment.replace(routeStripper, '');
	    },
	
	    // Start the hash change handling, returning `true` if the current URL matches
	    // an existing route, and `false` otherwise.
	    start: function(options) {
	      if (History.started) throw new Error('Backbone.history has already been started');
	      History.started = true;
	
	      // Figure out the initial configuration. Do we need an iframe?
	      // Is pushState desired ... is it available?
	      this.options          = _.extend({root: '/'}, this.options, options);
	      this.root             = this.options.root;
	      this._wantsHashChange = this.options.hashChange !== false;
	      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);
	      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
	      this._wantsPushState  = !!this.options.pushState;
	      this._hasPushState    = !!(this.history && this.history.pushState);
	      this._usePushState    = this._wantsPushState && this._hasPushState;
	      this.fragment         = this.getFragment();
	
	      // Normalize root to always include a leading and trailing slash.
	      this.root = ('/' + this.root + '/').replace(rootStripper, '/');
	
	      // Transition from hashChange to pushState or vice versa if both are
	      // requested.
	      if (this._wantsHashChange && this._wantsPushState) {
	
	        // If we've started off with a route from a `pushState`-enabled
	        // browser, but we're currently in a browser that doesn't support it...
	        if (!this._hasPushState && !this.atRoot()) {
	          var rootPath = this.root.slice(0, -1) || '/';
	          this.location.replace(rootPath + '#' + this.getPath());
	          // Return immediately as browser will do redirect to new url
	          return true;
	
	        // Or if we've started out with a hash-based route, but we're currently
	        // in a browser where it could be `pushState`-based instead...
	        } else if (this._hasPushState && this.atRoot()) {
	          this.navigate(this.getHash(), {replace: true});
	        }
	
	      }
	
	      // Proxy an iframe to handle location events if the browser doesn't
	      // support the `hashchange` event, HTML5 history, or the user wants
	      // `hashChange` but not `pushState`.
	      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
	        this.iframe = document.createElement('iframe');
	        this.iframe.src = 'javascript:0';
	        this.iframe.style.display = 'none';
	        this.iframe.tabIndex = -1;
	        var body = document.body;
	        // Using `appendChild` will throw on IE < 9 if the document is not ready.
	        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
	        iWindow.document.open();
	        iWindow.document.close();
	        iWindow.location.hash = '#' + this.fragment;
	      }
	
	      // Add a cross-platform `addEventListener` shim for older browsers.
	      var addEventListener = window.addEventListener || function(eventName, listener) {
	        return attachEvent('on' + eventName, listener);
	      };
	
	      // Depending on whether we're using pushState or hashes, and whether
	      // 'onhashchange' is supported, determine how we check the URL state.
	      if (this._usePushState) {
	        addEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        addEventListener('hashchange', this.checkUrl, false);
	      } else if (this._wantsHashChange) {
	        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
	      }
	
	      if (!this.options.silent) return this.loadUrl();
	    },
	
	    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
	    // but possibly useful for unit testing Routers.
	    stop: function() {
	      // Add a cross-platform `removeEventListener` shim for older browsers.
	      var removeEventListener = window.removeEventListener || function(eventName, listener) {
	        return detachEvent('on' + eventName, listener);
	      };
	
	      // Remove window listeners.
	      if (this._usePushState) {
	        removeEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        removeEventListener('hashchange', this.checkUrl, false);
	      }
	
	      // Clean up the iframe if necessary.
	      if (this.iframe) {
	        document.body.removeChild(this.iframe);
	        this.iframe = null;
	      }
	
	      // Some environments will throw when clearing an undefined interval.
	      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
	      History.started = false;
	    },
	
	    // Add a route to be tested when the fragment changes. Routes added later
	    // may override previous routes.
	    route: function(route, callback) {
	      this.handlers.unshift({route: route, callback: callback});
	    },
	
	    // Checks the current URL to see if it has changed, and if it has,
	    // calls `loadUrl`, normalizing across the hidden iframe.
	    checkUrl: function(e) {
	      var current = this.getFragment();
	
	      // If the user pressed the back button, the iframe's hash will have
	      // changed and we should use that for comparison.
	      if (current === this.fragment && this.iframe) {
	        current = this.getHash(this.iframe.contentWindow);
	      }
	
	      if (current === this.fragment) return false;
	      if (this.iframe) this.navigate(current);
	      this.loadUrl();
	    },
	
	    // Attempt to load the current URL fragment. If a route succeeds with a
	    // match, returns `true`. If no defined routes matches the fragment,
	    // returns `false`.
	    loadUrl: function(fragment) {
	      // If the root doesn't match, no routes can match either.
	      if (!this.matchRoot()) return false;
	      fragment = this.fragment = this.getFragment(fragment);
	      return _.some(this.handlers, function(handler) {
	        if (handler.route.test(fragment)) {
	          handler.callback(fragment);
	          return true;
	        }
	      });
	    },
	
	    // Save a fragment into the hash history, or replace the URL state if the
	    // 'replace' option is passed. You are responsible for properly URL-encoding
	    // the fragment in advance.
	    //
	    // The options object can contain `trigger: true` if you wish to have the
	    // route callback be fired (not usually desirable), or `replace: true`, if
	    // you wish to modify the current URL without adding an entry to the history.
	    navigate: function(fragment, options) {
	      if (!History.started) return false;
	      if (!options || options === true) options = {trigger: !!options};
	
	      // Normalize the fragment.
	      fragment = this.getFragment(fragment || '');
	
	      // Don't include a trailing slash on the root.
	      var rootPath = this.root;
	      if (fragment === '' || fragment.charAt(0) === '?') {
	        rootPath = rootPath.slice(0, -1) || '/';
	      }
	      var url = rootPath + fragment;
	
	      // Strip the hash and decode for matching.
	      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));
	
	      if (this.fragment === fragment) return;
	      this.fragment = fragment;
	
	      // If pushState is available, we use it to set the fragment as a real URL.
	      if (this._usePushState) {
	        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);
	
	      // If hash changes haven't been explicitly disabled, update the hash
	      // fragment to store history.
	      } else if (this._wantsHashChange) {
	        this._updateHash(this.location, fragment, options.replace);
	        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
	          var iWindow = this.iframe.contentWindow;
	
	          // Opening and closing the iframe tricks IE7 and earlier to push a
	          // history entry on hash-tag change.  When replace is true, we don't
	          // want this.
	          if (!options.replace) {
	            iWindow.document.open();
	            iWindow.document.close();
	          }
	
	          this._updateHash(iWindow.location, fragment, options.replace);
	        }
	
	      // If you've told us that you explicitly don't want fallback hashchange-
	      // based history, then `navigate` becomes a page refresh.
	      } else {
	        return this.location.assign(url);
	      }
	      if (options.trigger) return this.loadUrl(fragment);
	    },
	
	    // Update the hash location, either replacing the current entry, or adding
	    // a new one to the browser history.
	    _updateHash: function(location, fragment, replace) {
	      if (replace) {
	        var href = location.href.replace(/(javascript:|#).*$/, '');
	        location.replace(href + '#' + fragment);
	      } else {
	        // Some browsers require that `hash` contains a leading #.
	        location.hash = '#' + fragment;
	      }
	    }
	
	  });
	
	  // Create the default Backbone.history.
	  Backbone.history = new History;
	
	  // Helpers
	  // -------
	
	  // Helper function to correctly set up the prototype chain for subclasses.
	  // Similar to `goog.inherits`, but uses a hash of prototype properties and
	  // class properties to be extended.
	  var extend = function(protoProps, staticProps) {
	    var parent = this;
	    var child;
	
	    // The constructor function for the new subclass is either defined by you
	    // (the "constructor" property in your `extend` definition), or defaulted
	    // by us to simply call the parent constructor.
	    if (protoProps && _.has(protoProps, 'constructor')) {
	      child = protoProps.constructor;
	    } else {
	      child = function(){ return parent.apply(this, arguments); };
	    }
	
	    // Add static properties to the constructor function, if supplied.
	    _.extend(child, parent, staticProps);
	
	    // Set the prototype chain to inherit from `parent`, without calling
	    // `parent`'s constructor function and add the prototype properties.
	    child.prototype = _.create(parent.prototype, protoProps);
	    child.prototype.constructor = child;
	
	    // Set a convenience property in case the parent's prototype is needed
	    // later.
	    child.__super__ = parent.prototype;
	
	    return child;
	  };
	
	  // Set up inheritance for the model, collection, router, view and history.
	  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
	
	  // Throw an error when a URL is needed, and none is supplied.
	  var urlError = function() {
	    throw new Error('A "url" property or function must be specified');
	  };
	
	  // Wrap an optional error callback with a fallback error event.
	  var wrapError = function(model, options) {
	    var error = options.error;
	    options.error = function(resp) {
	      if (error) error.call(options.context, model, resp, options);
	      model.trigger('error', model, resp, options);
	    };
	  };
	
	  return Backbone;
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.4",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Backbone.Wreqr (Backbone.Marionette)
	// ----------------------------------
	// v1.3.6
	//
	// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.
	// Distributed under MIT license
	//
	// http://github.com/marionettejs/backbone.wreqr
	
	
	(function(root, factory) {
	
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Backbone, _) {
	      return factory(Backbone, _);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== 'undefined') {
	    var Backbone = require('backbone');
	    var _ = require('underscore');
	    module.exports = factory(Backbone, _);
	  } else {
	    factory(root.Backbone, root._);
	  }
	
	}(this, function(Backbone, _) {
	  "use strict";
	
	  var previousWreqr = Backbone.Wreqr;
	
	  var Wreqr = Backbone.Wreqr = {};
	
	  Backbone.Wreqr.VERSION = '1.3.6';
	
	  Backbone.Wreqr.noConflict = function () {
	    Backbone.Wreqr = previousWreqr;
	    return this;
	  };
	
	  // Handlers
	  // --------
	  // A registry of functions to call, given a name
	  
	  Wreqr.Handlers = (function(Backbone, _){
	    "use strict";
	    
	    // Constructor
	    // -----------
	  
	    var Handlers = function(options){
	      this.options = options;
	      this._wreqrHandlers = {};
	      
	      if (_.isFunction(this.initialize)){
	        this.initialize(options);
	      }
	    };
	  
	    Handlers.extend = Backbone.Model.extend;
	  
	    // Instance Members
	    // ----------------
	  
	    _.extend(Handlers.prototype, Backbone.Events, {
	  
	      // Add multiple handlers using an object literal configuration
	      setHandlers: function(handlers){
	        _.each(handlers, function(handler, name){
	          var context = null;
	  
	          if (_.isObject(handler) && !_.isFunction(handler)){
	            context = handler.context;
	            handler = handler.callback;
	          }
	  
	          this.setHandler(name, handler, context);
	        }, this);
	      },
	  
	      // Add a handler for the given name, with an
	      // optional context to run the handler within
	      setHandler: function(name, handler, context){
	        var config = {
	          callback: handler,
	          context: context
	        };
	  
	        this._wreqrHandlers[name] = config;
	  
	        this.trigger("handler:add", name, handler, context);
	      },
	  
	      // Determine whether or not a handler is registered
	      hasHandler: function(name){
	        return !! this._wreqrHandlers[name];
	      },
	  
	      // Get the currently registered handler for
	      // the specified name. Throws an exception if
	      // no handler is found.
	      getHandler: function(name){
	        var config = this._wreqrHandlers[name];
	  
	        if (!config){
	          return;
	        }
	  
	        return function(){
	          return config.callback.apply(config.context, arguments);
	        };
	      },
	  
	      // Remove a handler for the specified name
	      removeHandler: function(name){
	        delete this._wreqrHandlers[name];
	      },
	  
	      // Remove all handlers from this registry
	      removeAllHandlers: function(){
	        this._wreqrHandlers = {};
	      }
	    });
	  
	    return Handlers;
	  })(Backbone, _);
	  
	  // Wreqr.CommandStorage
	  // --------------------
	  //
	  // Store and retrieve commands for execution.
	  Wreqr.CommandStorage = (function(){
	    "use strict";
	  
	    // Constructor function
	    var CommandStorage = function(options){
	      this.options = options;
	      this._commands = {};
	  
	      if (_.isFunction(this.initialize)){
	        this.initialize(options);
	      }
	    };
	  
	    // Instance methods
	    _.extend(CommandStorage.prototype, Backbone.Events, {
	  
	      // Get an object literal by command name, that contains
	      // the `commandName` and the `instances` of all commands
	      // represented as an array of arguments to process
	      getCommands: function(commandName){
	        var commands = this._commands[commandName];
	  
	        // we don't have it, so add it
	        if (!commands){
	  
	          // build the configuration
	          commands = {
	            command: commandName, 
	            instances: []
	          };
	  
	          // store it
	          this._commands[commandName] = commands;
	        }
	  
	        return commands;
	      },
	  
	      // Add a command by name, to the storage and store the
	      // args for the command
	      addCommand: function(commandName, args){
	        var command = this.getCommands(commandName);
	        command.instances.push(args);
	      },
	  
	      // Clear all commands for the given `commandName`
	      clearCommands: function(commandName){
	        var command = this.getCommands(commandName);
	        command.instances = [];
	      }
	    });
	  
	    return CommandStorage;
	  })();
	  
	  // Wreqr.Commands
	  // --------------
	  //
	  // A simple command pattern implementation. Register a command
	  // handler and execute it.
	  Wreqr.Commands = (function(Wreqr, _){
	    "use strict";
	  
	    return Wreqr.Handlers.extend({
	      // default storage type
	      storageType: Wreqr.CommandStorage,
	  
	      constructor: function(options){
	        this.options = options || {};
	  
	        this._initializeStorage(this.options);
	        this.on("handler:add", this._executeCommands, this);
	  
	        Wreqr.Handlers.prototype.constructor.apply(this, arguments);
	      },
	  
	      // Execute a named command with the supplied args
	      execute: function(name){
	        name = arguments[0];
	        var args = _.rest(arguments);
	  
	        if (this.hasHandler(name)){
	          this.getHandler(name).apply(this, args);
	        } else {
	          this.storage.addCommand(name, args);
	        }
	  
	      },
	  
	      // Internal method to handle bulk execution of stored commands
	      _executeCommands: function(name, handler, context){
	        var command = this.storage.getCommands(name);
	  
	        // loop through and execute all the stored command instances
	        _.each(command.instances, function(args){
	          handler.apply(context, args);
	        });
	  
	        this.storage.clearCommands(name);
	      },
	  
	      // Internal method to initialize storage either from the type's
	      // `storageType` or the instance `options.storageType`.
	      _initializeStorage: function(options){
	        var storage;
	  
	        var StorageType = options.storageType || this.storageType;
	        if (_.isFunction(StorageType)){
	          storage = new StorageType();
	        } else {
	          storage = StorageType;
	        }
	  
	        this.storage = storage;
	      }
	    });
	  
	  })(Wreqr, _);
	  
	  // Wreqr.RequestResponse
	  // ---------------------
	  //
	  // A simple request/response implementation. Register a
	  // request handler, and return a response from it
	  Wreqr.RequestResponse = (function(Wreqr, _){
	    "use strict";
	  
	    return Wreqr.Handlers.extend({
	      request: function(name){
	        if (this.hasHandler(name)) {
	          return this.getHandler(name).apply(this, _.rest(arguments));
	        }
	      }
	    });
	  
	  })(Wreqr, _);
	  
	  // Event Aggregator
	  // ----------------
	  // A pub-sub object that can be used to decouple various parts
	  // of an application through event-driven architecture.
	  
	  Wreqr.EventAggregator = (function(Backbone, _){
	    "use strict";
	    var EA = function(){};
	  
	    // Copy the `extend` function used by Backbone's classes
	    EA.extend = Backbone.Model.extend;
	  
	    // Copy the basic Backbone.Events on to the event aggregator
	    _.extend(EA.prototype, Backbone.Events);
	  
	    return EA;
	  })(Backbone, _);
	  
	  // Wreqr.Channel
	  // --------------
	  //
	  // An object that wraps the three messaging systems:
	  // EventAggregator, RequestResponse, Commands
	  Wreqr.Channel = (function(Wreqr){
	    "use strict";
	  
	    var Channel = function(channelName) {
	      this.vent        = new Backbone.Wreqr.EventAggregator();
	      this.reqres      = new Backbone.Wreqr.RequestResponse();
	      this.commands    = new Backbone.Wreqr.Commands();
	      this.channelName = channelName;
	    };
	  
	    _.extend(Channel.prototype, {
	  
	      // Remove all handlers from the messaging systems of this channel
	      reset: function() {
	        this.vent.off();
	        this.vent.stopListening();
	        this.reqres.removeAllHandlers();
	        this.commands.removeAllHandlers();
	        return this;
	      },
	  
	      // Connect a hash of events; one for each messaging system
	      connectEvents: function(hash, context) {
	        this._connect('vent', hash, context);
	        return this;
	      },
	  
	      connectCommands: function(hash, context) {
	        this._connect('commands', hash, context);
	        return this;
	      },
	  
	      connectRequests: function(hash, context) {
	        this._connect('reqres', hash, context);
	        return this;
	      },
	  
	      // Attach the handlers to a given message system `type`
	      _connect: function(type, hash, context) {
	        if (!hash) {
	          return;
	        }
	  
	        context = context || this;
	        var method = (type === 'vent') ? 'on' : 'setHandler';
	  
	        _.each(hash, function(fn, eventName) {
	          this[type][method](eventName, _.bind(fn, context));
	        }, this);
	      }
	    });
	  
	  
	    return Channel;
	  })(Wreqr);
	  
	  // Wreqr.Radio
	  // --------------
	  //
	  // An object that lets you communicate with many channels.
	  Wreqr.radio = (function(Wreqr, _){
	    "use strict";
	  
	    var Radio = function() {
	      this._channels = {};
	      this.vent = {};
	      this.commands = {};
	      this.reqres = {};
	      this._proxyMethods();
	    };
	  
	    _.extend(Radio.prototype, {
	  
	      channel: function(channelName) {
	        if (!channelName) {
	          throw new Error('Channel must receive a name');
	        }
	  
	        return this._getChannel( channelName );
	      },
	  
	      _getChannel: function(channelName) {
	        var channel = this._channels[channelName];
	  
	        if(!channel) {
	          channel = new Wreqr.Channel(channelName);
	          this._channels[channelName] = channel;
	        }
	  
	        return channel;
	      },
	  
	      _proxyMethods: function() {
	        _.each(['vent', 'commands', 'reqres'], function(system) {
	          _.each( messageSystems[system], function(method) {
	            this[system][method] = proxyMethod(this, system, method);
	          }, this);
	        }, this);
	      }
	    });
	  
	  
	    var messageSystems = {
	      vent: [
	        'on',
	        'off',
	        'trigger',
	        'once',
	        'stopListening',
	        'listenTo',
	        'listenToOnce'
	      ],
	  
	      commands: [
	        'execute',
	        'setHandler',
	        'setHandlers',
	        'removeHandler',
	        'removeAllHandlers'
	      ],
	  
	      reqres: [
	        'request',
	        'setHandler',
	        'setHandlers',
	        'removeHandler',
	        'removeAllHandlers'
	      ]
	    };
	  
	    var proxyMethod = function(radio, system, method) {
	      return function(channelName) {
	        var messageSystem = radio._getChannel(channelName)[system];
	  
	        return messageSystem[method].apply(messageSystem, _.rest(arguments));
	      };
	    };
	  
	    return new Radio();
	  
	  })(Wreqr, _);
	  
	
	  return Backbone.Wreqr;
	
	}));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Backbone.BabySitter
	// -------------------
	// v0.1.11
	//
	// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.
	// Distributed under MIT license
	//
	// http://github.com/marionettejs/backbone.babysitter
	
	(function(root, factory) {
	
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Backbone, _) {
	      return factory(Backbone, _);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== 'undefined') {
	    var Backbone = require('backbone');
	    var _ = require('underscore');
	    module.exports = factory(Backbone, _);
	  } else {
	    factory(root.Backbone, root._);
	  }
	
	}(this, function(Backbone, _) {
	  'use strict';
	
	  var previousChildViewContainer = Backbone.ChildViewContainer;
	
	  // BabySitter.ChildViewContainer
	  // -----------------------------
	  //
	  // Provide a container to store, retrieve and
	  // shut down child views.
	  
	  Backbone.ChildViewContainer = (function (Backbone, _) {
	  
	    // Container Constructor
	    // ---------------------
	  
	    var Container = function(views){
	      this._views = {};
	      this._indexByModel = {};
	      this._indexByCustom = {};
	      this._updateLength();
	  
	      _.each(views, this.add, this);
	    };
	  
	    // Container Methods
	    // -----------------
	  
	    _.extend(Container.prototype, {
	  
	      // Add a view to this container. Stores the view
	      // by `cid` and makes it searchable by the model
	      // cid (and model itself). Optionally specify
	      // a custom key to store an retrieve the view.
	      add: function(view, customIndex){
	        var viewCid = view.cid;
	  
	        // store the view
	        this._views[viewCid] = view;
	  
	        // index it by model
	        if (view.model){
	          this._indexByModel[view.model.cid] = viewCid;
	        }
	  
	        // index by custom
	        if (customIndex){
	          this._indexByCustom[customIndex] = viewCid;
	        }
	  
	        this._updateLength();
	        return this;
	      },
	  
	      // Find a view by the model that was attached to
	      // it. Uses the model's `cid` to find it.
	      findByModel: function(model){
	        return this.findByModelCid(model.cid);
	      },
	  
	      // Find a view by the `cid` of the model that was attached to
	      // it. Uses the model's `cid` to find the view `cid` and
	      // retrieve the view using it.
	      findByModelCid: function(modelCid){
	        var viewCid = this._indexByModel[modelCid];
	        return this.findByCid(viewCid);
	      },
	  
	      // Find a view by a custom indexer.
	      findByCustom: function(index){
	        var viewCid = this._indexByCustom[index];
	        return this.findByCid(viewCid);
	      },
	  
	      // Find by index. This is not guaranteed to be a
	      // stable index.
	      findByIndex: function(index){
	        return _.values(this._views)[index];
	      },
	  
	      // retrieve a view by its `cid` directly
	      findByCid: function(cid){
	        return this._views[cid];
	      },
	  
	      // Remove a view
	      remove: function(view){
	        var viewCid = view.cid;
	  
	        // delete model index
	        if (view.model){
	          delete this._indexByModel[view.model.cid];
	        }
	  
	        // delete custom index
	        _.any(this._indexByCustom, function(cid, key) {
	          if (cid === viewCid) {
	            delete this._indexByCustom[key];
	            return true;
	          }
	        }, this);
	  
	        // remove the view from the container
	        delete this._views[viewCid];
	  
	        // update the length
	        this._updateLength();
	        return this;
	      },
	  
	      // Call a method on every view in the container,
	      // passing parameters to the call method one at a
	      // time, like `function.call`.
	      call: function(method){
	        this.apply(method, _.tail(arguments));
	      },
	  
	      // Apply a method on every view in the container,
	      // passing parameters to the call method one at a
	      // time, like `function.apply`.
	      apply: function(method, args){
	        _.each(this._views, function(view){
	          if (_.isFunction(view[method])){
	            view[method].apply(view, args || []);
	          }
	        });
	      },
	  
	      // Update the `.length` attribute on this container
	      _updateLength: function(){
	        this.length = _.size(this._views);
	      }
	    });
	  
	    // Borrowing this code from Backbone.Collection:
	    // http://backbonejs.org/docs/backbone.html#section-106
	    //
	    // Mix in methods from Underscore, for iteration, and other
	    // collection related features.
	    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
	      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
	      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
	      'last', 'without', 'isEmpty', 'pluck', 'reduce'];
	  
	    _.each(methods, function(method) {
	      Container.prototype[method] = function() {
	        var views = _.values(this._views);
	        var args = [views].concat(_.toArray(arguments));
	        return _[method].apply(_, args);
	      };
	    });
	  
	    // return the public API
	    return Container;
	  })(Backbone, _);
	  
	
	  Backbone.ChildViewContainer.VERSION = '0.1.11';
	
	  Backbone.ChildViewContainer.noConflict = function () {
	    Backbone.ChildViewContainer = previousChildViewContainer;
	    return this;
	  };
	
	  return Backbone.ChildViewContainer;
	
	}));


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.last20GamesCollection = exports.opponent = exports.addUrlQueryParam = exports.parseUrl = exports.storageModel = exports.blackListCollection = exports.friendCollection = exports.userGameCollection = exports.topicCollection = exports.user = exports.emailRegexp = exports.api = exports.ValidateModel = undefined;
	
	var _serverAPI = __webpack_require__(11);
	
	var serverApi = _interopRequireDefault(_serverAPI).default;
	
	var _validateModel = __webpack_require__(27);
	
	var validateModel = _interopRequireDefault(_validateModel).default;
	
	var _userModel = __webpack_require__(28);
	
	var UserModel = _interopRequireDefault(_userModel).default;
	
	var _topicCollection = __webpack_require__(32);
	
	var TopicCollection = _interopRequireDefault(_topicCollection).default;
	
	var _userGameCollection = __webpack_require__(34);
	
	var UserGameCollection = _interopRequireDefault(_userGameCollection).default;
	
	var _storageModel = __webpack_require__(60);
	
	var StorageModel = _interopRequireDefault(_storageModel).default;
	
	var _friendCollection = __webpack_require__(61);
	
	var FriendCollection = _interopRequireDefault(_friendCollection).default;
	
	var _blackListCollection = __webpack_require__(63);
	
	var BlackListCollection = _interopRequireDefault(_blackListCollection).default;
	
	var _opponentModel = __webpack_require__(64);
	
	var OpponentModel = _interopRequireDefault(_opponentModel).default;
	
	var _last20GamesCollection = __webpack_require__(65);
	
	var Last20GamesCollection = _interopRequireDefault(_last20GamesCollection).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ValidateModel = exports.ValidateModel = validateModel;
	var api = exports.api = serverApi;
	var emailRegexp = exports.emailRegexp = /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;
	var user = exports.user = new UserModel();
	var topicCollection = exports.topicCollection = new TopicCollection();
	var userGameCollection = exports.userGameCollection = new UserGameCollection();
	var friendCollection = exports.friendCollection = new FriendCollection();
	var blackListCollection = exports.blackListCollection = new BlackListCollection();
	var storageModel = exports.storageModel = new StorageModel();
	var parseUrl = exports.parseUrl = function parseUrl() {
	    var parseUrl_result = {};
	    var parseUrl_url = decodeURI(window.location.href);
	    var parseUrl_paramsStr = parseUrl_url.split('?')[1];
	    if (typeof parseUrl_paramsStr != 'undefined') {
	        var parseUrl_params = parseUrl_paramsStr.split('&');
	        var nameVal = '';
	        for (var i = 0; i < parseUrl_params.length; i++) {
	            nameVal = parseUrl_params[i].split('=');
	            if (nameVal.length == 2) {
	                parseUrl_result[nameVal[0]] = nameVal[1];
	            }
	        }
	    }
	    return parseUrl_result;
	};
	var addUrlQueryParam = exports.addUrlQueryParam = function addUrlQueryParam(url, name, value) {
	    var re = new RegExp("([?&]" + name + "=)[^&]+", "");
	    function add(sep) {
	        url += sep + name + "=" + encodeURIComponent(value);
	    }
	    function change() {
	        url = url.replace(re, "$1" + encodeURIComponent(value));
	    }
	    if (url.indexOf("?") === -1) {
	        add("?");
	    } else {
	        if (re.test(url)) {
	            change();
	        } else {
	            add("&");
	        }
	    }
	    return url;
	};
	var opponent = exports.opponent = new OpponentModel();
	var last20GamesCollection = exports.last20GamesCollection = new Last20GamesCollection();

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _infoModal = __webpack_require__(12);
	
	var InfoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var serverURL = 'https://pdd.demetra.media/server.php';
	
	
	function ajaxController(data) {
	    var async = $.Deferred();
	    if (!data.v_android) {
	        data.v_android = 9;
	    }
	    if (common.user.get('auth')) {
	        data[common.user.getSessionKey()] = common.user.getSessionValue();
	    }
	    if (common.storageModel.get('authDeviceId')) {
	        data.auth_device_id = common.storageModel.get('authDeviceId');
	    }
	    if (common.storageModel.get('androidDeviceId')) {
	        data.android_device_id = common.storageModel.get('androidDeviceId');
	    }
	    if (common.storageModel.get('iosDeviceId')) {
	        data.ios_device_id = common.storageModel.get('iosDeviceId');
	    }
	
	    if (common.user.get('socialAuth')) {
	        if (common.user.get('socialAuth') === 'vk') {
	            data['vk_user_id'] = common.user.get('vkId');
	            data['access_token'] = common.user.get('vkToken');
	            data['from'] = 'vk';
	        } else if (common.user.get('socialAuth') === 'fb') {
	            data['fb_user_id'] = common.user.get('fbId');
	            data['access_token'] = common.user.get('fbToken');
	            data['from'] = 'fb';
	        }
	    }
	    $.ajax({
	        url: serverURL,
	        dataType: 'jsonp',
	        data: data
	    }).done(function (data) {
	        if (data.answer_type == 'err') {
	            if (data.answer && data.answer.error_code == '10001' && common.user.get('auth')) {
	                common.user.logout();
	                new InfoModal({ message: 'Вы залогинились с другого устройства' }).showModal();
	            } else {
	                async.reject({
	                    code: data.answer.error_code,
	                    text: data.answer.error_text
	                });
	            }
	            return;
	        }
	        async.resolve(data);
	    }).fail(function (data) {
	        async.reject({
	            code: 500,
	            text: 'Что то пошло не так'
	        });
	    });
	    return async.promise();
	}
	
	exports.default = {
	
	    auth: {
	        registration: function registration(login, email, password) {
	            return ajaxController({
	                action: 'reg_user',
	                email: email,
	                login: login,
	                password: password
	            });
	        },
	        signIn: function signIn(login, password) {
	            return ajaxController({
	                action: 'get_user_info',
	                login: login,
	                password: password
	            });
	        },
	        signInGuest: function signInGuest() {
	            return ajaxController({
	                action: 'reg_guest'
	            });
	        },
	        restorePassword: function restorePassword(email) {
	            return ajaxController({
	                action: 'password_recovery',
	                email: email
	            });
	        },
	        logout: function logout() {
	            return ajaxController({
	                action: 'logout'
	            });
	        }
	    },
	
	    blackList: {
	        add: function add(id) {
	            return ajaxController({
	                action: 'add_to_black_list',
	                user_id: id
	            });
	        },
	        remove: function remove(id) {
	            return ajaxController({
	                action: 'del_from_black_list',
	                user_id: id
	            });
	        },
	        get: function get() {
	            return ajaxController({
	                action: 'get_black_list'
	            });
	        }
	    },
	    friend: {
	        get: function get() {
	            return ajaxController({
	                action: 'get_friends'
	            });
	        },
	        remove: function remove(friendId) {
	            return ajaxController({
	                action: 'del_friend',
	                user_id: friendId
	            });
	        },
	        add: function add(userId) {
	            return ajaxController({
	                action: 'add_friend',
	                user_id: userId
	            });
	        }
	    },
	
	    room: {
	        result: function result(rooms) {
	            return ajaxController({
	                action: 'get_room_results',
	                rooms: rooms
	            });
	        },
	        question_history: function question_history(room_id, round_id, question_id) {
	            return ajaxController({
	                action: 'get_question_history',
	                room_id: room_id,
	                round_id: round_id,
	                question_id: question_id
	            });
	        }
	    },
	
	    user: {
	        change: function change(data) {
	            data.action = 'change_user_info';
	            return ajaxController(data);
	        },
	        getDataById: function getDataById(id) {
	            return ajaxController({
	                action: 'get_user_stat',
	                user_id: id
	            });
	        },
	        setAvatar: function setAvatar(avatarId) {
	            return ajaxController({
	                action: 'change_ava',
	                ava_file: avatarId
	            });
	        }
	    },
	    game: {
	        answerFight: function answerFight(roomId, answer) {
	            return ajaxController({
	                action: 'call_to_fight',
	                room_id: roomId,
	                fight: answer
	            });
	        }
	    },
	
	    signInVk: function signInVk(name, surname) {
	        return ajaxController({
	            action: 'get_user_info',
	            name: name,
	            surname: surname
	        });
	    },
	    signInFb: function signInFb(name, surname) {
	        return ajaxController({
	            action: 'get_user_info',
	            name: name,
	            surname: surname
	        });
	    },
	    getUserGames: function getUserGames() {
	        return ajaxController({
	            action: 'get_user_games'
	        });
	    },
	    getUserInfo: function getUserInfo() {
	        return ajaxController({
	            action: 'get_user_info'
	        });
	    },
	    getUsersByLogin: function getUsersByLogin(login, page) {
	        return ajaxController({
	            action: 'get_app_users_by_str',
	            login: login,
	            page: page
	        });
	    },
	    checkRandomGame: function checkRandomGame() {
	        return ajaxController({
	            action: 'start_game'
	        });
	    },
	    createRandomRoom: function createRandomRoom(topicId) {
	        return ajaxController({
	            action: 'create_room',
	            topic_id: topicId
	        });
	    },
	    createOpponentRoom: function createOpponentRoom(topicId, rivalId, roomId) {
	        var data = {
	            action: 'create_room',
	            opponent_user_id: rivalId
	        };
	        if (topicId) {
	            data.topic_id = topicId;
	        }
	        if (roomId) {
	            data.room_id = roomId;
	        }
	        return ajaxController(data);
	    },
	    startGameById: function startGameById(opponentId, roomId) {
	        var data = {
	            action: 'start_game',
	            opponent_user_id: opponentId
	        };
	        if (roomId) {
	            data.room_id = roomId;
	        }
	        return ajaxController(data);
	    },
	    getInfoByRoom: function getInfoByRoom(roomId) {
	        return ajaxController({
	            action: 'get_info_by_room',
	            room_id: roomId
	        });
	    },
	    getQuestionsByRoom: function getQuestionsByRoom(roomId) {
	        return ajaxController({
	            action: 'get_questions_by_room',
	            room_id: roomId
	        });
	    },
	    startNewRound: function startNewRound(roomId, topicId) {
	        return ajaxController({
	            action: 'get_questions_by_room',
	            room_id: roomId,
	            topic_id: topicId
	        });
	    },
	    sendAnswers: function sendAnswers(roomId, roundId, answers) {
	        return ajaxController({
	            action: 'set_answers',
	            room_id: roomId,
	            round_id: roundId,
	            answers: answers
	        });
	    },
	    getRoomsStatus: function getRoomsStatus(rooms) {
	        return ajaxController({
	            action: 'get_rooms_status',
	            rooms: rooms
	        });
	    },
	    hideRooms: function hideRooms(rooms) {
	        return ajaxController({
	            action: 'hide_room',
	            room_id: rooms
	        });
	    },
	    getLast20Games: function getLast20Games() {
	        return ajaxController({
	            action: 'get_history_friends'
	        });
	    },
	    surrenderGame: function surrenderGame(roomId) {
	        return ajaxController({
	            action: 'end_game',
	            room_id: roomId
	        });
	    },
	    blockTopic: function blockTopic(topicId) {
	        return ajaxController({
	            action: 'block_topic',
	            topic_id: topicId
	        });
	    },
	    unblockTopic: function unblockTopic(topicId) {
	        return ajaxController({
	            action: 'unblock_topic',
	            topic_id: topicId
	        });
	    },
	    getTopPlayer: function getTopPlayer() {
	        return ajaxController({
	            action: 'get_free_top'
	        });
	    },
	    getTopPlayerPaid: function getTopPlayerPaid() {
	        return ajaxController({
	            action: 'get_paid_top'
	        });
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(10)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _infoModal = __webpack_require__(22);
	
	var template = _interopRequireDefault(_infoModal).default;
	
	__webpack_require__(25);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Modal.extend({
	  template: template,
	  className: 'info-modal',
	
	  initialize: function initialize() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    this.options = options;
	  },
	  serializeData: function serializeData() {
	    return { message: this.options.message };
	  },
	
	
	  ui: {
	    'buttonOk': '[data-js-ok]'
	  },
	
	  events: {
	    'click @ui.buttonOk': 'onClickOk'
	  },
	
	  onClickOk: function onClickOk() {
	    this.ok();
	  }
	});

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, $, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(16);
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    showModal: function showModal() {
	        var _this = this;
	
	        var modal = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	        $(':focus').blur();
	        if (!modal) {
	            this.$el.click(function (e) {
	                if ($(e.target).hasClass('table-middle-cell') || $(e.target).is('[data-js-close]')) {
	                    _this.cancel();
	                }
	            });
	        }
	        common.modalOpen = this;
	        return this.showAsync = common.appController.showModal(this);
	    },
	    ok: function ok(data) {
	        common.modalOpen = null;
	        if (!this.showAsync) {
	            throw new Error('Modal not show');
	        }
	        this.showAsync.resolve(data);
	    },
	    cancel: function cancel(data) {
	        common.modalOpen = null;
	        if (!this.showAsync) {
	            throw new Error('Modal not show');
	        }
	        this.showAsync.reject(data);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(7), __webpack_require__(10)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, Marionette) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CompositeView = exports.CollectionView = exports.LayoutView = exports.View = undefined;
	
	var _backbone = __webpack_require__(15);
	
	var Epoxy = _interopRequireDefault(_backbone).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var epoxyMethods = {
	    epoxify: function epoxify() {
	        var _this = this;
	
	        Epoxy.View.mixin(this);
	        var binding = {};
	        this.bindings = _.each(this.bindings, function (value, key) {
	            var keyUi = key.split('@ui.');
	            if (keyUi[1]) {
	                binding[_this.ui[keyUi[1]]] = value;
	                return;
	            }
	            binding[key] = value;
	        });
	        this.bindings = binding;
	        this.listenTo(this, "ui:bind", this.applyBindings);
	        this.listenTo(this, "before:close", this.removeBindings);
	    },
	    // Override Marionette's impl so we can trigger our own event
	    bindUIElements: function bindUIElements() {
	        this.trigger("ui:bind");
	        Marionette.View.prototype.bindUIElements.apply(this, arguments);
	    }
	};
	
	var View = exports.View = Marionette.ItemView.extend(epoxyMethods);
	var LayoutView = exports.LayoutView = Marionette.LayoutView.extend(epoxyMethods);
	var CollectionView = exports.CollectionView = Marionette.CollectionView.extend(epoxyMethods);
	var CompositeView = exports.CompositeView = Marionette.CompositeView.extend(epoxyMethods);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	// Backbone.Epoxy
	
	// (c) 2015 Greg MacWilliam
	// Freely distributed under the MIT license
	// For usage and documentation:
	// http://epoxyjs.org
	
	(function(root, factory) {
	
	  if (true) {
	    // Define as CommonJS export:
	    module.exports = factory(__webpack_require__(6), __webpack_require__(5));
	  } else if (typeof define === 'function' && define.amd) {
	    // Define as AMD:
	    define(["underscore", "backbone"], factory);
	  } else {
	    // Just run it:
	    factory(root._, root.Backbone);
	  }
	
	}(this, function(_, Backbone) {
	
	  // Epoxy namespace:
	  var Epoxy = Backbone.Epoxy = {};
	
	  // Object-type utils:
	  var array = Array.prototype;
	  var isUndefined = _.isUndefined;
	  var isFunction = _.isFunction;
	  var isObject = _.isObject;
	  var isArray = _.isArray;
	  var isModel = function(obj) { return obj instanceof Backbone.Model; };
	  var isCollection = function(obj) { return obj instanceof Backbone.Collection; };
	  var blankMethod = function() {};
	
	  // Static mixins API:
	  // added as a static member to Epoxy class objects (Model & View);
	  // generates a set of class attributes for mixin with other objects.
	  var mixins = {
	    mixin: function(extend) {
	      extend = extend || {};
	
	      for (var i in this.prototype) {
	        // Skip override on pre-defined binding declarations:
	        if (i === 'bindings' && extend.bindings) continue;
	
	        // Assimilate non-constructor Epoxy prototype properties onto extended object:
	        if (this.prototype.hasOwnProperty(i) && i !== 'constructor') {
	          extend[i] = this.prototype[i];
	        }
	      }
	      return extend;
	    }
	  };
	
	  // Calls method implementations of a super-class object:
	  function _super(instance, method, args) {
	    return instance._super.prototype[method].apply(instance, args);
	  }
	
	  // Epoxy.Model
	  // -----------
	  var modelMap;
	  var modelProps = ['computeds'];
	
	  Epoxy.Model = Backbone.Model.extend({
	    _super: Backbone.Model,
	
	    // Backbone.Model constructor override:
	    // configures computed model attributes around the underlying native Backbone model.
	    constructor: function(attributes, options) {
	      _.extend(this, _.pick(options||{}, modelProps));
	      _super(this, 'constructor', arguments);
	      this.initComputeds(this.attributes, options);
	    },
	
	    // Gets a copy of a model attribute value:
	    // Array and Object values will return a shallow copy,
	    // primitive values will be returned directly.
	    getCopy: function(attribute) {
	      return _.clone(this.get(attribute));
	    },
	
	    // Backbone.Model.get() override:
	    // provides access to computed attributes,
	    // and maps computed dependency references while establishing bindings.
	    get: function(attribute) {
	
	      // Automatically register bindings while building out computed dependency graphs:
	      modelMap && modelMap.push(['change:'+attribute, this]);
	
	      // Return a computed property value, if available:
	      if (this.hasComputed(attribute)) {
	        return this.c()[ attribute ].get();
	      }
	
	      // Default to native Backbone.Model get operation:
	      return _super(this, 'get', arguments);
	    },
	
	    // Backbone.Model.set() override:
	    // will process any computed attribute setters,
	    // and then pass along all results to the underlying model.
	    set: function(key, value, options) {
	      var params = key;
	
	      // Convert key/value arguments into {key:value} format:
	      if (params && !isObject(params)) {
	        params = {};
	        params[ key ] = value;
	      } else {
	        options = value;
	      }
	
	      // Default options definition:
	      options = options || {};
	
	      // Create store for capturing computed change events:
	      var computedEvents = this._setting = [];
	
	      // Attempt to set computed attributes while not unsetting:
	      if (!options.unset) {
	        // All param properties are tested against computed setters,
	        // properties set to computeds will be removed from the params table.
	        // Optionally, an computed setter may return key/value pairs to be merged into the set.
	        params = deepModelSet(this, params, {}, []);
	      }
	
	      // Remove computed change events store:
	      delete this._setting;
	
	      // Pass all resulting set params along to the underlying Backbone Model.
	      var result = _super(this, 'set', [params, options]);
	
	      // Dispatch all outstanding computed events:
	      if (!options.silent) {
	        // Make sure computeds get a "change" event:
	        if (!this.hasChanged() && computedEvents.length) {
	          this.trigger('change', this);
	        }
	
	        // Trigger each individual computed attribute change:
	        // NOTE: computeds now officially fire AFTER basic "change"...
	        // We can't really fire them earlier without duplicating the Backbone "set" method here.
	        _.each(computedEvents, function(evt) {
	          this.trigger.apply(this, evt);
	        }, this);
	      }
	      return result;
	    },
	
	    // Backbone.Model.toJSON() override:
	    // adds a 'computed' option, specifying to include computed attributes.
	    toJSON: function(options) {
	      var json = _super(this, 'toJSON', arguments);
	
	      if (options && options.computed) {
	        _.each(this.c(), function(computed, attribute) {
	          json[ attribute ] = computed.value;
	        });
	      }
	
	      return json;
	    },
	
	    // Backbone.Model.destroy() override:
	    // clears all computed attributes before destroying.
	    destroy: function() {
	      this.clearComputeds();
	      return _super(this, 'destroy', arguments);
	    },
	
	    // Computed namespace manager:
	    // Allows the model to operate as a mixin.
	    c: function() {
	      return this._c || (this._c = {});
	    },
	
	    // Initializes the Epoxy model:
	    // called automatically by the native constructor,
	    // or may be called manually when adding Epoxy as a mixin.
	    initComputeds: function(attributes, options) {
	      this.clearComputeds();
	
	      // Resolve computeds hash, and extend it with any preset attribute keys:
	      // TODO: write test.
	      var computeds = _.result(this, 'computeds')||{};
	      computeds = _.extend(computeds, _.pick(attributes||{}, _.keys(computeds)));
	
	      // Add all computed attributes:
	      _.each(computeds, function(params, attribute) {
	        params._init = 1;
	        this.addComputed(attribute, params);
	      }, this);
	
	      // Initialize all computed attributes:
	      // all presets have been constructed and may reference each other now.
	      _.invoke(this.c(), 'init');
	    },
	
	    // Adds a computed attribute to the model:
	    // computed attribute will assemble and return customized values.
	    // @param attribute (string)
	    // @param getter (function) OR params (object)
	    // @param [setter (function)]
	    // @param [dependencies ...]
	    addComputed: function(attribute, getter, setter) {
	      this.removeComputed(attribute);
	
	      var params = getter;
	      var delayInit = params._init;
	
	      // Test if getter and/or setter are provided:
	      if (isFunction(getter)) {
	        var depsIndex = 2;
	
	        // Add getter param:
	        params = {};
	        params._get = getter;
	
	        // Test for setter param:
	        if (isFunction(setter)) {
	          params._set = setter;
	          depsIndex++;
	        }
	
	        // Collect all additional arguments as dependency definitions:
	        params.deps = array.slice.call(arguments, depsIndex);
	      }
	
	      // Create a new computed attribute:
	      this.c()[ attribute ] = new EpoxyComputedModel(this, attribute, params, delayInit);
	      return this;
	    },
	
	    // Tests the model for a computed attribute definition:
	    hasComputed: function(attribute) {
	      return this.c().hasOwnProperty(attribute);
	    },
	
	    // Removes an computed attribute from the model:
	    removeComputed: function(attribute) {
	      if (this.hasComputed(attribute)) {
	        this.c()[ attribute ].dispose();
	        delete this.c()[ attribute ];
	      }
	      return this;
	    },
	
	    // Removes all computed attributes:
	    clearComputeds: function() {
	      for (var attribute in this.c()) {
	        this.removeComputed(attribute);
	      }
	      return this;
	    },
	
	    // Internal array value modifier:
	    // performs array ops on a stored array value, then fires change.
	    // No action is taken if the specified attribute value is not an array.
	    modifyArray: function(attribute, method, options) {
	      var obj = this.get(attribute);
	
	      if (isArray(obj) && isFunction(array[method])) {
	        var args = array.slice.call(arguments, 2);
	        var result = array[ method ].apply(obj, args);
	        options = options || {};
	
	        if (!options.silent) {
	          this.trigger('change:'+attribute+' change', this, array, options);
	        }
	        return result;
	      }
	      return null;
	    },
	
	    // Internal object value modifier:
	    // sets new property values on a stored object value, then fires change.
	    // No action is taken if the specified attribute value is not an object.
	    modifyObject: function(attribute, property, value, options) {
	      var obj = this.get(attribute);
	      var change = false;
	
	      // If property is Object:
	      if (isObject(obj)) {
	
	        options = options || {};
	
	        // Delete existing property in response to undefined values:
	        if (isUndefined(value) && obj.hasOwnProperty(property)) {
	          delete obj[property];
	          change = true;
	        }
	        // Set new and/or changed property values:
	        else if (obj[ property ] !== value) {
	          obj[ property ] = value;
	          change = true;
	        }
	
	        // Trigger model change:
	        if (change && !options.silent) {
	          this.trigger('change:'+attribute+' change', this, obj, options);
	        }
	
	        // Return the modified object:
	        return obj;
	      }
	      return null;
	    }
	  }, mixins);
	
	  // Epoxy.Model -> Private
	  // ----------------------
	
	  // Model deep-setter:
	  // Attempts to set a collection of key/value attribute pairs to computed attributes.
	  // Observable setters may digest values, and then return mutated key/value pairs for inclusion into the set operation.
	  // Values returned from computed setters will be recursively deep-set, allowing computeds to set other computeds.
	  // The final collection of resolved key/value pairs (after setting all computeds) will be returned to the native model.
	  // @param model: target Epoxy model on which to operate.
	  // @param toSet: an object of key/value pairs to attempt to set within the computed model.
	  // @param toReturn: resolved non-ovservable attribute values to be returned back to the native model.
	  // @param trace: property stack trace (prevents circular setter loops).
	  function deepModelSet(model, toSet, toReturn, stack) {
	
	    // Loop through all setter properties:
	    for (var attribute in toSet) {
	      if (toSet.hasOwnProperty(attribute)) {
	
	        // Pull each setter value:
	        var value = toSet[ attribute ];
	
	        if (model.hasComputed(attribute)) {
	
	          // Has a computed attribute:
	          // comfirm attribute does not already exist within the stack trace.
	          if (!stack.length || !_.contains(stack, attribute)) {
	
	            // Non-recursive:
	            // set and collect value from computed attribute.
	            value = model.c()[attribute].set(value);
	
	            // Recursively set new values for a returned params object:
	            // creates a new copy of the stack trace for each new search branch.
	            if (value && isObject(value)) {
	              toReturn = deepModelSet(model, value, toReturn, stack.concat(attribute));
	            }
	
	          } else {
	            // Recursive:
	            // Throw circular reference error.
	            throw('Recursive setter: '+stack.join(' > '));
	          }
	
	        } else {
	          // No computed attribute:
	          // set the value to the keeper values.
	          toReturn[ attribute ] = value;
	        }
	      }
	    }
	
	    return toReturn;
	  }
	
	
	  // Epoxy.Model -> Computed
	  // -----------------------
	  // Computed objects store model values independently from the model's attributes table.
	  // Computeds define custom getter/setter functions to manage their value.
	
	  function EpoxyComputedModel(model, name, params, delayInit) {
	    params = params || {};
	
	    // Rewrite getter param:
	    if (params.get && isFunction(params.get)) {
	      params._get = params.get;
	    }
	
	    // Rewrite setter param:
	    if (params.set && isFunction(params.set)) {
	      params._set = params.set;
	    }
	
	    // Prohibit override of 'get()' and 'set()', then extend:
	    delete params.get;
	    delete params.set;
	    _.extend(this, params);
	
	    // Set model, name, and default dependencies array:
	    this.model = model;
	    this.name = name;
	    this.deps = this.deps || [];
	
	    // Skip init while parent model is initializing:
	    // Model will initialize in two passes...
	    // the first pass sets up all computed attributes,
	    // then the second pass initializes all bindings.
	    if (!delayInit) this.init();
	  }
	
	  _.extend(EpoxyComputedModel.prototype, Backbone.Events, {
	
	    // Initializes the computed's value and bindings:
	    // this method is called independently from the object constructor,
	    // allowing computeds to build and initialize in two passes by the parent model.
	    init: function() {
	
	      // Configure dependency map, then update the computed's value:
	      // All Epoxy.Model attributes accessed while getting the initial value
	      // will automatically register themselves within the model bindings map.
	      var bindings = {};
	      var deps = modelMap = [];
	      this.get(true);
	      modelMap = null;
	
	      // If the computed has dependencies, then proceed to binding it:
	      if (deps.length) {
	
	        // Compile normalized bindings table:
	        // Ultimately, we want a table of event types, each with an array of their associated targets:
	        // {'change:name':[<model1>], 'change:status':[<model1>,<model2>]}
	
	        // Compile normalized bindings map:
	        _.each(deps, function(value) {
	          var attribute = value[0];
	          var target = value[1];
	
	          // Populate event target arrays:
	          if (!bindings[attribute]) {
	            bindings[attribute] = [ target ];
	
	          } else if (!_.contains(bindings[attribute], target)) {
	            bindings[attribute].push(target);
	          }
	        });
	
	        // Bind all event declarations to their respective targets:
	        _.each(bindings, function(targets, binding) {
	          for (var i=0, len=targets.length; i < len; i++) {
	            this.listenTo(targets[i], binding, _.bind(this.get, this, true));
	          }
	        }, this);
	      }
	    },
	
	    // Gets an attribute value from the parent model.
	    val: function(attribute) {
	      return this.model.get(attribute);
	    },
	
	    // Gets the computed's current value:
	    // Computed values flagged as dirty will need to regenerate themselves.
	    // Note: 'update' is strongly checked as TRUE to prevent unintended arguments (handler events, etc) from qualifying.
	    get: function(update) {
	      if (update === true && this._get) {
	        var val = this._get.apply(this.model, _.map(this.deps, this.val, this));
	        this.change(val);
	      }
	      return this.value;
	    },
	
	    // Sets the computed's current value:
	    // computed values (have a custom getter method) require a custom setter.
	    // Custom setters should return an object of key/values pairs;
	    // key/value pairs returned to the parent model will be merged into its main .set() operation.
	    set: function(val) {
	      if (this._get) {
	        if (this._set) return this._set.apply(this.model, arguments);
	        else throw('Cannot set read-only computed attribute.');
	      }
	      this.change(val);
	      return null;
	    },
	
	    // Changes the computed's value:
	    // new values are cached, then fire an update event.
	    change: function(value) {
	      if (!_.isEqual(value, this.value)) {
	        this.value = value;
	        var evt = ['change:'+this.name, this.model, value];
	
	        if (this.model._setting) {
	          this.model._setting.push(evt);
	        } else {
	          evt[0] += ' change';
	          this.model.trigger.apply(this.model, evt);
	        }
	      }
	    },
	
	    // Disposal:
	    // cleans up events and releases references.
	    dispose: function() {
	      this.stopListening();
	      this.off();
	      this.model = this.value = null;
	    }
	  });
	
	
	  // Epoxy.binding -> Binding API
	  // ----------------------------
	
	  var bindingSettings = {
	    optionText: 'label',
	    optionValue: 'value'
	  };
	
	
	  // Cache for storing binding parser functions:
	  // Cuts down on redundancy when building repetitive binding views.
	  var bindingCache = {};
	
	
	  // Reads value from an accessor:
	  // Accessors come in three potential forms:
	  // => A function to call for the requested value.
	  // => An object with a collection of attribute accessors.
	  // => A primitive (string, number, boolean, etc).
	  // This function unpacks an accessor and returns its underlying value(s).
	
	  function readAccessor(accessor) {
	
	    if (isFunction(accessor)) {
	      // Accessor is function: return invoked value.
	      return accessor();
	    }
	    else if (isObject(accessor)) {
	      // Accessor is object/array: return copy with all attributes read.
	      accessor = _.clone(accessor);
	
	      _.each(accessor, function(value, key) {
	        accessor[ key ] = readAccessor(value);
	      });
	    }
	    // return formatted value, or pass through primitives:
	    return accessor;
	  }
	
	
	  // Binding Handlers
	  // ----------------
	  // Handlers define set/get methods for exchanging data with the DOM.
	
	  // Formatting function for defining new handler objects:
	  function makeHandler(handler) {
	    return isFunction(handler) ? {set: handler} : handler;
	  }
	
	  var bindingHandlers = {
	    // Attribute: write-only. Sets element attributes.
	    attr: makeHandler(function($element, value) {
	      $element.attr(value);
	    }),
	
	    // Checked: read-write. Toggles the checked status of a form element.
	    checked: makeHandler({
	      get: function($element, currentValue, evt) {
	        if ($element.length > 1) {
	          $element = $element.filter(evt.target);
	        }
	
	        var checked = !!$element.prop('checked');
	        var value = $element.val();
	
	        if (this.isRadio($element)) {
	          // Radio button: return value directly.
	          return value;
	
	        } else if (isArray(currentValue)) {
	          // Checkbox array: add/remove value from list.
	          currentValue = currentValue.slice();
	          var index = _.indexOf(currentValue, value);
	
	          if (checked && index < 0) {
	            currentValue.push(value);
	          } else if (!checked && index > -1) {
	            currentValue.splice(index, 1);
	          }
	          return currentValue;
	        }
	        // Checkbox: return boolean toggle.
	        return checked;
	      },
	      set: function($element, value) {
	        if ($element.length > 1) {
	          $element = $element.filter('[value="'+ value +'"]');
	        }
	        
	        // Default as loosely-typed boolean:
	        var checked = !!value;
	
	        if (this.isRadio($element)) {
	          // Radio button: match checked state to radio value.
	          checked = (value == $element.val());
	
	        } else if (isArray(value)) {
	          // Checkbox array: match checked state to checkbox value in array contents.
	          checked = _.contains(value, $element.val());
	        }
	
	        // Set checked property to element:
	        $element.prop('checked', checked);
	      },
	      // Is radio button: avoids '.is(":radio");' check for basic Zepto compatibility.
	      isRadio: function($element) {
	        return $element.attr('type').toLowerCase() === 'radio';
	      }
	    }),
	
	    // Class Name: write-only. Toggles a collection of class name definitions.
	    classes: makeHandler(function($element, value) {
	      _.each(value, function(enabled, className) {
	        $element.toggleClass(className, !!enabled);
	      });
	    }),
	
	    // Collection: write-only. Manages a list of views bound to a Backbone.Collection.
	    collection: makeHandler({
	      init: function($element, collection, context, bindings) {
	        this.i = bindings.itemView ? this.view[bindings.itemView] : this.view.itemView;
	        if (!isCollection(collection)) throw('Binding "collection" requires a Collection.');
	        if (!isFunction(this.i)) throw('Binding "collection" requires an itemView.');
	        this.v = {};
	      },
	      set: function($element, collection, target) {
	
	        var view;
	        var views = this.v;
	        var ItemView = this.i;
	        var models = collection.models;
	
	        // Cache and reset the current dependency graph state:
	        // sub-views may be created (each with their own dependency graph),
	        // therefore we need to suspend the working graph map here before making children...
	        var mapCache = viewMap;
	        viewMap = null;
	
	        // Default target to the bound collection object:
	        // during init (or failure), the binding will reset.
	        target = target || collection;
	
	        if (isModel(target)) {
	
	          // ADD/REMOVE Event (from a Model):
	          // test if view exists within the binding...
	          if (!views.hasOwnProperty(target.cid)) {
	
	            // Add new view:
	            views[ target.cid ] = view = new ItemView({model: target, collectionView: this.view});
	            var index = _.indexOf(models, target);
	            var $children = $element.children();
	
	            // Attempt to add at proper index,
	            // otherwise just append into the element.
	            if (index < $children.length) {
	              $children.eq(index).before(view.$el);
	            } else {
	              $element.append(view.$el);
	            }
	
	          } else {
	
	            // Remove existing view:
	            views[ target.cid ].remove();
	            delete views[ target.cid ];
	          }
	
	        } else if (isCollection(target)) {
	
	          // SORT/RESET Event (from a Collection):
	          // First test if we're sorting...
	          // (number of models has not changed and all their views are present)
	          var sort = models.length === _.size(views) && collection.every(function(model) {
	            return views.hasOwnProperty(model.cid);
	          });
	
	          // Hide element before manipulating:
	          $element.children().detach();
	          var frag = document.createDocumentFragment();
	
	          if (sort) {
	            // Sort existing views:
	            collection.each(function(model) {
	              frag.appendChild(views[model.cid].el);
	            });
	
	          } else {
	            // Reset with new views:
	            this.clean();
	            collection.each(function(model) {
	              views[ model.cid ] = view = new ItemView({model: model, collectionView: this.view});
	              frag.appendChild(view.el);
	            }, this);
	          }
	
	          $element.append(frag);
	        }
	
	        // Restore cached dependency graph configuration:
	        viewMap = mapCache;
	      },
	      clean: function() {
	        for (var id in this.v) {
	          if (this.v.hasOwnProperty(id)) {
	            this.v[ id ].remove();
	            delete this.v[ id ];
	          }
	        }
	      }
	    }),
	
	    // CSS: write-only. Sets a collection of CSS styles to an element.
	    css: makeHandler(function($element, value) {
	      $element.css(value);
	    }),
	
	    // Disabled: write-only. Sets the 'disabled' status of a form element (true :: disabled).
	    disabled: makeHandler(function($element, value) {
	      $element.prop('disabled', !!value);
	    }),
	
	    // Enabled: write-only. Sets the 'disabled' status of a form element (true :: !disabled).
	    enabled: makeHandler(function($element, value) {
	      $element.prop('disabled', !value);
	    }),
	
	    // HTML: write-only. Sets the inner HTML value of an element.
	    html: makeHandler(function($element, value) {
	      $element.html(value);
	    }),
	
	    // Options: write-only. Sets option items to a <select> element, then updates the value.
	    options: makeHandler({
	      init: function($element, value, context, bindings) {
	        this.e = bindings.optionsEmpty;
	        this.d = bindings.optionsDefault;
	        this.v = bindings.value;
	      },
	      set: function($element, value) {
	
	        // Pre-compile empty and default option values:
	        // both values MUST be accessed, for two reasons:
	        // 1) we need to need to guarentee that both values are reached for mapping purposes.
	        // 2) we'll need their values anyway to determine their defined/undefined status.
	        var self = this;
	        var optionsEmpty = readAccessor(self.e);
	        var optionsDefault = readAccessor(self.d);
	        var currentValue = readAccessor(self.v);
	        var options = isCollection(value) ? value.models : value;
	        var numOptions = options.length;
	        var enabled = true;
	        var html = '';
	
	        // No options or default, and has an empty options placeholder:
	        // display placeholder and disable select menu.
	        if (!numOptions && !optionsDefault && optionsEmpty) {
	
	          html += self.opt(optionsEmpty, numOptions);
	          enabled = false;
	
	        } else {
	          // Try to populate default option and options list:
	
	          // Configure list with a default first option, if defined:
	          if (optionsDefault) {
	            options = [ optionsDefault ].concat(options);
	          }
	
	          // Create all option items:
	          _.each(options, function(option, index) {
	            html += self.opt(option, numOptions);
	          });
	        }
	        // Set new HTML to the element and toggle disabled status:
	        $element.html(html).prop('disabled', !enabled).val(currentValue);
	
	        // Forcibly set default selection:
	        if ($element[0].selectedIndex < 0 && $element.children().length) {
	          $element[0].selectedIndex = 0;
	        }
	        
	        // Pull revised value with new options selection state:
	        var revisedValue = $element.val();
	
	        // Test if the current value was successfully applied:
	        // if not, set the new selection state into the model.
	        if (self.v && !_.isEqual(currentValue, revisedValue)) {
	          self.v(revisedValue);
	        }
	      },
	      opt: function(option, numOptions) {
	        // Set both label and value as the raw option object by default:
	        var label = option;
	        var value = option;
	        var textAttr = bindingSettings.optionText;
	        var valueAttr = bindingSettings.optionValue;
	
	        // Dig deeper into label/value settings for non-primitive values:
	        if (isObject(option)) {
	          // Extract a label and value from each object:
	          // a model's 'get' method is used to access potential computed values.
	          label = isModel(option) ? option.get(textAttr) : option[ textAttr ];
	          value = isModel(option) ? option.get(valueAttr) : option[ valueAttr ];
	        }
	
	        return ['<option value="', value, '">', label, '</option>'].join('');
	      },
	      clean: function() {
	        this.d = this.e = this.v = 0;
	      }
	    }),
	
	    // Template: write-only. Renders the bound element with an Underscore template.
	    template: makeHandler({
	      init: function($element, value, context) {
	        var raw = $element.find('script,template');
	        this.t = _.template(raw.length ? raw.html() : $element.html());
	
	        // If an array of template attributes was provided,
	        // then replace array with a compiled hash of attribute accessors:
	        if (isArray(value)) {
	          return _.pick(context, value);
	        }
	      },
	      set: function($element, value) {
	        value = isModel(value) ? value.toJSON({computed:true}) : value;
	        $element.html(this.t(value));
	      },
	      clean: function() {
	        this.t = null;
	      }
	    }),
	
	    // Text: read-write. Gets and sets the text value of an element.
	    text: makeHandler({
	      get: function($element) {
	        return $element.text();
	      },
	      set: function($element, value) {
	        $element.text(value);
	      }
	    }),
	
	    // Toggle: write-only. Toggles the visibility of an element.
	    toggle: makeHandler(function($element, value) {
	      $element.toggle(!!value);
	    }),
	
	    // Value: read-write. Gets and sets the value of a form element.
	    value: makeHandler({
	      get: function($element) {
	        return $element.val();
	      },
	      set: function($element, value) {
	        try {
	          if ($element.val() + '' != value + '') $element.val(value);
	        } catch (error) {
	          // Error setting value: IGNORE.
	          // This occurs in IE6 while attempting to set an undefined multi-select option.
	          // unfortuantely, jQuery doesn't gracefully handle this error for us.
	          // remove this try/catch block when IE6 is officially deprecated.
	        }
	      }
	    })
	  };
	
	
	  // Binding Filters
	  // ---------------
	  // Filters are special binding handlers that may be invoked while binding;
	  // they will return a wrapper function used to modify how accessors are read.
	
	  // Partial application wrapper for creating binding filters:
	  function makeFilter(handler) {
	    return function() {
	      var params = arguments;
	      var read = isFunction(handler) ? handler : handler.get;
	      var write = handler.set;
	      return function(value) {
	        return isUndefined(value) ?
	          read.apply(this, _.map(params, readAccessor)) :
	          params[0]((write ? write : read).call(this, value));
	      };
	    };
	  }
	
	  var bindingFilters = {
	    // Positive collection assessment [read-only]:
	    // Tests if all of the provided accessors are truthy (and).
	    all: makeFilter(function() {
	      var params = arguments;
	      for (var i=0, len=params.length; i < len; i++) {
	        if (!params[i]) return false;
	      }
	      return true;
	    }),
	
	    // Partial collection assessment [read-only]:
	    // tests if any of the provided accessors are truthy (or).
	    any: makeFilter(function() {
	      var params = arguments;
	      for (var i=0, len=params.length; i < len; i++) {
	        if (params[i]) return true;
	      }
	      return false;
	    }),
	
	    // Collection length accessor [read-only]:
	    // assumes accessor value to be an Array or Collection; defaults to 0.
	    length: makeFilter(function(value) {
	      return value.length || 0;
	    }),
	
	    // Negative collection assessment [read-only]:
	    // tests if none of the provided accessors are truthy (and not).
	    none: makeFilter(function() {
	      var params = arguments;
	      for (var i=0, len=params.length; i < len; i++) {
	        if (params[i]) return false;
	      }
	      return true;
	    }),
	
	    // Negation [read-only]:
	    not: makeFilter(function(value) {
	      return !value;
	    }),
	
	    // Formats one or more accessors into a text string:
	    // ('$1 $2 did $3', firstName, lastName, action)
	    format: makeFilter(function(str) {
	      var params = arguments;
	
	      for (var i=1, len=params.length; i < len; i++) {
	        // TODO: need to make something like this work: (?<!\\)\$1
	        str = str.replace(new RegExp('\\$'+i, 'g'), params[i]);
	      }
	      return str;
	    }),
	
	    // Provides one of two values based on a ternary condition:
	    // uses first param (a) as condition, and returns either b (truthy) or c (falsey).
	    select: makeFilter(function(condition, truthy, falsey) {
	      return condition ? truthy : falsey;
	    }),
	
	    // CSV array formatting [read-write]:
	    csv: makeFilter({
	      get: function(value) {
	        value = String(value);
	        return value ? value.split(',') : [];
	      },
	      set: function(value) {
	        return isArray(value) ? value.join(',') : value;
	      }
	    }),
	
	    // Integer formatting [read-write]:
	    integer: makeFilter(function(value) {
	      return value ? parseInt(value, 10) : 0;
	    }),
	
	    // Float formatting [read-write]:
	    decimal: makeFilter(function(value) {
	      return value ? parseFloat(value) : 0;
	    })
	  };
	
	  // Define allowed binding parameters:
	  // These params may be included in binding handlers without throwing errors.
	  var allowedParams = {
	    events: 1,
	    itemView: 1,
	    optionsDefault: 1,
	    optionsEmpty: 1
	  };
	
	  // Define binding API:
	  Epoxy.binding = {
	    allowedParams: allowedParams,
	    addHandler: function(name, handler) {
	      bindingHandlers[ name ] = makeHandler(handler);
	    },
	    addFilter: function(name, handler) {
	      bindingFilters[ name ] = makeFilter(handler);
	    },
	    config: function(settings) {
	      _.extend(bindingSettings, settings);
	    },
	    emptyCache: function() {
	      bindingCache = {};
	    }
	  };
	
	
	  // Epoxy.View
	  // ----------
	  var viewMap;
	  var viewProps = ['viewModel', 'bindings', 'bindingFilters', 'bindingHandlers', 'bindingSources', 'computeds'];
	
	  Epoxy.View = Backbone.View.extend({
	    _super: Backbone.View,
	
	    // Backbone.View constructor override:
	    // sets up binding controls around call to super.
	    constructor: function(options) {
	      _.extend(this, _.pick(options||{}, viewProps));
	      _super(this, 'constructor', arguments);
	      this.applyBindings();
	    },
	
	    // Bindings list accessor:
	    b: function() {
	      return this._b || (this._b = []);
	    },
	
	    // Bindings definition:
	    // this setting defines a DOM attribute name used to query for bindings.
	    // Alternatively, this be replaced with a hash table of key/value pairs,
	    // where 'key' is a DOM query and 'value' is its binding declaration.
	    bindings: 'data-bind',
	
	    // Setter options:
	    // Defines an optional hashtable of options to be passed to setter operations.
	    // Accepts a custom option '{save:true}' that will write to the model via ".save()".
	    setterOptions: null,
	
	    // Compiles a model context, then applies bindings to the view:
	    // All Model->View relationships will be baked at the time of applying bindings;
	    // changes in configuration to source attributes or view bindings will require a complete re-bind.
	    applyBindings: function() {
	      this.removeBindings();
	
	      var self = this;
	      var sources = _.clone(_.result(self, 'bindingSources'));
	      var declarations = self.bindings;
	      var options = self.setterOptions;
	      var handlers = _.clone(bindingHandlers);
	      var filters = _.clone(bindingFilters);
	      var context = self._c = {};
	
	      // Compile a complete set of binding handlers for the view:
	      // mixes all custom handlers into a copy of default handlers.
	      // Custom handlers defined as plain functions are registered as read-only setters.
	      _.each(_.result(self, 'bindingHandlers')||{}, function(handler, name) {
	          handlers[ name ] = makeHandler(handler);
	      });
	
	      // Compile a complete set of binding filters for the view:
	      // mixes all custom filters into a copy of default filters.
	      _.each(_.result(self, 'bindingFilters')||{}, function(filter, name) {
	          filters[ name ] = makeFilter(filter);
	      });
	
	      // Add native 'model' and 'collection' data sources:
	      self.model = addSourceToViewContext(self, context, options, 'model');
	      self.viewModel = addSourceToViewContext(self, context, options, 'viewModel');
	      self.collection = addSourceToViewContext(self, context, options, 'collection');
	
	      // Support legacy "collection.view" API for rendering list items:
	      // **Deprecated: will be removed after next release*.*
	      if (self.collection && self.collection.view) {
	        self.itemView = self.collection.view;
	      }
	
	      // Add all additional data sources:
	      if (sources) {
	        _.each(sources, function(source, sourceName) {
	          sources[ sourceName ] = addSourceToViewContext(sources, context, options, sourceName, sourceName);
	        });
	
	        // Reapply resulting sources to view instance.
	        self.bindingSources = sources;
	      }
	
	      // Add all computed view properties:
	      _.each(_.result(self, 'computeds')||{}, function(computed, name) {
	        var getter = isFunction(computed) ? computed : computed.get;
	        var setter = computed.set;
	        var deps = computed.deps;
	
	        context[ name ] = function(value) {
	          return (!isUndefined(value) && setter) ?
	            setter.call(self, value) :
	            getter.apply(self, getDepsFromViewContext(self._c, deps));
	        };
	      });
	
	      // Create all bindings:
	      // bindings are created from an object hash of query/binding declarations,
	      // OR based on queried DOM attributes.
	      if (isObject(declarations)) {
	
	        // Object declaration method:
	        // {'span.my-element': 'text:attribute'}
	
	        _.each(declarations, function(elementDecs, selector) {
	          // Get DOM jQuery reference:
	          var $element = queryViewForSelector(self, selector);
	
	          // flattern object notated binding declaration
	          if (isObject(elementDecs)) {
	            elementDecs = flattenBindingDeclaration(elementDecs);
	          }
	
	          // Ignore empty DOM queries (without errors):
	          if ($element.length) {
	            bindElementToView(self, $element, elementDecs, context, handlers, filters);
	          }
	        });
	
	      } else {
	
	        // DOM attributes declaration method:
	        // <span data-bind='text:attribute'></span>
	
	        // Create bindings for each matched element:
	        queryViewForSelector(self, '['+declarations+']').each(function() {
	          var $element = Backbone.$(this);
	          bindElementToView(self, $element, $element.attr(declarations), context, handlers, filters);
	        });
	      }
	    },
	
	    // Gets a value from the binding context:
	    getBinding: function(attribute) {
	      return accessViewContext(this._c, attribute);
	    },
	
	    // Sets a value to the binding context:
	    setBinding: function(attribute, value) {
	      return accessViewContext(this._c, attribute, value);
	    },
	
	    // Disposes of all view bindings:
	    removeBindings: function() {
	      this._c = null;
	
	      if (this._b) {
	        while (this._b.length) {
	          this._b.pop().dispose();
	        }
	      }
	    },
	
	    // Backbone.View.remove() override:
	    // unbinds the view before performing native removal tasks.
	    remove: function() {
	      this.removeBindings();
	      _super(this, 'remove', arguments);
	    }
	
	  }, mixins);
	
	  // Epoxy.View -> Private
	  // ---------------------
	
	  // Adds a data source to a view:
	  // Data sources are Backbone.Model and Backbone.Collection instances.
	  // @param source: a source instance, or a function that returns a source.
	  // @param context: the working binding context. All bindings in a view share a context.
	  function addSourceToViewContext(source, context, options, name, prefix) {
	
	    // Resolve source instance:
	    source = _.result(source, name);
	
	    // Ignore missing sources, and invoke non-instances:
	    if (!source) return;
	
	    // Add Backbone.Model source instance:
	    if (isModel(source)) {
	
	      // Establish source prefix:
	      prefix = prefix ? prefix+'_' : '';
	
	      // Create a read-only accessor for the model instance:
	      context['$'+name] = function() {
	        viewMap && viewMap.push([source, 'change']);
	        return source;
	      };
	
	      // Compile all model attributes as accessors within the context:
	      var modelAttributes = _.extend({}, source.attributes, _.isFunction(source.c) ? source.c() : {});
	      _.each(modelAttributes, function(value, attribute) {
	
	        // Create named accessor functions:
	        // -> Attributes from 'view.model' use their normal names.
	        // -> Attributes from additional sources are named as 'source_attribute'.
	        context[prefix+attribute] = function(value) {
	          return accessViewDataAttribute(source, attribute, value, options);
	        };
	      });
	    }
	    // Add Backbone.Collection source instance:
	    else if (isCollection(source)) {
	
	      // Create a read-only accessor for the collection instance:
	      context['$'+name] = function() {
	        viewMap && viewMap.push([source, 'reset add remove sort update']);
	        return source;
	      };
	    }
	
	    // Return original object, or newly constructed data source:
	    return source;
	  }
	
	  // Attribute data accessor:
	  // exchanges individual attribute values with model sources.
	  // This function is separated out from the accessor creation process for performance.
	  // @param source: the model data source to interact with.
	  // @param attribute: the model attribute to read/write.
	  // @param value: the value to set, or 'undefined' to get the current value.
	  function accessViewDataAttribute(source, attribute, value, options) {
	    // Register the attribute to the bindings map, if enabled:
	    viewMap && viewMap.push([source, 'change:'+attribute]);
	
	    // Set attribute value when accessor is invoked with an argument:
	    if (!isUndefined(value)) {
	
	      // Set Object (non-null, non-array) hashtable value:
	      if (!isObject(value) || isArray(value) || _.isDate(value)) {
	        var val = value;
	        value = {};
	        value[attribute] = val;
	      }
	
	      // Set value:
	      return options && options.save ? source.save(value, options) : source.set(value, options);
	    }
	
	    // Get the attribute value by default:
	    return source.get(attribute);
	  }
	
	  // Queries element selectors within a view:
	  // matches elements within the view, and the view's container element.
	  function queryViewForSelector(view, selector) {
	    if (selector === ':el' || selector === ':scope') return view.$el;
	    var $elements = view.$(selector);
	
	    // Include top-level view in bindings search:
	    if (view.$el.is(selector)) {
	      $elements = $elements.add(view.$el);
	    }
	
	    return $elements;
	  }
	
	  // Binds an element into a view:
	  // The element's declarations are parsed, then a binding is created for each declared handler.
	  // @param view: the parent View to bind into.
	  // @param $element: the target element (as jQuery) to bind.
	  // @param declarations: the string of binding declarations provided for the element.
	  // @param context: a compiled binding context with all availabe view data.
	  // @param handlers: a compiled handlers table with all native/custom handlers.
	  function bindElementToView(view, $element, declarations, context, handlers, filters) {
	
	    // Parse localized binding context:
	    // parsing function is invoked with 'filters' and 'context' properties made available,
	    // yeilds a native context object with element-specific bindings defined.
	    try {
	      var parserFunct = bindingCache[declarations] || (bindingCache[declarations] = new Function('$f','$c','with($f){with($c){return{'+ declarations +'}}}'));
	      var bindings = parserFunct(filters, context);
	    } catch (error) {
	      throw('Error parsing bindings: "'+declarations +'"\n>> '+error);
	    }
	
	    // Format the 'events' option:
	    // include events from the binding declaration along with a default 'change' trigger,
	    // then format all event names with a '.epoxy' namespace.
	    var events = _.map(_.union(bindings.events || [], ['change']), function(name) {
	      return name+'.epoxy';
	    }).join(' ');
	
	    // Apply bindings from native context:
	    _.each(bindings, function(accessor, handlerName) {
	
	      // Validate that each defined handler method exists before binding:
	      if (handlers.hasOwnProperty(handlerName)) {
	        // Create and add binding to the view's list of handlers:
	        view.b().push(new EpoxyBinding(view, $element, handlers[handlerName], accessor, events, context, bindings));
	      } else if (!allowedParams.hasOwnProperty(handlerName)) {
	        throw('binding handler "'+ handlerName +'" is not defined.');
	      }
	    });
	  }
	
	  // Gets and sets view context data attributes:
	  // used by the implementations of "getBinding" and "setBinding".
	  function accessViewContext(context, attribute, value) {
	    if (context && context.hasOwnProperty(attribute)) {
	      return isUndefined(value) ? readAccessor(context[attribute]) : context[attribute](value);
	    }
	  }
	
	  // Accesses an array of dependency properties from a view context:
	  // used for mapping view dependencies by manual declaration.
	  function getDepsFromViewContext(context, attributes) {
	    var values = [];
	    if (attributes && context) {
	      for (var i=0, len=attributes.length; i < len; i++) {
	        values.push(attributes[i] in context ? context[ attributes[i] ]() : null);
	      }
	    }
	    return values;
	  }
	
	  var identifierRegex = /^[a-z_$][a-z0-9_$]*$/i;
	  var quotedStringRegex = /^\s*(["']).*\1\s*$/;
	
	  // Converts a binding declaration object into a flattened string.
	  // Input: {text: 'firstName', attr: {title: '"hello"'}}
	  // Output: 'text:firstName,attr:{title:"hello"}'
	  function flattenBindingDeclaration(declaration) {
	    var result = [];
	
	    for (var key in declaration) {
	      var value = declaration[key];
	
	      if (isObject(value)) {
	        value = '{'+ flattenBindingDeclaration(value) +'}';
	      }
	
	      // non-identifier keys that aren't already quoted need to be quoted
	      if (!identifierRegex.test(key) && !quotedStringRegex.test(key)) {
	        key = '"' + key + '"';
	      }
	
	      result.push(key +':'+ value);
	    }
	
	    return result.join(',');
	  }
	
	
	  // Epoxy.View -> Binding
	  // ---------------------
	  // The binding object connects an element to a bound handler.
	  // @param view: the view object this binding is attached to.
	  // @param $element: the target element (as jQuery) to bind.
	  // @param handler: the handler object to apply (include all handler methods).
	  // @param accessor: an accessor method from the binding context that exchanges data with the model.
	  // @param events:
	  // @param context:
	  // @param bindings:
	  function EpoxyBinding(view, $element, handler, accessor, events, context, bindings) {
	
	    var self = this;
	    var tag = ($element[0].tagName).toLowerCase();
	    var changable = (tag == 'input' || tag == 'select' || tag == 'textarea' || $element.prop('contenteditable') == 'true');
	    var triggers = [];
	    var reset = function(target) {
	      self.$el && self.set(self.$el, readAccessor(accessor), target);
	    };
	
	    self.view = view;
	    self.$el = $element;
	    self.evt = events;
	    _.extend(self, handler);
	
	    // Initialize the binding:
	    // allow the initializer to redefine/modify the attribute accessor if needed.
	    accessor = self.init(self.$el, readAccessor(accessor), context, bindings) || accessor;
	
	    // Set default binding, then initialize & map bindings:
	    // each binding handler is invoked to populate its initial value.
	    // While running a handler, all accessed attributes will be added to the handler's dependency map.
	    viewMap = triggers;
	    reset();
	    viewMap = null;
	
	    // Configure READ/GET-able binding. Requires:
	    // => Form element.
	    // => Binding handler has a getter method.
	    // => Value accessor is a function.
	    if (changable && handler.get && isFunction(accessor)) {
	      self.$el.on(events, function(evt) {
	        accessor(self.get(self.$el, readAccessor(accessor), evt));
	      });
	    }
	
	    // Configure WRITE/SET-able binding. Requires:
	    // => One or more events triggers.
	    if (triggers.length) {
	      for (var i=0, len=triggers.length; i < len; i++) {
	        self.listenTo(triggers[i][0], triggers[i][1], reset);
	      }
	    }
	  }
	
	  _.extend(EpoxyBinding.prototype, Backbone.Events, {
	
	    // Pass-through binding methods:
	    // for override by actual implementations.
	    init: blankMethod,
	    get: blankMethod,
	    set: blankMethod,
	    clean: blankMethod,
	
	    // Destroys the binding:
	    // all events and managed sub-views are killed.
	    dispose: function() {
	      this.clean();
	      this.stopListening();
	      this.$el.off(this.evt);
	      this.$el = this.view = null;
	    }
	  });
	
	  return Epoxy;
	}));


/***/ },
/* 16 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (message) {
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><div class=\"container\"><div class=\"row\"><p class=\"col-xs-12\">" + (jade.escape((jade_interp = message) == null ? '' : jade_interp)) + "</p></div><div class=\"row\"><div data-js-ok class=\"btn col-xs-4 col-xs-offset-8\">ok</div></div></div></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");}.call(this,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined));;return buf.join("");
	}

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(24).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 24 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 25 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 26 */,
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = Epoxy.Model.extend({
	    defaults: {
	        login: '',
	        loginClass: false,
	        loginAction: false,
	        email: '',
	        emailClass: false,
	        emailAction: false,
	        password: '',
	        passwordClass: false,
	        passwordAction: false,
	        passwordRepeat: '',
	        passwordRepeatClass: false,
	        passwordRepeatAction: false
	    },
	
	    computeds: {
	        loginInvalid: function loginInvalid() {
	            var loginLength = this.get('login').length;
	            return !(loginLength >= 4 && loginLength <= 30);
	        },
	        emailInvalid: function emailInvalid() {
	            return !common.emailRegexp.test(this.get('email'));
	        },
	        passwordInvalid: function passwordInvalid() {
	            return !(this.get('password').length > 6);
	        },
	        passwordRepeatInvalid: function passwordRepeatInvalid() {
	            return this.get('password') != this.get('passwordRepeat');
	        }
	    },
	
	    bindingView: function bindingView(view, fields) {
	        var _this = this;
	
	        this.keys = [];
	        this.view = view;
	        _.each(fields, function (value, key) {
	            var fixValue = value;
	            if (!_this.has(fixValue)) {
	                console.log(fixValue + ' in not validate field');
	                return;
	            }
	            _this.keys.push(fixValue);
	            view.bindings[key] = 'value:' + fixValue + ', classes:{animateInvalid:' + fixValue + 'Action,invalid:' + fixValue + 'Class}';
	            view.events['focus ' + key] = function (e) {
	                _this.set(fixValue + 'Class', false);
	            };
	            view.events['focusout ' + key] = function (e) {
	                _this.set(fixValue + 'Class', _this.get(fixValue + 'Invalid'));
	            };
	        });
	        view.delegateEvents();
	    },
	    validate: function validate() {
	        var _this2 = this;
	
	        var result = true;
	        _.each(this.keys, function (key) {
	            if (_this2.get(key + 'Invalid')) {
	                _this2.set(key + 'Class', true);
	                _this2.set(key + 'Action', false);
	                _this2.view.$el.width();
	                _this2.set(key + 'Action', true);
	                result = false;
	            }
	        });
	
	        return result;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _stringify = __webpack_require__(29);
	
	var _JSON$stringify = _interopRequireDefault(_stringify).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Epoxy.Model.extend({
	    defaults: {
	        auth: false,
	        sessionKey: '',
	        sessionValue: '',
	        server_time: '',
	        u_ava: null,
	        u_bg: null,
	        u_email: '',
	        u_fb_id: null,
	        u_is_buy_game: null,
	        u_last_premium_top_timer: null,
	        u_last_topic_timer: null,
	        u_last_trial_top_timer: null,
	        u_login: '',
	        u_guest_login: '',
	        u_lose: '',
	        u_name: null,
	        u_penalty_scores: '',
	        u_rate: '',
	        u_see_my_top50_rating: null,
	        u_surname: null,
	        u_total_answers: '',
	        u_total_right_answers: '',
	        u_vk_id: null,
	        u_win: ''
	    },
	    computeds: {
	        login: {
	            deps: ['u_login', 'u_guest_login'],
	            get: function get(u_login, u_guest_login) {
	                return u_login || u_guest_login;
	            }
	        },
	        userName: {
	            deps: ['u_name', 'u_surname', 'u_login', 'u_guest_login'],
	            get: function get(u_name, u_surname, u_login, u_guest_login) {
	                if (u_name) {
	                    if (u_surname) {
	                        return '#{u_name} #{u_surname}';
	                    }
	                    return u_name;
	                }
	                if (u_login) {
	                    return u_login;
	                }
	                return u_guest_login;
	            }
	        },
	        avatar: {
	            deps: ['u_ava'],
	            get: function get(u_ava) {
	                var avaInt = parseInt(u_ava, 10);
	                if (!u_ava || avaInt < 1 || avaInt > 50 && avaInt < 101 || avaInt > 150) {
	                    return 1;
	                }
	                return avaInt;
	            }
	        }
	
	    },
	    initialize: function initialize() {},
	    init: function init() {
	        this.getState();
	        this.listenTo(this, 'change', this.saveState);
	        this.listenTo(this, 'change:u_ava', this.onChangeAva);
	    },
	    getState: function getState() {
	        if (window.localStorage) {
	            this.set(JSON.parse(window.localStorage.getItem('userdata')));
	        }
	    },
	    saveState: function saveState() {
	        if (window.localStorage) {
	            window.localStorage.setItem('userdata', _JSON$stringify(this.toJSON()));
	        }
	    },
	    onChangeAva: function onChangeAva() {
	        common.api.user.setAvatar(this.get('u_ava'));
	    },
	    getSessionKey: function getSessionKey() {
	        return this.get('sessionKey');
	    },
	    getSessionValue: function getSessionValue() {
	        return this.get('sessionValue');
	    },
	    setVkIdToken: function setVkIdToken(id, token) {
	        this.set({
	            vkId: id,
	            vkToken: token,
	            socialAuth: 'vk'
	        });
	
	        return this;
	    },
	    setFbIdToken: function setFbIdToken(id, token) {
	        this.set({
	            fbId: id,
	            fbToken: token,
	            socialAuth: 'fb'
	        });
	        return this;
	    },
	    parseAnswer: function parseAnswer(data) {
	        var userData = data.answer;
	        userData.id = data.answer.u_id;
	        userData.sessionKey = data.session_name;
	        userData.sessionValue = data.session_id;
	        userData.auth = true;
	        this.set(userData);
	    },
	    logout: function logout() {
	        common.api.auth.logout();
	        this.set(this.defaults);
	        common.router.navigate('', { trigger: true });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(10)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(30), __esModule: true };

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(31)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 31 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _topicModel = __webpack_require__(33);
	
	var topicModel = _interopRequireDefault(_topicModel).default;
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: topicModel,
	
	    parse: function parse(data) {
	        if (data && data.answer && data.answer.topics) {
	            this.reset(_.map(data.answer.topics, function (value) {
	                value.id = value.topic_id;
	                if (data.answer.user_topics && data.answer.user_topics[value.topic_id]) {
	                    if (data.answer.user_topics[value.topic_id].uat_type == 'block') {
	                        value.isBlock = true;
	                    }
	                }
	                return value;
	            }));
	        } else {
	            this.reset([]);
	        }
	    },
	    initialize: function initialize() {
	        this.listenTo(this, 'change:isBlock', this.onChangeBlock);
	    },
	    update: function update() {
	        var _this = this;
	
	        common.api.getUserGames().done(function (data) {
	            _this.parse(data);
	        });
	    },
	    onChangeBlock: function onChangeBlock(model, isBlock) {
	        var _this2 = this;
	
	        if (isBlock) {
	            common.api.blockTopic(model.get('id')).fail(function (err) {
	                new infoModal({ message: err.text }).showModal();
	                _this2.update();
	            });
	        } else {
	            common.api.unblockTopic(model.get('id')).fail(function (err) {
	                new infoModal({ message: err.text }).showModal();
	                _this2.update();
	            });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = Epoxy.Model.extend({
	    defaults: {
	        topic_id: 5,
	        t_name: '',
	        t_img: null,
	        t_penalty: 0,
	        t_is_free: 1,
	        t_android_product_id: null,
	        t_ios_product_id: null,
	        isBlock: false
	    }
	
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, $, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _userGameModel = __webpack_require__(35);
	
	var userGameModel = _interopRequireDefault(_userGameModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: userGameModel,
	
	    initialize: function initialize() {
	        this.ready = $.Deferred();
	        // this.countUpdate = 1;
	    },
	    forceUpdate: function forceUpdate() {
	        this.startSync();
	    },
	    startSync: function startSync() {
	        var _this = this;
	
	        this.stopSync();
	        // this.countUpdate++;
	        // if(this.countUpdate%3 == 0) {
	        //     this.updateGames();
	        // } else {
	        //     this.updateStatus();
	        // }
	        this.updateGames().done(function () {
	            _this.timer = setTimeout(function () {
	                _this.startSync();
	            }, 10000);
	        });
	    },
	    stopSync: function stopSync() {
	        clearTimeout(this.timer);
	    },
	    updateGames: function updateGames() {
	        var _this2 = this;
	
	        return common.api.getUserGames().done(function (data) {
	            _this2.smartParse(data);
	        });
	    },
	
	    // updateStatus() {
	    //     common.api.getRoomsStatus(this.getRoomsId())
	    //         .done((data)=> {
	    //             if(data && data.answer){
	    //                 _.each(data.answer, (data, id)=> {
	    //                     this.get(id).set(data);
	    //                 }, this)
	    //             }
	    //         })
	    //     var time = parseInt((new Date()).getTime()/1000);
	    //     _.each(this.models, function(model) {
	    //         model.set({currentTime: time});
	    //     })
	    // },
	
	    getRoomsId: function getRoomsId() {
	        return _.map(this.models, function (model) {
	            return model.get('room_id');
	        });
	    },
	    getOpponentId: function getOpponentId(data) {
	        if (data.rr_leader_user_id) {
	            if (common.user.get('id') != data.rr_leader_user_id) {
	                return data.rr_leader_user_id;
	            }
	            return data.rr_slave_user_id;
	        }
	        if (common.user.get('id') != data.r_user_id_opponent) {
	            return data.r_user_id_opponent;
	        }
	        return data.r_user_id_open;
	    },
	    smartParse: function smartParse(data) {
	        var _this3 = this;
	
	        var curTime = parseInt(new Date().getTime() / 1000);
	        _.each(data.answer.user_games, function (user_game) {
	            var gameInfo = _this3.getGameInfo(data, user_game);
	            gameInfo.currentTime = curTime;
	            var model = _this3.where({ room_id: user_game.room_id })[0];
	            if (!model) {
	                _this3.add(gameInfo);
	            } else {
	                model.set(gameInfo);
	            }
	        });
	    },
	    parse: function parse(data) {
	        var _this4 = this;
	
	        if (data && data.answer && data.answer.user_games) {
	            this.reset(_.map(data.answer.user_games, function (user_game) {
	                return _this4.getGameInfo(data, user_game);
	            }));
	        } else {
	            this.reset([]);
	        }
	        this.ready.resolve();
	    },
	    getGameInfo: function getGameInfo(data, user_game) {
	        var rival = data.answer.users_info[this.getOpponentId(user_game)];
	        _.each(rival, function (value, key) {
	            if (key != 'id') {
	                user_game['opponent_' + key] = value;
	            }
	        });
	        var roundInfo = null;
	        if (data.answer.round_results && data.answer.round_results[user_game.room_id]) {
	            roundInfo = data.answer.round_results[user_game.room_id];
	        } else if (data.answer.rooms_results && data.answer.rooms_results[user_game.room_id]) {
	            roundInfo = data.answer.rooms_results[user_game.room_id];
	        }
	        if (roundInfo) {
	            if (roundInfo[this.getOpponentId(user_game)]) {
	                user_game.opponentAnswerSuccess = parseInt(roundInfo[this.getOpponentId(user_game)].right_answers, 10);
	            }
	            if (roundInfo[common.user.get('id')]) {
	                user_game.userAnswerSuccess = parseInt(roundInfo[common.user.get('id')].right_answers, 10);
	            }
	        }
	        user_game.id = user_game.room_id;
	        // user_game.currentTime = parseInt((new Date()).getTime()/1000);
	        return user_game;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(36);
	
	var _defineProperty = _interopRequireDefault(_defineProperty2).default;
	
	var _defaults;
	
	var _roundWidget = __webpack_require__(54);
	
	var roundWidget = _interopRequireDefault(_roundWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Epoxy.Model.extend({
	    defaults: (_defaults = {
	        r_is_active: '',
	        rr_status: '',
	        room_id: '',
	        r_call_to_fight: '',
	        rr_leader_user_id: 0,
	        rr_slave_user_id: 0,
	        opponent_u_login: '',
	        opponent_u_name: null,
	        opponent_u_surname: null,
	        opponent_u_ava: null,
	        userAnswerSuccess: 0,
	        opponentAnswerSuccess: 0,
	        userScore: 0,
	        opponentScore: 0,
	        rr_leader_end_round: null,
	        rr_leader_start_round: null,
	        rr_slave_end_round: null,
	        rr_slave_start_round: null
	    }, _defineProperty(_defaults, 'r_call_to_fight', null), _defineProperty(_defaults, 'r_user_id_opponent', 0), _defineProperty(_defaults, 'currentTime', 0), _defineProperty(_defaults, 'rounds', []), _defaults),
	
	    computeds: {
	        realGame: {
	            deps: ['r_call_to_fight'],
	            get: function get(r_call_to_fight) {
	                return !!(r_call_to_fight == "2" || r_call_to_fight == null);
	            }
	        },
	        isMyRequest: {
	            deps: ['r_call_to_fight', 'r_user_id_opponent'],
	            get: function get(r_call_to_fight, r_user_id_opponent) {
	                return !!(r_call_to_fight == '1' && r_user_id_opponent == common.user.get('id'));
	            }
	        },
	        isISlave: {
	            deps: ['rr_slave_user_id'],
	            get: function get(rr_slave_user_id) {
	                return rr_slave_user_id == common.user.get('id');
	            }
	        },
	
	        isGameClose: {
	            deps: ['r_is_active'],
	            get: function get(r_is_active) {
	                return r_is_active != '1' && r_is_active != '2' && r_is_active != '3';
	            }
	        },
	        isRoundClose: {
	            deps: ['rr_status'],
	            get: function get(rr_status) {
	                return rr_status === '0';
	            }
	        },
	        opponentId: {
	            deps: ['rr_leader_user_id', 'rr_slave_user_id'],
	            get: function get(rr_leader_user_id, rr_slave_user_id) {
	                if (rr_leader_user_id == common.user.get('id')) {
	                    return rr_slave_user_id;
	                }
	                return rr_leader_user_id;
	            }
	        },
	        myTurn: {
	            deps: ['isGameClose', 'isRoundClose', 'rr_slave_user_id', 'rr_slave_end_round', 'rr_leader_end_round'],
	            get: function get(isGameClose, isRoundClose, rr_slave_user_id, rr_slave_end_round, rr_leader_end_round) {
	                //Мой ход в если комната не закрыта, если раунд закончился и я ведомый,
	                // если раунд не закончился и я еще не ответи на вопросы
	                if (isGameClose) {
	                    return false;
	                }
	                if (rr_slave_user_id == common.user.get('id')) {
	                    if (isRoundClose) {
	                        return true;
	                    }
	                    return !rr_slave_end_round && !!rr_leader_end_round;
	                }
	                return !rr_leader_end_round;
	            }
	        },
	        opponentName: {
	            deps: ['opponent_u_name', 'opponent_u_surname', 'opponent_u_login'],
	            get: function get(opponent_u_name, opponent_u_surname, opponent_u_login) {
	                if (opponent_u_name && opponent_u_surname) {
	                    return opponent_u_name + ' ' + opponent_u_surname;
	                }
	                return opponent_u_login || 'Случайный игрок';
	            }
	        },
	        opponentAvatar: {
	            deps: ['opponent_u_ava'],
	            get: function get(opponent_u_ava) {
	                if (opponent_u_ava == null) {
	                    return 0;
	                }
	                var avaInt = parseInt(opponent_u_ava, 10);
	                if (!opponent_u_ava || avaInt < 1 || avaInt > 50 && avaInt < 101 || avaInt > 150) {
	                    return 1;
	                }
	                return avaInt;
	            }
	        },
	        lastTime: {
	            deps: ['currentTime', 'rr_leader_end_round', 'rr_leader_start_round', 'rr_slave_end_round', 'rr_slave_start_round'],
	            get: function get(currentTime, rr_leader_end_round, rr_leader_start_round, rr_slave_end_round, rr_slave_start_round) {
	                var maxTime = Math.max(rr_leader_end_round, rr_leader_start_round, rr_slave_end_round, rr_slave_start_round);
	                var curSecPassed = currentTime - maxTime;
	                if (curSecPassed < 60) {
	                    return curSecPassed + ' сек';
	                }
	                if (curSecPassed < 3600) {
	                    return parseInt(curSecPassed / 60) + ' мин';
	                }
	                if (curSecPassed < 86400) {
	                    return parseInt(curSecPassed / 3600) + ' ч';
	                }
	
	                return parseInt(curSecPassed / 86400) + ' д';
	            }
	        },
	        avatarUserState: {
	            deps: ['userAnswerSuccess', 'opponentAnswerSuccess'],
	            get: function get(userAnswerSuccess, opponentAnswerSuccess) {
	                return this.computeStateAvatar(opponentAnswerSuccess, userAnswerSuccess);
	            }
	        },
	        avatarOpponentState: {
	            deps: ['userAnswerSuccess', 'opponentAnswerSuccess'],
	            get: function get(userAnswerSuccess, opponentAnswerSuccess) {
	                return this.computeStateAvatar(userAnswerSuccess, opponentAnswerSuccess);
	            }
	        }
	
	    },
	    computeStateAvatar: function computeStateAvatar(a, b) {
	        if (a > b) {
	            return 2;
	        }
	        if (a < b) {
	            return 1;
	        }
	        return 3;
	    },
	    compute_smile: function compute_smile(a, b) {
	        if (a - b > 8) return 0;
	        if (b - a > 8) return 17;
	        return 9 - a + b;
	    },
	    updateInfo: function updateInfo() {
	        var _this = this;
	
	        return common.api.getInfoByRoom(this.get('room_id')).done(function (data) {
	            _this.setRoundsInfo(data);
	        });
	    },
	    setRoundsInfo: function setRoundsInfo(data) {
	        var rounds = _.map(data.answer, function (value, key) {
	            return value;
	        });
	        this.set({
	            rounds: rounds
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(37);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(38), __esModule: true };

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(39);
	var $Object = __webpack_require__(31).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(40);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(49), 'Object', {defineProperty: __webpack_require__(45).f});

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(41)
	  , core      = __webpack_require__(31)
	  , ctx       = __webpack_require__(42)
	  , hide      = __webpack_require__(44)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 41 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(43);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(45)
	  , createDesc = __webpack_require__(53);
	module.exports = __webpack_require__(49) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(46)
	  , IE8_DOM_DEFINE = __webpack_require__(48)
	  , toPrimitive    = __webpack_require__(52)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(49) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(47);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(49) && !__webpack_require__(50)(function(){
	  return Object.defineProperty(__webpack_require__(51)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(50)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(47)
	  , document = __webpack_require__(41).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(47);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy, MarionetteEpoxy, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _roundWidget = __webpack_require__(55);
	
	var template = _interopRequireDefault(_roundWidget).default;
	
	__webpack_require__(58);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var roundModel = Epoxy.Model.extend({
	    default: {}
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    tagName: 'li',
	    className: 'round-widget',
	
	    initialize: function initialize(option) {
	        var data = option.data[option.number];
	        var userResults = [];
	        var opponentResults = [];
	        var startRound = data ? true : false;
	        var userAnswerSuccess = 0;
	        var opponentAnswerSuccess = 0;
	        var topicId = 1;
	        if (startRound) {
	            _.each(data.round_results, function (result) {
	                topicId = result.rr_topic_id;
	                if (result.rrr_answerer_user_id == common.user.get('id')) {
	                    userResults.push(result.rrr_is_right_answer);
	                    if (result.rrr_is_right_answer == '1') {
	                        userAnswerSuccess++;
	                    }
	                } else {
	                    opponentResults.push(result.rrr_is_right_answer);
	                    if (result.rrr_is_right_answer == '1') {
	                        opponentAnswerSuccess++;
	                    }
	                }
	            });
	        }
	        this.model = new roundModel({
	            roundNumber: option.number,
	            userResults: userResults,
	            opponentResults: opponentResults,
	            startRound: startRound,
	            roundName: common.topicCollection.get(topicId).get('t_name')
	
	        });
	        //console.log(this.model);
	        this.counts = { userAnswerSuccess: userAnswerSuccess, opponentAnswerSuccess: opponentAnswerSuccess };
	        this.listenTo(this.userGameCollectionView, 'click:game', this.onClickGame);
	    },
	    getCounts: function getCounts() {
	        return this.counts;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(14), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (opponentResults, roundName, roundNumber, startRound, undefined, userResults) {
	buf.push("<div class=\"game-round-name-container\"><span>" + (jade.escape((jade_interp = roundName) == null ? '' : jade_interp)) + "</span></div><div class=\"icon-container\">");
	if ((startRound))
	{
	var num = 0;
	// iterate userResults
	;(function(){
	  var $$obj = userResults;
	  if ('number' == typeof $$obj.length) {
	
	    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
	      var item = $$obj[$index];
	
	num = num + 1.
	if ((item == '0'))
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(56), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score column line-height semaphore\">");
	}
	else
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(57), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score colum line-height semaphore\">");
	}
	    }
	
	  } else {
	    var $$l = 0;
	    for (var $index in $$obj) {
	      $$l++;      var item = $$obj[$index];
	
	num = num + 1.
	if ((item == '0'))
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(56), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score column line-height semaphore\">");
	}
	else
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(57), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score colum line-height semaphore\">");
	}
	    }
	
	  }
	}).call(this);
	
	if ((!userResults.length))
	{
	buf.push("<span>Ваш ход ...</span>");
	}
	}
	buf.push("</div><div class=\"text-container\"><div class=\"game-round-center\"><span class=\"yellow-text\">Раунд " + (jade.escape((jade_interp = roundNumber + 1) == null ? '' : jade_interp)) + "</span></div></div><div class=\"time-container\">");
	if ((startRound))
	{
	if ((!opponentResults.length ))
	{
	buf.push("<span>Играет ...</span>");
	}
	else
	{
	if ((!userResults.length ))
	{
	buf.push("<span>...</span>");
	}
	else
	{
	var num = 0;
	// iterate opponentResults
	;(function(){
	  var $$obj = opponentResults;
	  if ('number' == typeof $$obj.length) {
	
	    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
	      var item = $$obj[$index];
	
	num = num + 1.
	if ((item == '0'))
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(56), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score column line-height semaphore\">");
	}
	else
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(57), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score colum line-height semaphore\">");
	}
	    }
	
	  } else {
	    var $$l = 0;
	    for (var $index in $$obj) {
	      $$l++;      var item = $$obj[$index];
	
	num = num + 1.
	if ((item == '0'))
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(56), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score column line-height semaphore\">");
	}
	else
	{
	buf.push("<img" + (jade.attr("src", __webpack_require__(57), true, true)) + (jade.attr("data-sem-id", "" + (num) + "", true, true)) + (jade.attr("data-round-id", "" + (roundNumber + 1) + "", true, true)) + " class=\"icon-score colum line-height semaphore\">");
	}
	    }
	
	  }
	}).call(this);
	
	}
	}
	}
	buf.push("</div>");}.call(this,"opponentResults" in locals_for_with?locals_for_with.opponentResults:typeof opponentResults!=="undefined"?opponentResults:undefined,"roundName" in locals_for_with?locals_for_with.roundName:typeof roundName!=="undefined"?roundName:undefined,"roundNumber" in locals_for_with?locals_for_with.roundNumber:typeof roundNumber!=="undefined"?roundNumber:undefined,"startRound" in locals_for_with?locals_for_with.startRound:typeof startRound!=="undefined"?startRound:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined,"userResults" in locals_for_with?locals_for_with.userResults:typeof userResults!=="undefined"?userResults:undefined));;return buf.join("");
	}

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "images/red_light.d47fe2.png";

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "images/green_light.a93c35.png";

/***/ },
/* 58 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 59 */,
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _stringify = __webpack_require__(29);
	
	var _JSON$stringify = _interopRequireDefault(_stringify).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Epoxy.Model.extend({
	    defaults: {},
	    initialize: function initialize() {
	        this.set(this.getData());
	        this.listenTo(this, 'change', this.setData);
	    },
	    getData: function getData() {
	        if (!window.localStorage) {
	            return {};
	        }
	        return JSON.parse(window.localStorage.getItem('appData'));
	    },
	    setData: function setData() {
	        window.localStorage.setItem('appData', _JSON$stringify(this.toJSON()));
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, $, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _personModel = __webpack_require__(62);
	
	var personModel = _interopRequireDefault(_personModel).default;
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: personModel,
	
	    initialize: function initialize() {
	        this.ready = $.Deferred();
	        this.listenTo(this, 'remove', this.onRemoveItem);
	        this.listenTo(this, 'add', this.onAddItem);
	        this.listenTo(this, 'change:open', this.onChangeOpen);
	    },
	    onRemoveItem: function onRemoveItem(model) {
	        common.api.friend.remove(model.get('id'));
	    },
	    onAddItem: function onAddItem(model) {
	        var _this = this;
	
	        common.api.friend.add(model.get('id')).fail(function (err) {
	            new infoModal({ message: err.text }).showModal();
	        }).always(function () {
	            _this.update();
	        });
	    },
	    update: function update() {
	        var _this2 = this;
	
	        common.api.friend.get().done(function (data) {
	            _this2.parse(data);
	            _this2.ready.resolve();
	        });
	    },
	    parse: function parse(data) {
	        var _this3 = this;
	
	        if (data && data.answer && data.answer.user_friends) {
	            (function () {
	                var number_rate = 0;
	                _this3.reset(_.map(data.answer.user_friends, function (friendInfo) {
	                    friendInfo.user_id = friendInfo.id;
	                    number_rate += 1;
	                    friendInfo.u_number_rate = number_rate;
	                    return friendInfo;
	                }));
	            })();
	        } else {
	            this.reset([]);
	        }
	    },
	    onChangeOpen: function onChangeOpen(model, open) {
	        if (open) {
	            var openModels = this.where({ open: true });
	            _.each(openModels, function (item) {
	                if (item.get('user_id') != model.get('user_id')) {
	                    item.set({ open: false });
	                }
	            });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _defineProperty2 = __webpack_require__(36);
	
	var _defineProperty = _interopRequireDefault(_defineProperty2).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Epoxy.Model.extend({
	    defaults: {
	        id: 0,
	        is_friend: false,
	        is_blacklist: false,
	        u_login: '',
	        u_ava: 0,
	        open: false,
	        u_win: 0,
	        u_draw: 0,
	        u_lose: 0,
	        u_rate: 0,
	        u_number_rate: 0,
	        u_tname: '',
	        u_surname: '',
	        topics_answers: '',
	        request: false,
	        request_room_id: ''
	    },
	    computeds: _defineProperty({
	        avatar: {
	            deps: ['u_ava'],
	            get: function get(u_ava) {
	                var avaInt = parseInt(u_ava, 10);
	                if (!u_ava || avaInt < 1 || avaInt > 50 && avaInt < 101 || avaInt > 150) {
	                    return 1;
	                }
	                return avaInt;
	            }
	        },
	        is_me: {
	            deps: ['id'],
	            get: function get(id) {
	                return id == common.user.get('id');
	            }
	        },
	        u_all_games: {
	            deps: ['u_win', 'u_lose', 'u_draw'],
	            get: function get(u_win, u_lose, u_draw) {
	                return +u_win + +u_lose + +u_draw;
	            }
	        },
	        u_login_comp: {
	            deps: ['u_login', 'u_name', 'u_surname'],
	            get: function get(u_login, u_name, u_surname) {
	                if (u_name && u_surname) {
	                    return u_name + ' ' + u_surname;
	                }
	                return u_login;
	            }
	        }
	    }, 'is_me', {
	        deps: ['id'],
	        get: function get(id) {
	            return id == common.user.get('id');
	        }
	    }),
	
	    initialize: function initialize() {
	        this.listenTo(common.friendCollection, 'add reset remove', this.onChangeFriendCollection.bind(this));
	        this.onChangeFriendCollection();
	        this.listenTo(common.blackListCollection, 'add reset remove', this.onChangeBlacklistCollection.bind(this));
	        this.onChangeBlacklistCollection();
	    },
	    onChangeFriendCollection: function onChangeFriendCollection() {
	        if (common.friendCollection.get(this.get('id'))) {
	            this.set({ is_friend: true });
	        } else {
	            this.set({ is_friend: false });
	        }
	    },
	    onChangeBlacklistCollection: function onChangeBlacklistCollection() {
	        if (common.blackListCollection.get(this.get('id'))) {
	            this.set({ is_blacklist: true });
	        } else {
	            this.set({ is_blacklist: false });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(10)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, $, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _personModel = __webpack_require__(62);
	
	var personModel = _interopRequireDefault(_personModel).default;
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: personModel,
	
	    initialize: function initialize() {
	        this.ready = $.Deferred();
	        this.listenTo(this, 'remove', this.onRemoveItem);
	        this.listenTo(this, 'add', this.onAddItem);
	    },
	    onRemoveItem: function onRemoveItem(model) {
	        common.api.blackList.remove(model.get('id'));
	    },
	    onAddItem: function onAddItem(model) {
	        var _this = this;
	
	        common.api.blackList.add(model.get('id')).fail(function (err) {
	            new infoModal({ message: err.text }).showModal();
	        }).always(function () {
	            _this.update();
	        });
	    },
	    update: function update() {
	        var _this2 = this;
	
	        common.api.blackList.get().done(function (data) {
	            _this2.parse(data);
	            _this2.ready.resolve();
	        }).fail(function (err) {
	            console.log(err.text);
	        });
	    },
	    parse: function parse(data) {
	        if (data && data.answer && data.answer.user_black_list) {
	            this.reset(_.map(data.answer.user_black_list, function (blackListInfo) {
	                // blackListInfo.id = blackListInfo.ubl_target_user_id;
	                return blackListInfo;
	            }));
	        } else {
	            this.reset([]);
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = Epoxy.Model.extend({
	    defaults: {
	        auth: false,
	        sessionKey: '',
	        sessionValue: '',
	        server_time: '',
	        u_ava: null,
	        u_bg: null,
	        u_email: '',
	        u_fb_id: null,
	        u_is_buy_game: null,
	        u_last_premium_top_timer: null,
	        u_last_topic_timer: null,
	        u_last_trial_top_timer: null,
	        u_login: '',
	        u_lose: '',
	        u_name: null,
	        u_penalty_scores: '',
	        u_rate: '',
	        u_see_my_top50_rating: null,
	        u_surname: null,
	        u_total_answers: '',
	        u_total_right_answers: '',
	        u_vk_id: null,
	        u_win: '',
	        u_rate_pos: '',
	        u_allGame: '',
	        topics_answers: [],
	        u_id: null
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, $, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _personModel = __webpack_require__(62);
	
	var last20GamesModel = _interopRequireDefault(_personModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: last20GamesModel,
	
	    initialize: function initialize() {
	        this.ready = $.Deferred();
	    },
	    parse: function parse(data) {
	        var _this = this;
	
	        if (data && data.answer) {
	            (function () {
	                var number_rate = 0;
	                _this.reset(_.map(data.answer, function (value) {
	                    value.u_login = value.enemy_login;
	                    value.u_win = value.rr_is_winner_cnt;
	                    value.u_draw = value.rr_is_draw_cnt;
	                    value.u_lose = value.rr_is_looser_cnt;
	                    value.u_rate = value.enemy_rate;
	                    value.u_ava = value.enemy_ava;
	                    number_rate += 1;
	                    value.u_number_rate = number_rate;
	                    //value.id = value.enemy_id;
	                    return value;
	                }));
	            })();
	        } else {
	            this.reset([]);
	        }
	        this.ready.resolve();
	    },
	    update: function update() {
	        var _this2 = this;
	
	        common.api.getLast20Games().done(function (data) {
	            _this2.parse(data);
	        }).fail(function (err) {
	            // console.log(err.text)
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 66 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, common, $) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _AppLayout = __webpack_require__(248);
	
	var AppLayout = _interopRequireDefault(_AppLayout).default;
	
	__webpack_require__(262);
	
	var _selectTopicModal = __webpack_require__(265);
	
	var selectTopicModal = _interopRequireDefault(_selectTopicModal).default;
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	var _indexPage = __webpack_require__(270);
	
	var indexPage = _interopRequireDefault(_indexPage).default;
	
	var _gamesPage = __webpack_require__(281);
	
	var gamesPage = _interopRequireDefault(_gamesPage).default;
	
	var _settingsPage = __webpack_require__(291);
	
	var settingsPage = _interopRequireDefault(_settingsPage).default;
	
	var _changeAvatarPage = __webpack_require__(299);
	
	var changeAvatarPage = _interopRequireDefault(_changeAvatarPage).default;
	
	var _newGamePage = __webpack_require__(307);
	
	var newGamePage = _interopRequireDefault(_newGamePage).default;
	
	var _searchUserPage = __webpack_require__(319);
	
	var searchUserPage = _interopRequireDefault(_searchUserPage).default;
	
	var _last20gamesPage = __webpack_require__(324);
	
	var last20gamesPage = _interopRequireDefault(_last20gamesPage).default;
	
	var _gamePage = __webpack_require__(328);
	
	var gamePage = _interopRequireDefault(_gamePage).default;
	
	var _profilePage = __webpack_require__(336);
	
	var profilePage = _interopRequireDefault(_profilePage).default;
	
	var _gameResultPage = __webpack_require__(348);
	
	var gameResultPage = _interopRequireDefault(_gameResultPage).default;
	
	var _questionsPage = __webpack_require__(354);
	
	var questionsPage = _interopRequireDefault(_questionsPage).default;
	
	var _blackListPage = __webpack_require__(365);
	
	var blackListPage = _interopRequireDefault(_blackListPage).default;
	
	var _settingsPageAcc = __webpack_require__(369);
	
	var accountSettingPage = _interopRequireDefault(_settingsPageAcc).default;
	
	var _statisticsPage = __webpack_require__(377);
	
	var statisticsPage = _interopRequireDefault(_statisticsPage).default;
	
	var _playerRankingsPage = __webpack_require__(381);
	
	var playerRankingsPage = _interopRequireDefault(_playerRankingsPage).default;
	
	var _authPage = __webpack_require__(386);
	
	var authPage = _interopRequireDefault(_authPage).default;
	
	var _registrationPage = __webpack_require__(392);
	
	var registrationPage = _interopRequireDefault(_registrationPage).default;
	
	var _blockTopicsPage = __webpack_require__(396);
	
	var blockTopicsPage = _interopRequireDefault(_blockTopicsPage).default;
	
	var _signinPage = __webpack_require__(403);
	
	var signinPage = _interopRequireDefault(_signinPage).default;
	
	var _neighborsPage = __webpack_require__(407);
	
	var neighborsPage = _interopRequireDefault(_neighborsPage).default;
	
	var _restorePasswordPage = __webpack_require__(412);
	
	var restorePasswordPage = _interopRequireDefault(_restorePasswordPage).default;
	
	var _questionCollection = __webpack_require__(363);
	
	var questionCollection = _interopRequireDefault(_questionCollection).default;
	
	var _requestPage = __webpack_require__(416);
	
	var requestPage = _interopRequireDefault(_requestPage).default;
	
	var _questionPreviewPage = __webpack_require__(420);
	
	var questionPreviewPage = _interopRequireDefault(_questionPreviewPage).default;
	
	var _chat = __webpack_require__(424);
	
	var Chat = _interopRequireDefault(_chat).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Marionette.Object.extend({
	    initialize: function initialize() {
	        this.appLayout = new AppLayout();
	        this.listenTo(common.user, 'change:auth', this.onChangeAuth);
	    },
	    startGameByRoom: function startGameByRoom(rival_id, room_id) {
	        var _this = this;
	
	        common.api.createOpponentRoom(null, rival_id, room_id).done(function (data) {
	            _this.goToQuestions(data);
	        }).fail(function (data) {
	            if (data.code == "00017") {
	                //Выберите тему
	                new selectTopicModal().showModal().done(function (topic) {
	                    common.api.createOpponentRoom(topic.get('topic_id'), rival_id, room_id).done(function (data) {
	                        _this.goToQuestions(data);
	                    }).fail(function (data) {
	                        new infoModal({ message: data.text }).showModal();
	                    });
	                });
	            } else {
	                new infoModal({ message: data.text }).showModal();
	            }
	        });
	    },
	    startRandomGame: function startRandomGame() {
	        var _this2 = this;
	
	        common.api.checkRandomGame().done(function (data) {
	            _this2.goToQuestions(data);
	        }).fail(function (data) {
	            if (data.code == "00017") {
	                //Выберите тему
	                new selectTopicModal().showModal().done(function (topic) {
	                    common.api.createRandomRoom(topic.get('topic_id')).done(function (data) {
	                        _this2.goToQuestions(data);
	                    }).fail(function (data) {
	                        new infoModal({ message: data.text }).showModal();
	                    });
	                });
	            } else {
	                new infoModal({ message: data.text }).showModal();
	            }
	        });
	    },
	    startGame: function startGame() {
	        var _this3 = this;
	
	        var rival_id = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	        var apiMethod = 'checkRandomGame';
	        var apiPostMethod = 'createRandomRoom';
	        if (rival_id) {
	            apiMethod = 'startGameById';
	            apiPostMethod = 'createOpponentRoom';
	        }
	        common.api[apiMethod](rival_id).done(function (data) {
	            if (data.round_id) {
	                _this3.goToQuestions(data);
	            } else {
	                new infoModal({ message: 'Заявка противнику отправлена!' }).showModal();
	            }
	        }).fail(function (data) {
	            if (data.code == "00017") {
	                //Выберите тему
	                new selectTopicModal().showModal().done(function (topic) {
	                    common.api[apiPostMethod](topic.get('topic_id'), rival_id).done(function (data) {
	                        _this3.goToQuestions(data);
	                    }).fail(function (data) {
	                        new infoModal({ message: data.text }).showModal();
	                    });
	                });
	            } else {
	                new infoModal({ message: data.text }).showModal();
	            }
	        });
	    },
	    goToQuestions: function goToQuestions(data) {
	        common.router.navigate('questions/' + data.answer.room_id, { trigger: false });
	        // let questions = new questionCollection();
	        // questions.parse(data);
	        this.showInsidePage(questionsPage, {
	            // questions: questions,
	            roomId: data.answer.room_id
	        });
	        // roundId: data.answer.round_id,
	        common.userGameCollection.updateGames();
	    },
	    showModal: function showModal(modal) {
	        return this.appLayout.showModal(modal);
	    },
	    showOutsidePage: function showOutsidePage(pageConstructor) {
	        if (!common.user.get('auth')) {
	            this.appLayout.showPage(pageConstructor);
	            return;
	        }
	        common.router.navigate('index', { trigger: true });
	    },
	    showInsidePage: function showInsidePage(pageConstructor, data) {
	        if (this.isAuthWhichAction()) {
	            this.appLayout.showPage(pageConstructor, data);
	        }
	    },
	    isAuthWhichAction: function isAuthWhichAction() {
	        if (!common.user.get('auth')) {
	            common.router.navigate('auth', { trigger: true });
	            return false;
	        }
	        return true;
	    },
	    onChangeAuth: function onChangeAuth(user, auth) {
	        if (!auth) {
	            Chat.logout();
	            document.cookie = common.user.get('sessionKey') + "=";
	
	            $('body').removeClass('auth');
	            common.topicCollection.reset([]);
	            common.userGameCollection.parse([]);
	            common.userGameCollection.stopSync();
	            common.friendCollection.reset([]);
	            return;
	        }
	        document.cookie = common.user.get('sessionKey') + "=" + common.user.get('sessionValue');
	
	        $('body').addClass('auth');
	        common.api.getUserGames().done(function (data) {
	            common.topicCollection.parse(data);
	            common.userGameCollection.parse(data);
	            common.userGameCollection.startSync();
	        });
	        common.friendCollection.update();
	        common.blackListCollection.update();
	        common.last20GamesCollection.update();
	
	        Chat.login(common.user.get('id'), common.user.get('sessionKey'), common.user.get('sessionValue'), common.storageModel.get('authDeviceId'));
	    },
	    onShowIndex: function onShowIndex() {
	        this.showInsidePage(indexPage);
	    },
	    onShowUserGames: function onShowUserGames() {
	        this.showInsidePage(gamesPage);
	    },
	    onShowSettings: function onShowSettings() {
	        this.showInsidePage(settingsPage);
	    },
	    onShowChangeAvatar: function onShowChangeAvatar() {
	        this.showInsidePage(changeAvatarPage);
	    },
	    onShowNewGame: function onShowNewGame() {
	        this.showInsidePage(newGamePage);
	    },
	    onShowSearchUser: function onShowSearchUser() {
	        this.showInsidePage(searchUserPage);
	    },
	    onShowLast20games: function onShowLast20games() {
	        this.showInsidePage(last20gamesPage);
	    },
	    onShowRequestPage: function onShowRequestPage() {
	        this.showInsidePage(requestPage);
	    },
	    onShowGamePage: function onShowGamePage(roomId) {
	        var _this4 = this;
	
	        if (this.isAuthWhichAction()) {
	            common.userGameCollection.ready.done(function () {
	                _this4.appLayout.showPage(gamePage, { room_id: roomId });
	            });
	        }
	    },
	    onShowProfilePage: function onShowProfilePage(userId) {
	        this.showInsidePage(profilePage, { userId: userId });
	    },
	    onShowGameResultPage: function onShowGameResultPage(roomId) {
	        var _this5 = this;
	
	        if (this.isAuthWhichAction()) {
	            common.userGameCollection.ready.done(function () {
	                _this5.appLayout.showPage(gameResultPage, { room_id: roomId });
	            });
	        }
	    },
	    onShowQuestionsPage: function onShowQuestionsPage(roomId) {
	        this.showInsidePage(questionsPage, { roomId: roomId });
	    },
	    onShowQuestionPreviewPage: function onShowQuestionPreviewPage(params) {
	        this.showInsidePage(questionPreviewPage, { params: params });
	    },
	    onShowBlackList: function onShowBlackList() {
	        this.showInsidePage(blackListPage);
	    },
	    onShowPlayerRankings: function onShowPlayerRankings() {
	        this.showInsidePage(playerRankingsPage);
	    },
	    onShowNeighbors: function onShowNeighbors() {
	        this.showInsidePage(neighborsPage);
	    },
	    onShowAccountSetting: function onShowAccountSetting() {
	        this.showInsidePage(accountSettingPage);
	    },
	    onShowStatistics: function onShowStatistics() {
	        this.showInsidePage(statisticsPage);
	    },
	    onShowBlockTopics: function onShowBlockTopics() {
	        this.showInsidePage(blockTopicsPage);
	    },
	    onShowRestorePassword: function onShowRestorePassword() {
	        this.showOutsidePage(restorePasswordPage);
	    },
	    onShowAuth: function onShowAuth() {
	        this.showOutsidePage(authPage);
	    },
	    onShowRegistration: function onShowRegistration() {
	        this.showOutsidePage(registrationPage);
	    },
	    onShowSignin: function onShowSignin() {
	        this.showOutsidePage(signinPage);
	    },
	    onShowPersonalChat: function onShowPersonalChat(rivalId) {
	        var _this6 = this;
	
	        if (this.isAuthWhichAction()) {
	            Chat.login(common.user.get('id'), common.user.get('sessionKey'), common.user.get('sessionValue'), common.storageModel.get('authDeviceId')).then(function (Chat) {
	                return Chat.getRoomForOpponent(rivalId);
	            }).then(function (room) {
	                common.headerModel.set({ backPath: 'profile/' + rivalId });
	                _this6.showInsidePage(Chat.RoomWidget, {
	                    model: room,
	                    user: Chat.user
	                });
	            }).catch(function (err) {
	                return new infoModal({ message: err }).showModal();
	            });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(10), __webpack_require__(7)))

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, common, $) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _AppLayout = __webpack_require__(249);
	
	var template = _interopRequireDefault(_AppLayout).default;
	
	var _headerWidget = __webpack_require__(250);
	
	var headerWidget = _interopRequireDefault(_headerWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var pageRegion = Marionette.Region.extend({
	    el: '#page-container',
	    attachHtml: function attachHtml(view) {
	        this.el.appendChild(view.el);
	    }
	});
	var modalRegion = Marionette.Region.extend({
	    el: '#modal-container',
	    attachHtml: function attachHtml(view) {
	        this.el.appendChild(view.el);
	    }
	});
	
	exports.default = Marionette.LayoutView.extend({
	    template: template,
	
	    initialize: function initialize() {
	        var header = new headerWidget({
	            el: '#header-container'
	        });
	        header.render();
	        common.headerModel = header.model;
	    },
	
	
	    regions: {
	        pageRegion: pageRegion,
	        footer: '#footer-container',
	        modalRegion: modalRegion
	    },
	
	    showModal: function showModal(modal) {
	        var async = $.Deferred();
	        this.modalRegion.show(modal);
	        var $el = $('.modal-overflow', modal.$el);
	        $el.width();
	        $el.addClass('show');
	        async.always(function () {
	            $el.removeClass('show');
	            setTimeout(function () {
	                modal.destroy();
	            }, 300);
	        });
	        return async;
	    },
	    showPage: function showPage(pageConstructor) {
	        var _this = this;
	
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	        clearTimeout(this.showPageTimer);
	        if (this.curPageView) {
	            this.curPageView.destroy();
	        }
	        this.curPageView = this.pageRegion.currentView;
	        this.newPageView = new pageConstructor(options);
	        if (this.curPageView) {
	            this.curPageView.$el.removeClass('show');
	            this.showPageTimer = setTimeout(function () {
	                _this.curPageView.destroy();
	            }, 500);
	        }
	        this.pageRegion.show(this.newPageView, { preventDestroy: true });
	        this.newPageView.$el.width();
	        this.newPageView.$el.addClass('show');
	        if (this.newPageView.onVisible) {
	            this.newPageView.onVisible();
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(10), __webpack_require__(7)))

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	;return buf.join("");
	}

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, Epoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _headerWidget = __webpack_require__(251);
	
	var template = _interopRequireDefault(_headerWidget).default;
	
	__webpack_require__(252);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	
	    ui: {
	        settingsButton: '[data-js-settings]',
	        statisticsButton: '[data-js-statistics]',
	        backButton: '[data-js-back]',
	        chatButton: '[data-js-chat]'
	    },
	
	    events: {
	        'click @ui.settingsButton': 'onClickSettings',
	        'click @ui.statisticsButton': 'onClickStatistics',
	        'click @ui.backButton': 'onClickBack',
	        'click @ui.chatButton': 'onClickChatButton'
	    },
	    bindings: {
	        '@ui.backButton': 'classes: {hide: not(backPath)}',
	        '@ui.chatButton': 'classes: {hide: not(isGamePage)}',
	        '[data-js-content-header]': 'classes: {hide: hideMode}',
	        ':el': 'classes: {notAuth: not(auth)}'
	    },
	    initialize: function initialize() {
	        var _this = this;
	
	        this.model = new Epoxy.Model({
	            backPath: null,
	            hideMode: false,
	            notAction: false,
	            isGamePage: false,
	            id_opponent: 0
	        });
	        this.viewModel = common.user;
	        this.epoxify();
	
	        document.addEventListener("backbutton", function () {
	            _this.onClickBack();
	        }, false);
	    },
	    onClickSettings: function onClickSettings() {
	        common.router.navigate('settings');
	    },
	    onClickStatistics: function onClickStatistics() {
	        common.router.navigate('statistics');
	    },
	    onClickBack: function onClickBack() {
	        if (!this.model.get('notAction')) {
	            if (common.modalOpen) {
	                common.modalOpen.cancel();
	            } else {
	                // Backbone.history.history.back();
	                common.router.navigate(this.model.get('backPath'));
	            }
	        }
	        common.headerModel.set({ isGamePage: false });
	    },
	    onClickChatButton: function onClickChatButton() {
	        common.router.navigate('chat/' + this.model.get("id_opponent"), { trigger: true });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(15), __webpack_require__(10)))

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div data-js-content-header class=\"content\"><div class=\"not-auth-label\"><p>БРОСЬ ВЫЗОВ ДРУЗЬЯМ.</p><p>КТО ИЗ ВАС ПОБЕДИТ?</p></div><div class=\"icons-left\"><div data-js-back class=\"icon back\"></div><div data-js-settings class=\"icon settings\"></div><div data-js-statistics class=\"icon statistics\"></div><div data-js-chat class=\"icon chat hide\"><div data-js-chat-counter class=\"counter\">12</div></div></div></div>");;return buf.join("");
	}

/***/ },
/* 252 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 263 */,
/* 264 */,
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, Marionette, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _selectTopicModal = __webpack_require__(266);
	
	var template = _interopRequireDefault(_selectTopicModal).default;
	
	__webpack_require__(267);
	
	var _topicItem = __webpack_require__(269);
	
	var topicTemplate = _interopRequireDefault(_topicItem).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TopicItemView = MarionetteEpoxy.View.extend({
	    className: 'line',
	    template: topicTemplate,
	    events: {
	        'click .btn': 'onClickEl'
	    },
	    bindings: {
	        ':el': 'classes: {hide: isBlock}'
	    },
	    initialize: function initialize() {
	        this.epoxify();
	    },
	    onClickEl: function onClickEl() {
	        this.trigger('select:item', this.model);
	    }
	});
	var TopicBlockItemView = MarionetteEpoxy.View.extend({
	    className: 'line',
	    template: topicTemplate,
	    bindings: {
	        ':el': 'classes: {hide: not(isBlock)}',
	        '[data-js-topic-item]': 'classes: {blocked: isBlock}'
	    },
	    events: {
	        'click [data-js-topic-item]': 'onCLickItem'
	    },
	    initialize: function initialize() {
	        this.epoxify();
	    },
	    onCLickItem: function onCLickItem() {
	        this.trigger('select:item', this.model);
	    }
	});
	
	var TopicCollectionView = Marionette.CollectionView.extend({
	    childEvents: {
	        'select:item': 'onSelectTopic'
	    },
	    onSelectTopic: function onSelectTopic(view, topic) {
	        this.trigger('select:item', topic);
	    }
	});
	
	exports.default = Modal.extend({
	    template: template,
	    className: 'select-topic-modal full-modal',
	
	    regions: {
	        topicContainer: '[data-js-topic-container]',
	        topicBlockContainer: '[data-js-topic-blocked-container]'
	    },
	
	    initialize: function initialize() {
	        this.topicCollectionView = new TopicCollectionView({
	            childView: TopicItemView,
	            collection: common.topicCollection
	        });
	        this.listenTo(this.topicCollectionView, 'select:item', this.onSelectTopic);
	        this.topicBlockCollectionView = new TopicCollectionView({
	            childView: TopicBlockItemView,
	            collection: common.topicCollection
	        });
	        this.listenTo(this.topicBlockCollectionView, 'select:item', this.onSelectBlockTopic);
	    },
	    onRender: function onRender() {
	        this.topicContainer.show(this.topicCollectionView);
	        this.topicBlockContainer.show(this.topicBlockCollectionView);
	    },
	    onSelectTopic: function onSelectTopic(topic) {
	        this.ok(topic);
	    },
	    onSelectBlockTopic: function onSelectBlockTopic() {
	        this.cancel();
	        common.router.navigate('blockTopics');
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(4), __webpack_require__(10)))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><div class=\"container\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Выберите тему</h3></div><div data-js-topic-container></div><br><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Заблокированные темы</h3></div><div data-js-topic-blocked-container></div></div></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");;return buf.join("");
	}

/***/ },
/* 267 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 268 */,
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (t_name) {
	buf.push("<div data-js-topic-item class=\"btn col-xs-12\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><span>" + (jade.escape((jade_interp = t_name) == null ? '' : jade_interp)) + "</span></div></div><div class=\"btn-arrow\"></div></div>");}.call(this,"t_name" in locals_for_with?locals_for_with.t_name:typeof t_name!=="undefined"?t_name:undefined));;return buf.join("");
	}

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, Backbone, _, common, Epoxy) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _indexPage = __webpack_require__(271);
	
	var template = _interopRequireDefault(_indexPage).default;
	
	__webpack_require__(272);
	
	var _userGameItem = __webpack_require__(274);
	
	var userGameTemplate = _interopRequireDefault(_userGameItem).default;
	
	var _userGameCollection = __webpack_require__(275);
	
	var userGameCollection = _interopRequireDefault(_userGameCollection).default;
	
	var _tipsWidget = __webpack_require__(276);
	
	var tipsWidget = _interopRequireDefault(_tipsWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UserGameItemView = MarionetteEpoxy.View.extend({
	    template: userGameTemplate,
	    tagName: 'li',
	    className: 'game-item',
	    ui: {},
	    events: {
	        'click': 'onClickItem'
	    },
	    bindings: {
	        '[data-js-status]': 'text: rr_status',
	        '[data-js-user-icon]': 'setAvatarAttr: opponentAvatar, setAvatarStateAttr: avatarOpponentState',
	        '[data-js-user-answer]': 'text: userAnswerSuccess',
	        '[data-js-opponent-answer]': 'text: opponentAnswerSuccess',
	        '[data-js-opponent-name]': 'text: opponentName',
	        '[data-js-my-turn]': 'classes: {hide: not(myTurn)}',
	        '[data-js-game-finish]': 'classes: {hide: not(isGameClose)}',
	        '[data-js-time-passed]': 'text: lastTime, classes: {hide: isGameClose}'
	    },
	    bindingHandlers: {
	        setAvatarAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        },
	        setAvatarStateAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-status': value });
	            }
	        }
	    },
	    initialize: function initialize() {
	        this.epoxify();
	    },
	    onClickItem: function onClickItem() {
	        this.trigger('click:game', this.model);
	    }
	});
	var UserGameCollectionView = MarionetteEpoxy.CompositeView.extend({
	    className: '',
	    template: userGameCollection,
	    childView: UserGameItemView,
	    childViewContainer: '[data-js-user-game-list]',
	
	    templateHelpers: function templateHelpers() {
	        return {
	            name: this.name,
	            type: this.type
	        };
	    },
	    events: {
	        'click [data-js-close-games]': 'onClickCloseGames'
	    },
	
	    childEvents: {
	        'click:game': 'onClickGame'
	    },
	    initialize: function initialize(options) {
	        this.collection = new Backbone.Collection();
	        this.name = options.name;
	        this.type = options.type;
	        this.mainCollection = options.mainCollection;
	        this.filterCollection = options.filterCollection;
	        this.listenTo(this.mainCollection, 'all', this.onChangeCollection);
	        this.onChangeCollection();
	    },
	    onChangeCollection: function onChangeCollection() {
	        var models = [];
	        _.each(this.mainCollection.models, function (model) {
	            if (this.filterCollection(model)) {
	                models.push(model);
	            }
	        }, this);
	        this.collection.reset(models);
	        if (!models.length) {
	            this.$el.addClass('hide');
	        } else {
	            this.$el.removeClass('hide');
	        }
	    },
	    onClickGame: function onClickGame(view, game) {
	        this.trigger('click:game', game);
	    },
	    onClickCloseGames: function onClickCloseGames() {
	        var _this = this;
	
	        new answerModal({ message: 'Скрыть все завершенные игры?' }).showModal().done(function () {
	            var currentRoomsId = _.map(_this.collection.models, function (model) {
	                return model.get('room_id');
	            });
	            common.api.hideRooms(currentRoomsId).always(function () {
	                common.userGameCollection.remove(currentRoomsId);
	            });
	        });
	    }
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'index-page page',
	
	    ui: {
	        'buttonNewGame': '[data-js-new-game]',
	        'buttonGames': '[data-js-games]',
	        'gameContainer': '[data-js-game-container]'
	    },
	    events: {
	        'click @ui.buttonNewGame': 'onClickNewGame',
	        'click @ui.buttonGames': 'onClickGames',
	        'click [data-js-request-game]': 'onClickRequests'
	    },
	    bindings: {
	        '[data-js-user-avatar]': 'setAttr: avatar',
	        '[data-js-user-name]': 'text: userName',
	        '[data-js-gemes-count]': 'text: userGamesCount, classes: {hide: not(userGamesCount)}',
	        '@ui.buttonGames': 'classes: {hide: not(userGamesCount)}',
	        '[data-js-request-counter]': 'text: requestCount',
	        '[data-js-request-game]': 'classes: {hide: not(requestCount)}'
	    },
	    bindingHandlers: {
	        setAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        }
	    },
	    regions: {
	        // tipsWidget: '[data-js-tips-widget]'
	    },
	
	    initialize: function initialize() {
	        this.model = common.user;
	        this.viewModel = new Epoxy.Model({
	            userGamesCount: 0,
	            requestCount: 0
	        });
	        this.userGameCollectionView = new UserGameCollectionView({
	            filterCollection: function filterCollection(child, index, collection) {
	                return child.get('myTurn') && !child.get('isGameClose') && (child.get('r_call_to_fight') == "2" || child.get('r_call_to_fight') == null);
	            },
	            mainCollection: common.userGameCollection,
	            name: 'Наш ход'
	        });
	
	        this.listenTo(common.userGameCollection, 'all', this.onChangeUserGames);
	        this.listenTo(this.userGameCollectionView, 'click:game', this.onClickGame);
	        this.onChangeUserGames();
	        this.epoxify();
	        common.headerModel.set({ backPath: null });
	    },
	    onRender: function onRender() {
	        // this.tipsWidget.show(new tipsWidget);
	        this.ui.gameContainer.append(this.userGameCollectionView.$el);
	        this.userGameCollectionView.render();
	    },
	
	    onChangeUserGames: function onChangeUserGames() {
	        var requests = [];
	        var realGame = [];
	        _.each(common.userGameCollection.models, function (model) {
	            if (model.get('isMyRequest')) {
	                requests.push(model);
	            }
	            if (model.get('realGame')) {
	                realGame.push(model);
	            }
	        });
	        this.viewModel.set({
	            requestCount: requests.length,
	            userGamesCount: realGame.length
	        });
	    },
	    onClickNewGame: function onClickNewGame() {
	        common.router.navigate('newgame', { trigger: true });
	    },
	    onClickGames: function onClickGames() {
	        common.router.navigate('userGames', { trigger: true });
	    },
	    onClickRequests: function onClickRequests() {
	        common.router.navigate('requests', { trigger: true });
	    },
	    onClickGame: function onClickGame(game) {
	        if (game.get('isGameClose')) {
	            common.router.navigate('gameResult/' + game.get('room_id'), { trigger: true });
	        } else {
	            common.router.navigate('game/' + game.get('room_id'), { trigger: true });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(5), __webpack_require__(6), __webpack_require__(10), __webpack_require__(15)))

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"container\"><div class=\"row\"><div class=\"col-xs-10 col-xs-offset-1 user-info\"><div data-js-user-avatar data-user-icon-status=\"0\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><div class=\"block-name\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><p class=\"yellow-text\">В сети как</p><h2 data-js-user-name class=\"yellow-text\"></h2></div></div></div></div></div><div class=\"line\"><div data-js-new-game class=\"btn col-xs-12\">Новая игра</div></div><div class=\"line\"><div data-js-request-game class=\"btn col-xs-12\">Заявки на битву<div data-js-request-counter class=\"counter\"></div></div></div><!--.line--><!--  .col-xs-12--><!--    h3.text-header.yellow-text Все подсказки--><!--.line--><!--  .btn.col-xs-12.tips-block(data-js-tips-widget)--><div class=\"line m-t-20\"><div data-js-games class=\"btn col-xs-12\">Все игры<div data-js-gemes-count class=\"counter\">55</div></div></div><div data-js-game-container></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 272 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 273 */,
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (opponent_u_login) {
	buf.push("<div class=\"icon-container\"><div data-js-user-icon class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"><div data-js-chat-counter class=\"counter-chat\">12</div></div></div></div><div class=\"text-container\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><p data-js-my-turn>Ваш ход против:</p><p data-js-game-finish>Ваша игра против:</p><h2>" + (jade.escape((jade_interp = opponent_u_login) == null ? '' : jade_interp)) + "</h2><p>Вы &nbsp;<span data-js-user-answer class=\"text-bold\"></span>&nbsp; - &nbsp;<span data-js-opponent-answer class=\"text-bold\"></span>&nbsp;&nbsp;<span data-js-opponent-name></span></p></div></div></div><div class=\"time-container\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><p data-js-time-passed></p></div></div></div>");}.call(this,"opponent_u_login" in locals_for_with?locals_for_with.opponent_u_login:typeof opponent_u_login!=="undefined"?opponent_u_login:undefined));;return buf.join("");
	}

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (name, type) {
	buf.push("<div class=\"line game-container\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">" + (jade.escape((jade_interp = name) == null ? '' : jade_interp)) + "");
	if ((type == 'game-closed'))
	{
	buf.push("<span data-js-close-games class=\"right-text\">&times;</span>");
	}
	buf.push("</h3><div class=\"row\"><ul data-js-user-game-list class=\"list-container\"></ul></div></div></div>");}.call(this,"name" in locals_for_with?locals_for_with.name:typeof name!=="undefined"?name:undefined,"type" in locals_for_with?locals_for_with.type:typeof type!=="undefined"?type:undefined));;return buf.join("");
	}

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _tipsWidget = __webpack_require__(277);
	
	var template = _interopRequireDefault(_tipsWidget).default;
	
	__webpack_require__(278);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'tips-widget',
	
	    initialize: function initialize() {
	        this.render();
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"tips-overflow\"><div class=\"tips-item\"><div class=\"tips-icon\"></div></div><div class=\"tips-item\"><div class=\"tips-icon disabled\"><div class=\"counter\">5</div></div></div><div class=\"tips-item\"><div class=\"tips-icon disabled\"></div></div><div class=\"tips-item\"><div class=\"tips-icon\"><div class=\"counter\">235</div></div></div><div class=\"tips-item\"><div class=\"tips-icon\"></div></div></div><div data-js-get-tips class=\"btn color-orange size-small\">Приобрести</div>");;return buf.join("");
	}

/***/ },
/* 278 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 279 */,
/* 280 */,
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, Backbone, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _gamesPage = __webpack_require__(282);
	
	var template = _interopRequireDefault(_gamesPage).default;
	
	__webpack_require__(283);
	
	var _userGameItem = __webpack_require__(285);
	
	var userGameTemplate = _interopRequireDefault(_userGameItem).default;
	
	var _userGameCollection = __webpack_require__(286);
	
	var userGameCollection = _interopRequireDefault(_userGameCollection).default;
	
	var _answerModal = __webpack_require__(287);
	
	var answerModal = _interopRequireDefault(_answerModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UserGameItemView = MarionetteEpoxy.View.extend({
	    template: userGameTemplate,
	    tagName: 'li',
	    className: 'game-item',
	    ui: {},
	    events: {
	        'click': 'onClickItem'
	    },
	    bindings: {
	        '[data-js-status]': 'text: rr_status',
	        '[data-js-user-icon]': 'setAvatarAttr: opponentAvatar, setAvatarStateAttr: avatarOpponentState',
	        '[data-js-user-answer]': 'text: userAnswerSuccess',
	        '[data-js-opponent-answer]': 'text: opponentAnswerSuccess',
	        '[data-js-opponent-name]': 'text: opponentName',
	        '[data-js-my-turn]': 'classes: {hide: not(myTurn)}',
	        '[data-js-game-finish]': 'classes: {hide: not(isGameClose)}',
	        '[data-js-time-passed]': 'text: lastTime, classes: {hide: isGameClose}'
	    },
	    bindingHandlers: {
	        setAvatarAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        },
	        setAvatarStateAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-status': value });
	            }
	        }
	    },
	    initialize: function initialize() {
	        this.epoxify();
	    },
	    onClickItem: function onClickItem() {
	        this.trigger('click:game', this.model);
	    }
	});
	
	var UserGameCollectionView = MarionetteEpoxy.CompositeView.extend({
	    className: '',
	    template: userGameCollection,
	    childView: UserGameItemView,
	    childViewContainer: '[data-js-user-game-list]',
	
	    templateHelpers: function templateHelpers() {
	        return {
	            name: this.name,
	            type: this.type
	        };
	    },
	    events: {
	        'click [data-js-close-games]': 'onClickCloseGames'
	    },
	
	    childEvents: {
	        'click:game': 'onClickGame'
	    },
	    initialize: function initialize(options) {
	        this.collection = new Backbone.Collection();
	        this.name = options.name;
	        this.type = options.type;
	        this.mainCollection = options.mainCollection;
	        this.filterCollection = options.filterCollection;
	        this.listenTo(this.mainCollection, 'add remove reset', this.onChangeCollection);
	        this.onChangeCollection();
	    },
	    onChangeCollection: function onChangeCollection() {
	        var models = [];
	        _.each(this.mainCollection.models, function (model) {
	            if (this.filterCollection(model)) {
	                models.push(model);
	            }
	        }, this);
	        this.collection.reset(models);
	        if (!models.length) {
	            this.$el.addClass('hide');
	        } else {
	            this.$el.removeClass('hide');
	        }
	    },
	    onClickGame: function onClickGame(view, game) {
	        this.trigger('click:game', game);
	    },
	    onClickCloseGames: function onClickCloseGames() {
	        var _this = this;
	
	        new answerModal({ message: 'Скрыть все завершенные игры?' }).showModal().done(function () {
	            var currentRoomsId = _.map(_this.collection.models, function (model) {
	                return model.get('room_id');
	            });
	            common.api.hideRooms(currentRoomsId).always(function () {
	                common.userGameCollection.remove(currentRoomsId);
	            });
	        });
	    }
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'games-page page',
	
	    ui: {
	        'gameContainer': '[data-js-game-container]'
	    },
	
	    initialize: function initialize() {
	        this.userGameCollectionView = new UserGameCollectionView({
	            filterCollection: function filterCollection(child, index, collection) {
	                return child.get('myTurn') && !child.get('isGameClose') && (child.get('r_call_to_fight') == "2" || child.get('r_call_to_fight') == null);
	            },
	            mainCollection: common.userGameCollection,
	            name: 'Наш ход'
	        });
	        this.userGameCollectionView2 = new UserGameCollectionView({
	            filterCollection: function filterCollection(child, index, collection) {
	                return !child.get('myTurn') && !child.get('isGameClose') && (child.get('r_call_to_fight') == "2" || child.get('r_call_to_fight') == null);
	            },
	            mainCollection: common.userGameCollection,
	            name: 'Ждем'
	        });
	        this.userGameCollectionView3 = new UserGameCollectionView({
	            filterCollection: function filterCollection(child, index, collection) {
	                return child.get('isGameClose') && (child.get('r_call_to_fight') == "2" || child.get('r_call_to_fight') == null);
	            },
	            mainCollection: common.userGameCollection,
	            name: 'Завершенные игры',
	            type: 'game-closed'
	        });
	        this.listenTo(this.userGameCollectionView, 'click:game', this.onClickGame);
	        this.listenTo(this.userGameCollectionView2, 'click:game', this.onClickGame);
	        this.listenTo(this.userGameCollectionView3, 'click:game', this.onClickGame);
	        common.headerModel.set({ backPath: 'index' });
	    },
	    onRender: function onRender() {
	        this.ui.gameContainer.append(this.userGameCollectionView.$el);
	        this.ui.gameContainer.append(this.userGameCollectionView2.$el);
	        this.ui.gameContainer.append(this.userGameCollectionView3.$el);
	        this.userGameCollectionView.render();
	        this.userGameCollectionView2.render();
	        this.userGameCollectionView3.render();
	    },
	    onClickGame: function onClickGame(game) {
	        if (game.get('isGameClose')) {
	            common.router.navigate('gameResult/' + game.get('room_id'), { trigger: true });
	        } else {
	            common.router.navigate('game/' + game.get('room_id'), { trigger: true });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(5), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div data-js-game-container></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 283 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 284 */,
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (opponent_u_login) {
	buf.push("<div class=\"icon-container\"><div data-js-user-icon class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div></div><div class=\"text-container\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><p data-js-my-turn>Ваш ход против:</p><p data-js-game-finish>Ваша игра против:</p><h2>" + (jade.escape((jade_interp = opponent_u_login) == null ? '' : jade_interp)) + "</h2><p>Вы &nbsp;<span data-js-user-answer class=\"text-bold\"></span>&nbsp; - &nbsp;<span data-js-opponent-answer class=\"text-bold\"></span>&nbsp;&nbsp;<span data-js-opponent-name></span></p></div></div></div><div class=\"time-container\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><p data-js-time-passed></p></div></div></div>");}.call(this,"opponent_u_login" in locals_for_with?locals_for_with.opponent_u_login:typeof opponent_u_login!=="undefined"?opponent_u_login:undefined));;return buf.join("");
	}

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (name, type) {
	buf.push("<div class=\"line game-container\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">" + (jade.escape((jade_interp = name) == null ? '' : jade_interp)) + "");
	if ((type == 'game-closed'))
	{
	buf.push("<span data-js-close-games class=\"right-text\">&times;</span>");
	}
	buf.push("</h3><div class=\"row\"><ul data-js-user-game-list class=\"list-container\"></ul></div></div></div>");}.call(this,"name" in locals_for_with?locals_for_with.name:typeof name!=="undefined"?name:undefined,"type" in locals_for_with?locals_for_with.type:typeof type!=="undefined"?type:undefined));;return buf.join("");
	}

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _answerModal = __webpack_require__(288);
	
	var template = _interopRequireDefault(_answerModal).default;
	
	__webpack_require__(289);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Modal.extend({
	    template: template,
	    className: 'answer-modal',
	
	    initialize: function initialize() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        this.options = options;
	    },
	    serializeData: function serializeData() {
	        return { message: this.options.message };
	    },
	
	
	    ui: {
	        'buttonOk': '[data-js-ok]',
	        'buttonCancel': '[data-js-cancel]'
	    },
	
	    events: {
	        'click @ui.buttonOk': 'onClickOk',
	        'click @ui.buttonCancel': 'onClickCancel'
	    },
	
	    onClickOk: function onClickOk() {
	        this.ok();
	    },
	    onClickCancel: function onClickCancel() {
	        this.cancel();
	    }
	});

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (message) {
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><div class=\"container\"><div class=\"row\"><p class=\"col-xs-12\">" + (jade.escape((jade_interp = message) == null ? '' : jade_interp)) + "</p></div><div class=\"row\"><button data-js-cancel class=\"btn col-xs-4 col-xs-offset-4\">Отмена</button><button data-js-ok class=\"btn col-xs-4\">Оk</button></div></div></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");}.call(this,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined));;return buf.join("");
	}

/***/ },
/* 289 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 290 */,
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _buyModal = __webpack_require__(292);
	
	var buyModal = _interopRequireDefault(_buyModal).default;
	
	var _infoModal = __webpack_require__(12);
	
	var infoModel = _interopRequireDefault(_infoModal).default;
	
	var _settingsPage = __webpack_require__(296);
	
	var template = _interopRequireDefault(_settingsPage).default;
	
	__webpack_require__(297);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'settings-page page',
	
	    ui: {
	        'buyButton': '[data-js-buy]',
	        'accountSetting': '[data-js-account-settings]',
	        'buttonChangeAvatar': '[data-js-change-avatar]',
	        'buttonBlackList': '[data-js-black-list]',
	        'buttonLogout': '[data-js-logout]',
	        'buttonBlockTopics': '[data-js-blockTopics]'
	    },
	    events: {
	        'click @ui.buyButton': 'onClickBuy',
	        'click @ui.accountSetting': 'onClickAccountSetting',
	        'click @ui.buttonBlackList': 'onClickBlackList',
	        'click @ui.buttonLogout': 'onClickLogout',
	        'click @ui.buttonBlockTopics': 'onClickBlockTopics',
	        'click @ui.buttonChangeAvatar': 'onClickChangeAvatar'
	    },
	    bindings: {},
	    initialize: function initialize(options) {
	        common.headerModel.set({ backPath: 'index' });
	    },
	    onClickBuy: function onClickBuy() {
	        new buyModal().showModal().done(function () {
	            inAppPurchase.getProducts(['pdd.buypro']).then(function (products) {
	                var product = products.find(function (product) {
	                    return product.productId === 'pdd.buypro';
	                });
	                if (product) {
	                    return inAppPurchase.buy(product.productId);
	                }
	            }).then(function (data) {
	                return inAppPurchase.consume(data.productType, data.receipt, data.signature);
	            }).then(function () {
	                console.log('Successfully purchased');
	            }).fail(function (err) {
	                new infoModal({ message: '' + err }).showModal();
	            });
	        });
	    },
	    onClickAccountSetting: function onClickAccountSetting() {
	        common.router.navigate('accountSetting', { trigger: true });
	    },
	    onClickBlackList: function onClickBlackList() {
	        common.router.navigate('blackList', { trigger: true });
	    },
	    onClickLogout: function onClickLogout() {
	        common.user.logout();
	    },
	    onClickBlockTopics: function onClickBlockTopics() {
	        common.router.navigate('blockTopics', { trigger: true });
	    },
	    onClickChangeAvatar: function onClickChangeAvatar() {
	        common.router.navigate('changeAvatar', { trigger: true });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _buyModal = __webpack_require__(293);
	
	var template = _interopRequireDefault(_buyModal).default;
	
	__webpack_require__(294);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Modal.extend({
	  template: template,
	  className: 'buy-modal modal',
	
	  ui: {
	    'buttonOk': '[data-js-ok]',
	    'buttonCancel': '[data-js-cancel]'
	  },
	
	  events: {
	    'click @ui.buttonOk': 'onClickOk',
	    'click @ui.buttonCancel': 'onClickCancel'
	  },
	
	  onClickOk: function onClickOk() {
	    this.ok();
	  },
	  onClickCancel: function onClickCancel() {
	    this.cancel();
	  }
	});

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><p>Хочешь, чтобы совсем не было рекламы? Приобретай премиум версию игры, в которой ее нет. Также в премиум версии без ограничений ты можешь вызывать соперников на поединок, блокировать до 5 тем, играть с соседями по рейтингу, смотреть свой рейтинг, менять аватар и фон.</p><div class=\"form-container\"><div data-js-cancel class=\"form-button\">Назад</div><div data-js-ok class=\"form-button\">Купить</div></div></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");;return buf.join("");
	}

/***/ },
/* 294 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 295 */,
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><div data-js-account-settings class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-settings\"></div>Настройки аккаунта<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-change-avatar class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-change-avatar\"></div>Изменить аватар<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-change-diz class=\"btn col-xs-12 color-dark hide\"><div class=\"button-icon icon-change-themes\"></div>Поменять фон<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-buy class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-buy-pro\"></div>Купить премиум версию<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-black-list class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-user-blacklist\"></div>Черный список<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-blockTopics class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-block-subject\"></div>Заблокировать тему<div class=\"btn-arrow\"></div></div></div><br><br><br><div class=\"line\"><button data-js-buy class=\"btn col-xs-12\"><span>Отказаться от рекламы</span></button></div><div class=\"line\"><button data-js-logout class=\"btn col-xs-12\"><span>Выйти</span></button></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 297 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 298 */,
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common, $) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _changeAvatarPage = __webpack_require__(300);
	
	var template = _interopRequireDefault(_changeAvatarPage).default;
	
	__webpack_require__(301);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'change-avatar-page page bg-blur',
	
	    ui: {
	        buttonMen: '[data-js-men]',
	        buttonWomen: '[data-js-women]',
	        avatars: '[data-js-avatars]',
	        avatarItems: '.avatars .user-icon'
	    },
	    events: {
	        'click @ui.buttonMen': 'onClickTab',
	        'click @ui.buttonWomen': 'onClickTab',
	        'click @ui.avatarItems': 'onClickAvatars'
	    },
	    bindings: {
	        '[data-js-user-avatar]': 'setAttr: avatar',
	        '[data-js-user-name]': 'text: userName'
	    },
	    bindingHandlers: {
	        setAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        }
	    },
	    initialize: function initialize() {
	        this.model = common.user;
	        this.listenTo(this.model, 'change:u_ava', this.onChangeAva);
	        this.epoxify();
	        common.headerModel.set({ backPath: 'settings' });
	    },
	    onRender: function onRender() {
	        this.onChangeAva();
	    },
	    onChangeAva: function onChangeAva() {
	        var curAva = this.model.get('u_ava');
	        if (curAva > 100) {
	            this.ui.avatars.attr('data-state', 2);
	        } else {
	            this.ui.avatars.attr('data-state', 1);
	        }
	        $('.avatars .active', this.$el).removeClass('active');
	        $('.avatars .user-icon[data-user-icon-id=' + curAva + ']', this.$el).addClass('active');
	    },
	    onClickTab: function onClickTab(e) {
	        var $tagret = $(e.currentTarget);
	        if (!$tagret.hasClass('active')) {
	            $('.tab-icon.active', this.$el).removeClass('active');
	            $tagret.addClass('active');
	            this.ui.avatars.attr('data-state', $tagret.data('state'));
	        }
	    },
	    onClickAvatars: function onClickAvatars(e) {
	        common.user.set({ u_ava: $(e.currentTarget).data('user-icon-id') });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10), __webpack_require__(7)))

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><div class=\"col-xs-12 user-info\"><div data-js-user-avatar data-user-icon-status=\"0\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><div class=\"block-name\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><p class=\"yellow-text\">В сети как</p><h2 data-js-user-name class=\"yellow-text\"></h2></div></div></div></div></div><div class=\"line\"><div class=\"col-xs-12 text-center\"><div data-js-men data-state=\"1\" class=\"tab-icon men active\"></div><div data-js-women data-state=\"2\" class=\"tab-icon women\"></div></div></div><div class=\"line\"><div data-js-avatars data-state=\"1\" class=\"avatars\"><div class=\"col-xs-6\">");
	for (var i=1; i<=50; i++) {
	{
	buf.push("<div" + (jade.attr("data-user-icon-id", "" + (i) + "", true, true)) + " data-user-icon-status=\"0\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div>");
	}
	}
	buf.push("</div><div class=\"col-xs-6\">");
	for (var i=101; i<=150; i++) {
	buf.push("<div" + (jade.attr("data-user-icon-id", "" + (i) + "", true, true)) + " data-user-icon-status=\"0\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div>");
	}
	buf.push("</div></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 301 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _newGamePage = __webpack_require__(308);
	
	var template = _interopRequireDefault(_newGamePage).default;
	
	__webpack_require__(309);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FriendCollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'new-game-page page',
	
	    ui: {
	        'buttonSearch': '[data-js-search-rival]',
	        'buttonRandom': '[data-js-random-rival]',
	        'buttonLast20Games': '[data-js-last20-games]',
	        'friendsHeader': '[data-js-friends-header]'
	    },
	    events: {
	        'click @ui.buttonSearch': 'onClickSearch',
	        'click @ui.buttonLast20Games': 'onClickLast20Games',
	        'click @ui.buttonRandom': 'onClickRandom'
	    },
	    bindings: {},
	    regions: {
	        'friendsContainer': '[data-js-friend-list]'
	    },
	
	    initialize: function initialize() {
	        this.model = common.user;
	        this.friendCollection = new FriendCollectionView({
	            collection: common.friendCollection
	        });
	        this.listenTo(common.friendCollection, 'all', this.onChangeFriendCollection);
	        this.epoxify();
	        common.headerModel.set({ backPath: 'index' });
	    },
	    onChangeFriendCollection: function onChangeFriendCollection() {
	        if (common.friendCollection.models.length) {
	            this.ui.friendsHeader.removeClass('hide');
	        } else {
	            this.ui.friendsHeader.addClass('hide');
	        }
	    },
	    onRender: function onRender() {
	        this.onChangeFriendCollection();
	        this.friendsContainer.show(this.friendCollection);
	    },
	    onClickSearch: function onClickSearch() {
	        common.router.navigate('searchuser', { trigger: true });
	    },
	    onClickLast20Games: function onClickLast20Games() {
	        common.router.navigate('last20games', { trigger: true });
	    },
	    onClickRandom: function onClickRandom() {
	        common.appController.startRandomGame();
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"container\"><div class=\"line\"><div data-js-search-rival class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-search\"></div>Найти соперника<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-new-game-fb class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-facebook\"></div>Новая игра FB<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-new-game-vk class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-vk-icon\"></div>Новая игра VK<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-random-rival class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-random\"></div>Случайный соперник<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-last20-games class=\"btn col-xs-12\">20 последних игр<div class=\"btn-arrow\"></div></div></div><div data-js-friends-header class=\"line\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Список друзей</h3></div></div><div class=\"line\"><div data-js-friend-list class=\"col-xs-12 p-l-0 p-r-0\"></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 309 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 310 */,
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _userWidget = __webpack_require__(312);
	
	var template = _interopRequireDefault(_userWidget).default;
	
	__webpack_require__(313);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    tagName: 'li',
	    className: 'user-widget',
	    events: {
	        'click [data-js-label]': 'onClickLabel',
	        'click [data-js-start-game]': 'onClickStartGame',
	        'click [data-js-detail]': 'onClickDetail',
	        'click [data-js-fail-game]': 'onClickFailGame',
	        'click [data-js-done-game]': 'onClickDoneGame'
	    },
	
	    bindings: {
	        '[data-js-user-icon]': 'setAvatarAttr: avatar',
	        '[data-js-login]': 'text: u_login_comp',
	        ':el': 'classes: {open: open, "no-number": not(u_number_rate), "no-rating": not(u_rate)}',
	        '[data-js-lose]': 'text: u_lose',
	        '[data-js-all-games]': 'text: u_all_games',
	        '[data-js-draw]': 'text: u_draw',
	        '[data-js-win]': 'text: u_win',
	        '[data-js-score]': 'text: u_rate',
	        '[data-js-number]': 'text: u_number_rate',
	        '[data-js-detail]': 'classes: {hide: is_me}',
	        '[data-js-start-game]': 'classes: {hide: any(is_me, is_blacklist, request)}',
	        '[data-js-fail-game]': 'classes: {hide: not(request)}',
	        '[data-js-done-game]': 'classes: {hide: not(request)}'
	    },
	    bindingHandlers: {
	        setAvatarAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        },
	        setAvatarStateAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-status': value });
	            }
	        }
	    },
	
	    initialize: function initialize() {
	        this.render();
	        this.epoxify();
	    },
	    onClickFailGame: function onClickFailGame() {
	        common.api.game.answerFight(this.model.get('request_room_id'), 3).done(function (data) {
	            console.dir(data);
	        });
	    },
	    onClickDoneGame: function onClickDoneGame() {
	        var _this = this;
	
	        common.api.game.answerFight(this.model.get('request_room_id'), 2).done(function () {
	            common.appController.startGameByRoom(_this.model.get('id'), _this.model.get('request_room_id'));
	        });
	    },
	    onClickLabel: function onClickLabel() {
	        this.model.set({ open: !this.model.get('open') });
	    },
	    onClickStartGame: function onClickStartGame() {
	        common.appController.startGame(this.model.get('id'));
	    },
	    onClickDetail: function onClickDetail() {
	        common.router.navigate('profile/' + this.model.get('id'));
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div data-js-label class=\"user-label\"><p data-js-number class=\"number\">&nbsp</p><div data-js-user-icon data-user-icon-status=\"0\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><p data-js-login class=\"user-name text-ellipsis\"></p><p data-js-score class=\"score text-ellipsis\">&nbsp</p><div class=\"arrow\"></div></div><div class=\"inside-block\"><div class=\"icon-block\"><div class=\"icon games\"></div><span>Игр</span><h2 data-js-all-games>0</h2></div><div class=\"icon-block\"><div class=\"icon dones\"></div><span>Побед</span><h2 data-js-win>0</h2></div><div class=\"icon-block\"><div class=\"icon draws\"></div><span>Ничьих</span><h2 data-js-draw>0</h2></div><div class=\"icon-block\"><div class=\"icon fails\"></div><span>Поражений</span><h2 data-js-lose>0</h2></div><div class=\"buttons-block\"><div data-js-detail class=\"btn size-small color-yellow\">Подробнее</div><div data-js-start-game class=\"btn size-small color-light\">Сразиться</div><div data-js-fail-game class=\"btn size-small color-red\">Отказаться</div><div data-js-done-game class=\"btn size-big color-light\">Сразиться</div></div></div>");;return buf.join("");
	}

/***/ },
/* 313 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, MarionetteEpoxy, _, common, $) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _searchUserPage = __webpack_require__(320);
	
	var template = _interopRequireDefault(_searchUserPage).default;
	
	__webpack_require__(321);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	var _rivalCollection = __webpack_require__(323);
	
	var rivalCollection = _interopRequireDefault(_rivalCollection).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RivalCollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'search-user-page page',
	
	    ui: {
	        searchStr: '[data-js-user-name]'
	    },
	    events: {
	        'keyup @ui.searchStr': 'onChangeSearch'
	    },
	    bindings: {},
	
	    regions: {
	        'resultContainer': '[data-js-rival-list]'
	    },
	
	    initialize: function initialize() {
	        this.rivalCollection = new rivalCollection();
	        this.rivalCollectionView = new RivalCollectionView({
	            collection: this.rivalCollection
	        });
	        this.debounceChangeSearch = _.debounce(this.changeSearch.bind(this), 1000);
	        this.epoxify();
	        common.headerModel.set({ backPath: 'newgame' });
	    },
	    onRender: function onRender() {
	        this.resultContainer.show(this.rivalCollectionView);
	    },
	    onChangeSearch: function onChangeSearch(e) {
	        this.debounceChangeSearch($(e.currentTarget).val());
	    },
	    changeSearch: function changeSearch(str) {
	        this.rivalCollection.setSearch(str);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(14), __webpack_require__(6), __webpack_require__(10), __webpack_require__(7)))

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><label class=\"input col-xs-12\"><span>Введите имя для поиска</span><input type=\"text\" data-js-user-name></label></div><div class=\"line result-container\"><div data-js-rival-list class=\"col-xs-12 p-l-0 p-r-0\"></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 321 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 322 */,
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _personModel = __webpack_require__(62);
	
	var personModel = _interopRequireDefault(_personModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: personModel,
	
	    initialize: function initialize() {
	        this.search = '';
	        this.load = false;
	        this.listenTo(this, 'change:open', this.onChangeOpen);
	    },
	    setSearch: function setSearch(str) {
	        this.search = str;
	        this.loadResult();
	    },
	    loadResult: function loadResult() {
	        this.page = 0;
	        this.addData();
	    },
	    addData: function addData() {
	        var _this = this;
	
	        if (!this.load) {
	            this.load = true;
	            common.api.getUsersByLogin(this.search, this.page).done(function (data) {
	                _this.parse(data);
	            }).fail(function () {
	                _this.reset();
	            }).always(function () {
	                _this.load = false;
	            });
	        }
	    },
	    parse: function parse(data) {
	        this.reset(_.map(data.answer, function (item) {
	            item.id = item.user_id;
	            return item;
	        }));
	    },
	    onChangeOpen: function onChangeOpen(model, open) {
	        if (open) {
	            var openModels = this.where({ open: true });
	            _.each(openModels, function (item) {
	                if (item.get('user_id') != model.get('user_id')) {
	                    item.set({ open: false });
	                }
	            });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _last20GamesPage = __webpack_require__(325);
	
	var template = _interopRequireDefault(_last20GamesPage).default;
	
	__webpack_require__(326);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FriendCollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'last20-game-page page',
	
	    bindings: {},
	    regions: {
	        'friendsContainer': '[data-js-friend-list]'
	    },
	
	    initialize: function initialize() {
	        this.model = common.user;
	        this.friendCollection = new FriendCollectionView({
	            collection: common.last20GamesCollection
	        });
	        this.epoxify();
	        common.headerModel.set({ backPath: 'newgame' });
	    },
	    onRender: function onRender() {
	        this.friendsContainer.show(this.friendCollection);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"container\"><div class=\"line\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">20 последних игр</h3></div></div><div class=\"line\"><div data-js-friend-list class=\"col-xs-12 p-l-0 p-r-0\"></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 326 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 327 */,
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _gamePage = __webpack_require__(329);
	
	var template = _interopRequireDefault(_gamePage).default;
	
	__webpack_require__(330);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	var _questionHistoryModal = __webpack_require__(332);
	
	var questionModal = _interopRequireDefault(_questionHistoryModal).default;
	
	var _roundWidget = __webpack_require__(54);
	
	var roundWidget = _interopRequireDefault(_roundWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'game-page page bg-blur',
	
	    ui: {
	        'buttonPlay': '[data-js-play]',
	        'buttonReplay': '[data-js-replay]',
	        'buttonSurrender': '[data-js-surrender]',
	        'buttonResults': '[data-js-results]',
	        'roundsInfo': '[data-js-rounds-info]',
	        'buttonAddFriend': '[data-js-add-friend]',
	        'buttonOpponentIcon': '[data-js-opponent-icon]',
	        'buttonUserIcon': '[data-js-user-icon]'
	    },
	    events: {
	        'click @ui.buttonPlay': 'onClickButtonPlay',
	        'click @ui.buttonReplay': 'onClickButtonPlay',
	        'click @ui.buttonSurrender': 'onClickSurrender',
	        'click @ui.buttonResults': 'onClickButtonResults',
	        'click @ui.buttonAddFriend': 'onClickAddFriend',
	        'click @ui.buttonOpponentIcon': 'onClickOpponentIcon',
	        'click @ui.buttonUserIcon': 'onClickUserIcon',
	        'click .semaphore': 'onClickSemaphore'
	
	    },
	
	    computeds: {
	        userName: function userName() {
	            return common.user.get('login');
	        }
	    },
	    bindings: {
	        '[data-js-game-finish-block]': 'classes: {hide: not(isGameClose)}',
	        '[data-js-game-process-block]': 'classes: {hide: isGameClose}',
	        '[data-js-user-name]': 'text: userName',
	        '[data-js-opponent-name]': 'text: opponentName',
	        '[data-js-user-score]': 'text: userAnswerSuccess',
	        '[data-js-opponent-score]': 'text: opponentAnswerSuccess',
	        '[data-js-user-icon]': 'setAvatarAttr: avatar, setAvatarStateAttr: avatarUserState',
	        '[data-js-opponent-icon]': 'setAvatarAttr: opponentAvatar, setAvatarStateAttr: avatarOpponentState',
	        '@ui.buttonPlay': 'classes: {disabled: not(myTurn)}'
	    },
	    bindingHandlers: {
	        setAvatarAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        },
	        setAvatarStateAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-status': value });
	            }
	        }
	    },
	
	    initialize: function initialize(options) {
	        this.roundInfoWidgets = [];
	        this.roomId = options.room_id;
	        this.model = common.userGameCollection.get(this.roomId);
	        this.viewModel = common.user;
	        if (!this.model) {
	            setTimeout(function () {
	                common.router.navigate('index', { trigger: true });
	            });
	            return false;
	        }
	
	        common.headerModel.set({ id_opponent: this.model.get('r_user_id_opponent') });
	        if (this.model.get('r_user_id_opponent')) {
	            common.headerModel.set({ isGamePage: true });
	        }
	
	        this.epoxify();
	    },
	    onChangeMyTurn: function onChangeMyTurn() {
	        if (!this.model.get("myTurn")) {
	            common.headerModel.set({ backPath: 'userGames' });
	        } else {
	            common.headerModel.set({ backPath: null });
	        }
	    },
	
	    /*onBeforeDestroy(){
	        common.headerModel.set({isGamePage: false});
	    },*/
	
	    onRender: function onRender() {
	        var _this = this;
	
	        this.model.updateInfo().done(function () {
	            _this.listenTo(_this.model, 'change:rounds', _this.renderRoundsInfo);
	            _this.listenTo(_this.model, 'change:myTurn', _this.onChangeMyTurn);
	            _this.onChangeMyTurn();
	            _this.renderRoundsInfo();
	            if (_this.model) {
	                _this.checkFriend();
	            }
	        });
	    },
	    checkFriend: function checkFriend() {
	        var self = this;
	        common.friendCollection.ready.done(function () {
	            if (common.friendCollection.get(self.model.get('opponentId'))) {
	                self.ui.buttonAddFriend.addClass('disabled');
	            }
	        });
	    },
	    onClickAddFriend: function onClickAddFriend() {
	        common.friendCollection.add({ id: this.model.get('opponentId') });
	        this.checkFriend();
	    },
	    renderRoundsInfo: function renderRoundsInfo() {
	        var rounds = this.model.get('rounds');
	        var userAnswerSuccess = 0;
	        var opponentAnswerSuccess = 0;
	        this.clearRoundInfo();
	        for (var i = 0; i <= rounds.length - 1; i++) {
	            var roundView = new roundWidget({ data: rounds, number: i });
	            this.roundInfoWidgets.push(roundView);
	            this.ui.roundsInfo.append(roundView.$el);
	            roundView.render();
	            userAnswerSuccess += roundView.getCounts().userAnswerSuccess;
	            if (roundView.model.get('userResults').length > 0) opponentAnswerSuccess += roundView.getCounts().opponentAnswerSuccess;
	        }
	        this.model.set({
	            userAnswerSuccess: userAnswerSuccess,
	            opponentAnswerSuccess: opponentAnswerSuccess
	        });
	    },
	    clearRoundInfo: function clearRoundInfo() {
	        while (this.roundInfoWidgets.length) {
	            this.roundInfoWidgets.pop().destroy();
	        }
	    },
	    onClickButtonPlay: function onClickButtonPlay() {
	        if (this.model.get('isGameClose')) {
	            common.appController.startGame(this.model.get('opponentId'));
	            return;
	        }
	        common.router.navigate('questions/' + this.roomId, { trigger: true, replace: true });
	    },
	    onClickSurrender: function onClickSurrender() {
	        common.api.surrenderGame(this.roomId).done(function () {
	            common.userGameCollection.forceUpdate();
	        }).fail(function (data) {
	            new infoModal({ message: data.text }).showModal();
	        });
	    },
	    onClickButtonResults: function onClickButtonResults() {
	        common.router.navigate('gameResult/' + this.roomId, { trigger: true });
	    },
	    onClickOpponentIcon: function onClickOpponentIcon() {
	        common.router.navigate('profile/' + this.model.get('opponentId'), { trigger: true });
	    },
	    onClickUserIcon: function onClickUserIcon() {
	        common.router.navigate('profile/' + common.user.get('id'), { trigger: true });
	    },
	    onClickSemaphore: function onClickSemaphore(e) {
	        /* var semid = $(e.currentTarget).data('sem-id');
	         var roundid = $(e.currentTarget).data('round-id');
	         common.api.room.question_history(73,144,31)
	             .done(function(data) {
	                 console.log(data);
	                 (new questionModal()).showModal();
	             })
	             .fail(function(data) {
	                 console.log(data);
	                 (new infoModal({message: data.text})).showModal();
	             })*/
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line main-block\"><div class=\"half-block\"><div data-js-user-icon class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><h2 data-js-user-name class=\"yellow-text\"></h2></div><div class=\"half-block\"><div data-js-opponent-icon class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><h2 data-js-opponent-name class=\"yellow-text\"></h2></div><div class=\"score-block yellow-text\"><span data-js-user-score></span>&nbsp;:&nbsp;<span data-js-opponent-score></span></div></div><div class=\"row\"><ul data-js-rounds-info class=\"list-container\"></ul></div><div data-js-game-finish-block class=\"line\"><div class=\"btn-set col-xs-12 p-l-0 p-r-0\"><div data-js-results class=\"btn col-xs-4\">Счет</div><div data-js-replay class=\"btn col-xs-4\">Реванш</div><div data-js-add-friend class=\"btn col-xs-4\">+ Друг</div></div></div><div data-js-game-process-block class=\"line\"><div class=\"btn-set col-xs-12 p-l-0 p-r-0\"><div data-js-surrender class=\"btn col-xs-4\">Сдаться</div><div data-js-play class=\"btn col-xs-4\">Играть</div><div data-js-add-friend class=\"btn col-xs-4\">+ Друг</div></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 330 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 331 */,
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _questionHistoryModal = __webpack_require__(333);
	
	var template = _interopRequireDefault(_questionHistoryModal).default;
	
	__webpack_require__(334);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Modal.extend({
	    template: template,
	    className: 'person-info-modal full-modal bg-blur',
	    bindings: {},
	
	    initialize: function initialize() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        /*_.each(this.model.get('topics_answers'), function(answer) {
	            var topicItem = common.topicCollection.where({id: answer.topic_id})[0];
	            if(topicItem) {
	                answer.topic_name = topicItem.get('t_name');
	            }
	            console.dir(answer);
	        });*/
	
	        this.epoxify();
	    }
	});

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><div class=\"container\"></div></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");;return buf.join("");
	}

/***/ },
/* 334 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 335 */,
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _profilePage = __webpack_require__(337);
	
	var template = _interopRequireDefault(_profilePage).default;
	
	__webpack_require__(338);
	
	var _personModel = __webpack_require__(62);
	
	var PersonModel = _interopRequireDefault(_personModel).default;
	
	var _personInfoModal = __webpack_require__(344);
	
	var PersonInfoModal = _interopRequireDefault(_personInfoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'profile-page page bg-blur',
	
	    ui: {
	        'buttonDetail': '[data-js-profile-detail]',
	        'buttonAddFriend': '[data-js-add-friend]',
	        'buttonAddBlackList': '[data-js-add-blackList]',
	        'buttonStartGame': '[data-js-start-game]',
	        'buttonRemoveFriend': '[data-js-remove-friend]',
	        'buttonRemoveBlacklist': '[data-js-remove-blackList]',
	        'buttonChat': '[data-js-chat]'
	    },
	    events: {
	        'click @ui.buttonDetail': 'onClickButtonDetail',
	        'click @ui.buttonAddFriend': 'onClickAddFriend',
	        'click @ui.buttonAddBlackList': 'onClickAddBlackList',
	        'click @ui.buttonStartGame': 'onClickStartGame',
	        'click @ui.buttonRemoveFriend': 'onClickRemoveFriend',
	        'click @ui.buttonRemoveBlacklist': 'onClickRemoveBlackList',
	        'click @ui.buttonChat': 'onClickChat'
	    },
	
	    bindings: {
	        '[data-js-user-avatar]': 'setAttr: avatar',
	        '[data-js-profile-detail]': 'classes: {disabled: not(topics_answers)}',
	        '[data-js-profile-rate]': 'text: u_rate',
	        '[data-js-profile-win]': 'text: u_win',
	        '[data-js-profile-ratePos]': 'text: u_number_rate',
	        '[data-js-profile-allGame]': 'text: u_all_games',
	        '[data-js-profile-login]': 'text: u_login_comp',
	        '[data-js-add-friend-block]': 'classes: {hide: is_friend}',
	        '[data-js-remove-friend-block]': 'classes: {hide: not(is_friend)}',
	        '[data-js-add-blackList-block]': 'classes: {hide: is_blacklist}',
	        '[data-js-remove-blackList-block]': 'classes: {hide: not(is_blacklist)}',
	        '[data-js-add-friend]': 'classes: {hide: is_me}',
	        '[data-js-add-blackList]': 'classes: {hide: is_me}',
	        '[data-js-chat]': 'classes: {hide: is_me}',
	        '[data-js-start-game]': 'classes: {hide: is_me}'
	    },
	
	    bindingHandlers: {
	        setAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        }
	    },
	
	    initialize: function initialize(options) {
	        this.userId = options.userId;
	        this.model = new PersonModel({
	            id: this.userId
	        });
	
	        this.epoxify();
	        common.headerModel.set({ backPath: 'statistics' });
	        common.headerModel.set({ isGamePage: false });
	    },
	    onVisible: function onVisible() {
	        var _this = this;
	
	        this.$el.addClass('load');
	        common.api.user.getDataById(this.userId).always(function () {
	            _this.$el.removeClass('load');
	        }).done(function (data) {
	            var modelData = data.answer;
	            modelData.u_number_rate = data.answer.u_rate_pos;
	            _this.model.set(modelData);
	        }).fail(function (err) {
	            console.log(err.text);
	        });
	    },
	    onClickButtonDetail: function onClickButtonDetail() {
	        new PersonInfoModal({
	            model: this.model
	        }).showModal();
	    },
	    onClickAddFriend: function onClickAddFriend() {
	        common.friendCollection.add({ id: this.model.get('id') });
	    },
	    onClickRemoveFriend: function onClickRemoveFriend() {
	        common.friendCollection.remove({ id: this.model.get('id') });
	    },
	    onClickAddBlackList: function onClickAddBlackList() {
	        common.blackListCollection.add({ id: this.model.get('id') });
	    },
	    onClickRemoveBlackList: function onClickRemoveBlackList() {
	        common.blackListCollection.remove({ id: this.model.get('id') });
	    },
	    onClickStartGame: function onClickStartGame() {
	        common.appController.startGame(this.model.get('id'));
	    },
	    onClickChat: function onClickChat() {
	        common.router.navigate('chat/' + this.model.get('id'), { trigger: true });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line text-center\"><div data-js-user-avatar data-user-icon-status=\"1\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div></div><div class=\"line\"><p data-js-profile-login class=\"text-center yellow-text user-name\">Логин</p></div><div class=\"line user-info\"><div class=\"icon-block\"><div class=\"icon dones\"></div><span>Побед</span><h2 data-js-profile-win>0</h2></div><div class=\"icon-block\"><div class=\"icon all-games\"></div><span>Всего игр</span><h2 data-js-profile-allGame>0</h2></div><div class=\"icon-block\"><div class=\"icon rate\"></div><span>Очки</span><h2 data-js-profile-rate>0</h2></div><div class=\"icon-block\"><div class=\"icon number-rate\"></div><span>Позиция</span><h2 data-js-profile-ratePos>0</h2></div></div><div class=\"line\"><div data-js-profile-detail class=\"btn col-xs-12\"><div class=\"button-icon icon-more-info\"></div>Больше информации<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-chat class=\"btn col-xs-12\"><div class=\"button-icon icon-chat-icon\"></div>Написать в чат<div class=\"btn-arrow\"></div></div></div><div data-js-add-friend-block class=\"line\"><div data-js-add-friend class=\"btn col-xs-12\"><div class=\"button-icon icon-add-friend\"></div>Добавить в друзья<div class=\"btn-arrow\"></div></div></div><div data-js-remove-friend-block class=\"line\"><div data-js-remove-friend class=\"btn col-xs-12\">Удалить из друзей<div class=\"btn-arrow disabled\"></div></div></div><div data-js-add-blackList-block class=\"line\"><div data-js-add-blackList class=\"btn col-xs-12\"><div class=\"button-icon icon-add-blacklist\"></div>Добавить в черный список<div class=\"btn-arrow\"></div></div></div><div data-js-remove-blackList-block class=\"line\"><div data-js-remove-blackList class=\"btn col-xs-12\">Удалить из черного списка<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-start-game class=\"btn col-xs-12 color-light\">Сразиться</div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 338 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _personInfoModal = __webpack_require__(345);
	
	var template = _interopRequireDefault(_personInfoModal).default;
	
	__webpack_require__(346);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Modal.extend({
	    template: template,
	    className: 'person-info-modal full-modal bg-blur',
	    bindings: {
	        '[data-js-user-avatar]': 'setAttr: avatar',
	        '[data-js-profile-login]': 'text: u_login_comp'
	    },
	    bindingHandlers: {
	        setAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        }
	    },
	
	    initialize: function initialize() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        _.each(this.model.get('topics_answers'), function (answer) {
	            var topicItem = common.topicCollection.where({ id: answer.topic_id })[0];
	            if (topicItem) {
	                answer.topic_name = topicItem.get('t_name');
	            }
	            //console.dir(answer);
	        });
	        this.epoxify();
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (parseInt, topics_answers, undefined) {
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><div class=\"container\"><div class=\"line text-center\"><div data-js-user-avatar data-user-icon-status=\"1\" class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div></div><div class=\"line\"><p data-js-profile-login class=\"text-center yellow-text user-name\">Логин</p></div><!--.line--><!--  .col-xs-12--><!--    h3.text-header.yellow-text Награды--><div class=\"line\"><div class=\"col-xs-12 p-l-0 p-r-0\"><h3 class=\"text-header yellow-text\">Категория (% правильных ответов)</h3></div></div>");
	// iterate topics_answers
	;(function(){
	  var $$obj = topics_answers;
	  if ('number' == typeof $$obj.length) {
	
	    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
	      var answer = $$obj[$index];
	
	buf.push("<div class=\"line\"><p class=\"col-xs-12 p-l-0 p-r-0\">" + (jade.escape((jade_interp = answer.topic_name) == null ? '' : jade_interp)) + "<span>" + (jade.escape((jade_interp = parseInt(answer.right_answers/answer.total_answers*100)) == null ? '' : jade_interp)) + "%</span></p></div><div class=\"line\"><div class=\"progress-bar col-xs-12 p-l-0 p-r-0\"><div" + (jade.attr("style", "width: " + (answer.right_answers/answer.total_answers*100) + "%", true, true)) + " class=\"progress\"></div></div></div>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var $index in $$obj) {
	      $$l++;      var answer = $$obj[$index];
	
	buf.push("<div class=\"line\"><p class=\"col-xs-12 p-l-0 p-r-0\">" + (jade.escape((jade_interp = answer.topic_name) == null ? '' : jade_interp)) + "<span>" + (jade.escape((jade_interp = parseInt(answer.right_answers/answer.total_answers*100)) == null ? '' : jade_interp)) + "%</span></p></div><div class=\"line\"><div class=\"progress-bar col-xs-12 p-l-0 p-r-0\"><div" + (jade.attr("style", "width: " + (answer.right_answers/answer.total_answers*100) + "%", true, true)) + " class=\"progress\"></div></div></div>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</div></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");}.call(this,"parseInt" in locals_for_with?locals_for_with.parseInt:typeof parseInt!=="undefined"?parseInt:undefined,"topics_answers" in locals_for_with?locals_for_with.topics_answers:typeof topics_answers!=="undefined"?topics_answers:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined));;return buf.join("");
	}

/***/ },
/* 346 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 347 */,
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _gameResultPage = __webpack_require__(349);
	
	var template = _interopRequireDefault(_gameResultPage).default;
	
	__webpack_require__(350);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'game-result-page page bg-blur',
	
	    ui: {
	        'buttonPlay': '[data-js-play]',
	        'buttonHistory': '[data-js-history]',
	        'buttonOpponentIcon': '[data-js-opponent-icon]',
	        'buttonUserIcon': '[data-js-user-icon]',
	        'userSlider': '[data-js-user-slider]',
	        'opponentSlider': '[data-js-opponent-slider]',
	        'userSliderIcon': '[data-js-user-icon-score]',
	        'opponentSliderIcon': '[data-js-opponent-icon-score]',
	        'userStatus': '[data-js-user-status]',
	        'opponentStatus': '[data-js-opponent-status]',
	        'userTextStatus': '[data-js-text-status]',
	        'userScoreAbs': '[data-js-user-score-abs]'
	    },
	    events: {
	        'click @ui.buttonPlay': 'onClickButtonPlay',
	        'click @ui.buttonHistory': 'onClickHistory',
	        'click @ui.buttonOpponentIcon': 'onClickOpponentIcon',
	        'click @ui.buttonUserIcon': 'onClickUserIcon'
	    },
	
	    computeds: {
	        userName: function userName() {
	            return common.user.get('login');
	        }
	    },
	    bindings: {
	        '[data-js-user-name]': 'text: userName',
	        '[data-js-opponent-name]': 'text: opponent_u_login',
	        '[data-js-user-score]': 'text: userScore',
	        '[data-js-opponent-score]': 'text: opponentScore',
	        '[data-js-user-icon]': 'setAvatarAttr: avatar, setAvatarStateAttr: avatarUserState',
	        '[data-js-opponent-icon]': 'setAvatarAttr: opponentAvatar, setAvatarStateAttr: avatarOpponentState'
	    },
	    bindingHandlers: {
	        setAvatarAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-id': value });
	            }
	        },
	        setAvatarStateAttr: {
	            set: function set($element, value) {
	                $element.attr({ 'data-user-icon-status': value });
	            }
	        }
	    },
	    initialize: function initialize(options) {
	        var _this = this;
	
	        this.roomId = options.room_id;
	        this.model = common.userGameCollection.get(this.roomId);
	        this.viewModel = common.user;
	        if (!this.model) {
	            setTimeout(function () {
	                common.router.navigate('index', { trigger: true });
	            });
	            return false;
	        }
	        common.api.room.result([this.roomId]).done(function (data) {
	            var opponentScore = data.answer.rooms_results[_this.roomId][_this.model.get('opponentId')].scores;
	            var userScore = data.answer.rooms_results[_this.roomId][common.user.get('id')].scores;
	            var commonScore = Math.abs(opponentScore) + Math.abs(userScore);
	            var userSliderWidth = Math.abs(userScore) / commonScore * 100;
	            var opponentSliderWidth = Math.abs(opponentScore) / commonScore * 100;
	            if (opponentScore > 0) {
	                opponentScore = '+' + opponentScore;
	                _this.ui.opponentSlider.addClass('color-green');
	                _this.ui.opponentSliderIcon.addClass('score-done');
	                _this.ui.opponentStatus.text('Победа');
	            } else {
	                _this.ui.opponentSlider.addClass('color-red');
	                _this.ui.opponentSliderIcon.addClass('score-fail');
	                _this.ui.opponentStatus.text('Поражение');
	            }
	            if (userScore > 0) {
	                userScore = '+' + userScore;
	                _this.ui.userSlider.addClass('color-green');
	                _this.ui.userSliderIcon.addClass('score-done');
	                _this.ui.userStatus.text('Победа');
	                _this.ui.userTextStatus.text('Вы заработали');
	            } else {
	                _this.ui.userSlider.addClass('color-red');
	                _this.ui.userSliderIcon.addClass('score-fail');
	                _this.ui.userStatus.text('Поражение');
	                _this.ui.userTextStatus.text('Вы потеряли');
	            }
	            _this.ui.userScoreAbs.text(Math.abs(userScore));
	            _this.model.set({
	                opponentScore: opponentScore,
	                userScore: userScore
	            });
	            _this.ui.userSlider.width(userSliderWidth + '%');
	            _this.ui.opponentSlider.width(opponentSliderWidth + '%');
	        });
	        this.epoxify();
	        common.headerModel.set({ backPath: 'userGames' });
	    },
	    onClickOpponentIcon: function onClickOpponentIcon() {
	        common.router.navigate('profile/' + this.model.get('opponentId'), { trigger: true });
	    },
	    onClickUserIcon: function onClickUserIcon() {
	        common.router.navigate('profile/' + common.user.get('id'), { trigger: true });
	    },
	    onClickButtonPlay: function onClickButtonPlay() {
	        if (this.model.get('isGameClose')) {
	            common.appController.startGame(this.model.get('opponentId'));
	            return;
	        }
	        common.router.navigate('questions/' + this.roomId, { trigger: true, replace: true });
	    },
	    onClickHistory: function onClickHistory() {
	        common.router.navigate('game/' + this.roomId, { trigger: true });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"row main-block\"><div class=\"half-block\"><div data-js-user-status class=\"user-status\">&nbsp;</div><div data-js-user-icon class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><h2 data-js-user-name class=\"yellow-text\"></h2></div><div class=\"half-block\"><div data-js-opponent-status class=\"user-status\">&nbsp;</div><div data-js-opponent-icon class=\"user-icon\"><div class=\"avatar_bg\"></div><div class=\"avatar\"></div></div><h2 data-js-opponent-name class=\"yellow-text\"></h2></div><div class=\"score-block yellow-text\"><span>VS</span></div></div><div class=\"row score-header\"><p data-js-text-status class=\"text-center text-min\">&nbsp;</p><p class=\"text-center\"><span data-js-user-score-abs></span>&nbsp;очков рейтинга</p></div><div class=\"row\"><div class=\"slider\"><div data-js-user-icon-score class=\"icon\"></div><div class=\"my-slider-container\"><div data-js-user-slider class=\"my-slider\"></div></div><div class=\"separator\"></div><div class=\"opponent-slider-container\"><div data-js-opponent-slider class=\"opponent-slider\"></div></div><div data-js-opponent-icon-score class=\"icon\"></div></div><div class=\"text-block\"><span data-js-user-score></span><span>0</span><span data-js-opponent-score></span></div></div><br><div class=\"row\"><div class=\"buttons-block\"><div data-js-play class=\"btn color-light\">Реванш</div><div data-js-history class=\"btn color-blue\">История</div></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 350 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _questionsPage = __webpack_require__(355);
	
	var template = _interopRequireDefault(_questionsPage).default;
	
	__webpack_require__(356);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	var _questionWidget = __webpack_require__(358);
	
	var questionWidget = _interopRequireDefault(_questionWidget).default;
	
	var _questionCollection = __webpack_require__(363);
	
	var QuestionCollection = _interopRequireDefault(_questionCollection).default;
	
	var _selectTopicModal = __webpack_require__(265);
	
	var selectTopicModal = _interopRequireDefault(_selectTopicModal).default;
	
	var _tipsWidget = __webpack_require__(276);
	
	var tipsWidget = _interopRequireDefault(_tipsWidget).default;
	
	var _topicModel = __webpack_require__(33);
	
	var TopicModel = _interopRequireDefault(_topicModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'questions-page page bg-blur',
	
	    events: {
	        'click [data-js-start-answer]': 'onClickStart'
	    },
	    bindings: {
	        '[data-js-topic-text]': 'text: t_name'
	    },
	    regions: {
	        // tipsWidget: '[data-js-tips-widget]',
	        questionContainer: '[data-js-question-container]'
	    },
	
	    initialize: function initialize(data) {
	        this.currentQuestion = 0;
	        this.answers = [];
	        this.roomId = data.roomId;
	        this.model = new TopicModel();
	
	        this.epoxify();
	        common.headerModel.set({ notAction: false });
	    },
	    onRender: function onRender() {
	        var _this = this;
	
	        // this.tipsWidget.show(new tipsWidget);
	        if (!this.roomId) {
	            common.router.navigate('index', { trigger: true, replace: true });
	            return;
	        }
	        common.api.getQuestionsByRoom(this.roomId).done(function (data) {
	            _this.roundId = data.answer.round_id;
	            _this.questionsCollection = new QuestionCollection();
	            _this.questionsCollection.parse(data);
	            var modelData = data.answer;
	            modelData.topic_id = data.answer.topic_id;
	            modelData.t_name = common.topicCollection.get(data.answer.topic_id).get('t_name');
	            _this.model.set(modelData);
	            _this.showQuestion();
	        }).fail(function (data) {
	            if (data.code == "00017") {
	                //Выберите тему
	                new selectTopicModal().showModal().done(function (topic) {
	                    common.api.startNewRound(_this.roomId, topic.get('topic_id')).done(function (data) {
	                        _this.roundId = data.answer.round_id;
	                        _this.questionsCollection = new QuestionCollection();
	                        _this.questionsCollection.parse(data);
	                        var modelData = data.answer;
	                        modelData.topic_id = data.answer.topic_id;
	                        modelData.t_name = common.topicCollection.get(data.answer.topic_id).get('t_name');
	                        _this.model.set(modelData);
	                        _this.showQuestion();
	                    }).fail(function (data) {
	                        new infoModal({ message: data.text }).showModal().always(function () {
	                            common.router.navigate('game/' + _this.roomId, { trigger: true, replace: true });
	                        });
	                    });
	                }).fail(function () {
	                    common.router.navigate('game/' + _this.roomId, { trigger: true, replace: true });
	                });
	            } else {
	                common.router.navigate('game/' + _this.roomId, { trigger: true, replace: true });
	            }
	        });
	    },
	    showQuestion: function showQuestion() {
	        //console.dir(this.questionsCollection);
	        if (this.currentQuestion == 0) {
	            this.showStartBlock();
	        } else {
	            this.calculateQuestion();
	        }
	    },
	    onClickStart: function onClickStart() {
	        this.$el.addClass('showQuestions');
	        this.calculateQuestion();
	    },
	    calculateQuestion: function calculateQuestion() {
	        var _this2 = this;
	
	        var questionModel = this.questionsCollection.at(this.currentQuestion);
	        if (questionModel) {
	            this.questionwidget = new questionWidget({
	                model: questionModel
	            });
	            this.questionContainer.show(this.questionwidget);
	            this.listenTo(this.questionwidget, 'select:answer', this.onSelectAnswer);
	            this.questionwidget.changeSize();
	        } else {
	            common.api.sendAnswers(this.roomId, this.roundId, this.answers).done(function () {
	                common.userGameCollection.forceUpdate();
	                common.router.navigate('game/' + _this2.roomId, { trigger: true, replace: true });
	            }).fail(function (data) {
	                new infoModal({ message: data.text }).showModal();
	            });
	        }
	    },
	    showStartBlock: function showStartBlock() {
	        var _this3 = this;
	
	        var questionImages = [];
	        this.imgLoad = 0;
	        _.each(this.questionsCollection.models, function (model) {
	            _.each(model.get('q_img'), function (value) {
	                questionImages.push(value);
	            });
	        });
	        if (questionImages.length) {
	            this.$el.addClass('load');
	        }
	        _.each(questionImages, function (imgSrc) {
	            var img = new Image();
	            img.onload = function () {
	                _this3.imgLoad++;
	                if (_this3.imgLoad >= questionImages.length) {
	                    _this3.$el.removeClass('load');
	                }
	            };
	            img.onerror = function () {
	                _this3.imgLoad++;
	                if (_this3.imgLoad >= questionImages.length) {
	                    _this3.$el.removeClass('load');
	                }
	            };
	            img.src = imgSrc;
	        });
	    },
	    onSelectAnswer: function onSelectAnswer(answerId) {
	        this.answers.push({
	            question_id: this.questionsCollection.at(this.currentQuestion).get('id'),
	            answer_id: answerId
	        });
	        this.currentQuestion++;
	        this.showQuestion();
	    },
	    onDestroy: function onDestroy() {
	        common.headerModel.set({ notAction: false });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"questions-start\"><div class=\"col-xs-12 p-l-0 p-r-0\"><div data-js-start-answer class=\"topic-container\"><div class=\"topic-content\"><div data-js-topic-text class=\"btn col-xs-10 col-xs-offset-1\">Общие положения и основы безопасности1</div></div></div></div><!--.col-xs-12--><!--  h3.text-header.yellow-text Подсказки--><!--.btn.col-xs-12.tips-block(data-js-tips-widget)--><p class=\"col-xs-12 text-center\">Нажми на картинку <br> или вопрос для продолжения.</p></div><div data-js-question-container class=\"questions-answers\"></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 356 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 357 */,
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, $) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _questionWidget = __webpack_require__(359);
	
	var template = _interopRequireDefault(_questionWidget).default;
	
	__webpack_require__(360);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'question-widget',
	
	    ui: {
	        timerFill: '[data-js-timer-fill]',
	        questionDone: '[data-js-question-done]'
	    },
	
	    events: {
	        'click .btn': 'onClickItem',
	        'click @ui.questionDone': 'onClickWidget'
	    },
	    bindings: {
	        ':el': 'classes: {blockAnswer: isAnswerBlock}'
	    },
	    initialize: function initialize() {
	        this.timeOffset = this.timeDuration = this.model.get('timeDuration');
	        this.lock = false;
	        this.epoxify();
	    },
	    tick: function tick() {
	        var _this = this;
	
	        this.timeOffset--;
	        this.ui.timerFill.css({ width: this.timeOffset / this.timeDuration * 100 + '%' });
	        if (!this.timeOffset) {
	            this.showCorrectAnswer();
	            this.timer = setTimeout(function () {
	                _this.trigger('select:answer', $('.btn').not('.correct').first().data('id'));
	            }, 2000);
	            return;
	        }
	        this.timer = setTimeout(this.tick.bind(this), 1000);
	    },
	    onClickItem: function onClickItem(e) {
	        var _this2 = this;
	
	        e.stopPropagation();
	        this.ui.questionDone.removeClass('hide');
	        this.answerId = $(e.currentTarget).data('id');
	        $(e.currentTarget).addClass('active');
	        clearTimeout(this.timer);
	        this.showCorrectAnswer();
	        this.timer = setTimeout(function () {
	            _this2.trigger('select:answer', _this2.answerId);
	        }, 2000);
	    },
	    onClickWidget: function onClickWidget() {
	        clearTimeout(this.timer);
	        this.trigger('select:answer', this.answerId);
	    },
	    onRender: function onRender() {
	        this.timer = setTimeout(this.tick.bind(this), 2000);
	    },
	    changeSize: function changeSize() {
	        var widthImage = $('.img_question', this.$el).first().width();
	        $('.img_question', this.$el).height(widthImage * 0.37);
	    },
	    showCorrectAnswer: function showCorrectAnswer() {
	        var $correct = $('.correct', this.$el);
	        if ($correct.hasClass('active')) {
	            $correct.addClass('green-state');
	        } else {
	            $correct.addClass('green-state-animate');
	            $('.btn.active').addClass('red-state');
	        }
	    },
	    onDestroy: function onDestroy() {
	        clearTimeout(this.timer);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(7)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (answers, q_img, q_text, undefined) {
	buf.push("<div class=\"line\"><div class=\"col-xs-12 p-l-0 p-r-0\"><div class=\"question-container\">");
	// iterate q_img
	;(function(){
	  var $$obj = q_img;
	  if ('number' == typeof $$obj.length) {
	
	    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
	      var img = $$obj[$index];
	
	if ( (img != ""))
	{
	buf.push("<div" + (jade.attr("style", "background-image: url(" + (img) + ")", true, true)) + " class=\"img_question\"></div>");
	}
	    }
	
	  } else {
	    var $$l = 0;
	    for (var $index in $$obj) {
	      $$l++;      var img = $$obj[$index];
	
	if ( (img != ""))
	{
	buf.push("<div" + (jade.attr("style", "background-image: url(" + (img) + ")", true, true)) + " class=\"img_question\"></div>");
	}
	    }
	
	  }
	}).call(this);
	
	buf.push("<p>" + (jade.escape((jade_interp = q_text) == null ? '' : jade_interp)) + "</p></div></div></div><div class=\"line p-l-0 p-r-0\"><div class=\"col-xs-12 p-l-0 p-r-0\">");
	// iterate answers
	;(function(){
	  var $$obj = answers;
	  if ('number' == typeof $$obj.length) {
	
	    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
	      var answer = $$obj[$index];
	
	buf.push("<div class=\"answer-button\">");
	if ( answer.a_is_right == '1')
	{
	buf.push("<div" + (jade.attr("data-id", "" + (answer.id) + "", true, true)) + " class=\"btn correct\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\">" + (jade.escape((jade_interp = answer.a_text) == null ? '' : jade_interp)) + "</div></div></div>");
	}
	else
	{
	buf.push("<div" + (jade.attr("data-id", "" + (answer.id) + "", true, true)) + " class=\"btn\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\">" + (jade.escape((jade_interp = answer.a_text) == null ? '' : jade_interp)) + "</div></div></div>");
	}
	buf.push("</div>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var $index in $$obj) {
	      $$l++;      var answer = $$obj[$index];
	
	buf.push("<div class=\"answer-button\">");
	if ( answer.a_is_right == '1')
	{
	buf.push("<div" + (jade.attr("data-id", "" + (answer.id) + "", true, true)) + " class=\"btn correct\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\">" + (jade.escape((jade_interp = answer.a_text) == null ? '' : jade_interp)) + "</div></div></div>");
	}
	else
	{
	buf.push("<div" + (jade.attr("data-id", "" + (answer.id) + "", true, true)) + " class=\"btn\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\">" + (jade.escape((jade_interp = answer.a_text) == null ? '' : jade_interp)) + "</div></div></div>");
	}
	buf.push("</div>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</div></div><div class=\"line timer-line\"><div class=\"col-xs-12 p-l-0 p-r-0\"><div class=\"timer\"><div data-js-timer-fill class=\"timer-fill\"><div class=\"timer-label\"></div></div>");
	for (var i=1; i<=40; i++) {
	{
	buf.push("<div" + (jade.attr("style", "left: " + (100/40*i) + "%", true, true)) + " class=\"separator\"></div>");
	}
	}
	buf.push("</div></div></div><div data-js-question-done class=\"question-done hide\"></div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"q_img" in locals_for_with?locals_for_with.q_img:typeof q_img!=="undefined"?q_img:undefined,"q_text" in locals_for_with?locals_for_with.q_text:typeof q_text!=="undefined"?q_text:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined));;return buf.join("");
	}

/***/ },
/* 360 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 361 */,
/* 362 */,
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _questionModel = __webpack_require__(364);
	
	var questionModel = _interopRequireDefault(_questionModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: questionModel,
	
	    parse: function parse(data) {
	        if (data && data.answer && data.answer.questions) {
	            this.reset(_.map(data.answer.questions, function (question) {
	                question.room_id = data.answer.room_id;
	                question.round_id = data.answer.round_id;
	                return question;
	            }));
	        } else {
	            this.reset([]);
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(6)))

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Epoxy) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = Epoxy.Model.extend({
	    defaults: {
	        q_diffictly: '',
	        q_img: [],
	        q_text: '',
	        q_view: '1',
	        answers: []
	    },
	    computeds: {
	        isAnswerBlock: {
	            deps: ['q_view'],
	            get: function get(q_view) {
	                return q_view == '2';
	            }
	        },
	        timeDuration: {
	            deps: ['q_diffictly'],
	            get: function get(q_diffictly) {
	                return parseInt(q_diffictly, 10) * 20;
	            }
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, Marionette, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _blackListPage = __webpack_require__(366);
	
	var template = _interopRequireDefault(_blackListPage).default;
	
	__webpack_require__(367);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EmptyView = MarionetteEpoxy.View.extend({
	    className: 'col-xs-12 text-header',
	    tagName: 'p',
	    render: function render() {
	        this.$el.html('Список пуст');
	    }
	});
	
	var BlackListCollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    emptyView: EmptyView,
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'black-list-page page',
	
	    ui: {},
	    events: {},
	    bindings: {},
	
	    regions: {
	        blackList: '[data-js-black-list]'
	    },
	
	    initialize: function initialize() {
	        this.blackListCollectionPage = new BlackListCollectionView({
	            collection: common.blackListCollection
	        });
	        common.headerModel.set({ backPath: 'settings' });
	        this.epoxify();
	    },
	    onRender: function onRender() {
	        this.blackList.show(this.blackListCollectionPage);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(4), __webpack_require__(10)))

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"container\"><div class=\"line\"><h1 class=\"col-xs-12 text-header yellow-text\">Черный список</h1></div><div class=\"line\"><div data-js-black-list class=\"col-xs-12 p-l-0 p-r-0\"></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 367 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 368 */,
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common, $) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _settingsPageAcc = __webpack_require__(370);
	
	var template = _interopRequireDefault(_settingsPageAcc).default;
	
	__webpack_require__(371);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	var _enterPasswordModal = __webpack_require__(373);
	
	var enterPasswordModal = _interopRequireDefault(_enterPasswordModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'settings-page-acc page',
	
	    ui: {
	        form: 'form',
	        login: '[data-js-user-name]',
	        email: '[data-js-email]',
	        password: '[data-js-password]',
	        buttonSubmit: '[data-js-submit]'
	    },
	    events: {
	        'click @ui.buttonSubmit': 'onClickSubmit',
	        'submit @ui.form': 'onFormSubmit'
	    },
	    bindings: {
	        '@ui.login': 'value: u_login',
	        '@ui.email': 'value: u_email'
	    },
	    initialize: function initialize() {
	        this.model = new common.ValidateModel();
	        this.model.set({
	            login: common.user.get('u_login'),
	            email: common.user.get('u_email')
	        });
	        this.model.bindingView(this, {
	            '@ui.login': 'login',
	            '@ui.email': 'email',
	            '@ui.password': 'password'
	        });
	        this.epoxify();
	        common.headerModel.set({ backPath: 'settings' });
	    },
	    onFormSubmit: function onFormSubmit(e) {
	        var _this = this;
	
	        e.preventDefault();
	        var changedField = {};
	        var allValid = true;
	        if (this.model.get('email') != common.user.get('u_email')) {
	            changedField.email = this.model.get('email');
	            if (!this.checkField('email')) {
	                allValid = false;
	            }
	        }
	        if (this.model.get('login') != common.user.get('u_login')) {
	            changedField.login = this.model.get('login');
	            if (!this.checkField('login')) {
	                allValid = false;
	            }
	        }
	        if (this.model.get('password') != '') {
	            changedField.password = this.model.get('password');
	            if (!this.checkField('password')) {
	                allValid = false;
	            }
	        }
	        if (!$.isEmptyObject(changedField) && allValid) {
	            if (changedField.password) {
	                new enterPasswordModal({ message: 'Введите ваш старый пароль' }).showModal().done(function (answer) {
	                    changedField.current_password = answer.password;
	                    _this.changeUserData(changedField);
	                });
	            } else if (changedField.email) {
	                new enterPasswordModal({ message: 'Введите ваш пароль' }).showModal().done(function (answer) {
	                    changedField.current_password = answer.password;
	                    _this.changeUserData(changedField);
	                });
	            } else {
	                this.changeUserData(changedField);
	            }
	        }
	    },
	    changeUserData: function changeUserData(changedField) {
	        var _this2 = this;
	
	        this.$el.addClass('load');
	        common.api.user.change(changedField).always(function () {
	            _this2.$el.removeClass('load');
	        }).done(function () {
	            if (changedField.login) {
	                common.user.set({ u_login: changedField.login });
	            }
	            if (changedField.email) {
	                common.user.set({ u_email: changedField.email });
	            }
	            new infoModal({ message: 'Данные успешно обновлены' }).showModal().always(function () {
	                common.router.navigate('settings', { trigger: true });
	            });
	        }).fail(function (err) {
	            new infoModal({ message: err.text }).showModal();
	        });
	    },
	    onClickSubmit: function onClickSubmit(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        this.ui.form.submit();
	    },
	    checkField: function checkField(fieldName) {
	        if (this.model.get(fieldName + 'Invalid')) {
	            this.model.set(fieldName + 'Class', true);
	            this.model.set(fieldName + 'Action', false);
	            this.$el.width();
	            this.model.set(fieldName + 'Action', true);
	            return false;
	        }
	        return true;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10), __webpack_require__(7)))

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><form autocomplete=\"off\" class=\"container\"><input type=\"submit\" class=\"hide\"><div class=\"line\"><label class=\"input col-xs-12\"><span>Отображаемое имя</span><input type=\"text\" data-js-user-name></label></div><div class=\"line\"><label class=\"input col-xs-12\"><span>Email</span><input type=\"email\" data-js-email></label></div><div class=\"line\"><label class=\"input col-xs-12\"><span>Новый пароль</span><input type=\"password\" data-js-password></label></div><div class=\"line\"><div data-js-submit class=\"btn col-xs-12 single\">Сохранить</div></div></form></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 371 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 372 */,
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(13);
	
	var Modal = _interopRequireDefault(_modal).default;
	
	var _enterPasswordModal = __webpack_require__(374);
	
	var template = _interopRequireDefault(_enterPasswordModal).default;
	
	__webpack_require__(375);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Modal.extend({
	    template: template,
	    className: 'enter-password-modal',
	
	    initialize: function initialize() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        this.options = options;
	    },
	    serializeData: function serializeData() {
	        return { message: this.options.message };
	    },
	
	
	    ui: {
	        form: 'form',
	        buttonOk: '[data-js-ok]',
	        password: '[data-js-password]'
	    },
	
	    events: {
	        'click @ui.buttonOk': 'onClickOk',
	        'submit @ui.form': 'onFormSubmit'
	    },
	    onClickOk: function onClickOk(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        this.ui.form.submit();
	    },
	    onFormSubmit: function onFormSubmit(e) {
	        e.preventDefault();
	        this.ok({ password: this.ui.password.val() });
	    }
	});

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (message) {
	buf.push("<div class=\"modal-overflow\"><div class=\"modal-backdrop\"></div><div class=\"modal-scroll\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"modal-body\"><form class=\"container\"><div class=\"row\"><label class=\"input col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-3\"><span>" + (jade.escape((jade_interp = message) == null ? '' : jade_interp)) + "</span><input type=\"password\" data-js-password></label></div><div class=\"row\"><button data-js-ok type=\"submit\" class=\"btn col-xs-4 col-xs-offset-8\">ok</button></div></form></div></div></div><div data-js-close class=\"modal-close\">&times;</div></div></div>");}.call(this,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined));;return buf.join("");
	}

/***/ },
/* 375 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 376 */,
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _statisticsPage = __webpack_require__(378);
	
	var template = _interopRequireDefault(_statisticsPage).default;
	
	__webpack_require__(379);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'settings-page-acc page',
	
	    ui: {
	        'last20games': '[data-js-last20games]',
	        'playerRankings': '[data-js-playerRankings]',
	        'buttonProfile': '[data-js-statistics-profile]',
	        'buttonNeighbors': '[data-js-neighbors]'
	    },
	    events: {
	        'click @ui.last20games': 'onClickLast20games',
	        'click @ui.playerRankings': 'onClickPlayerRankings',
	        'click @ui.buttonProfile': 'onClickProfile',
	        'click @ui.buttonNeighbors': 'onClickNeighbors'
	    },
	    bindings: {},
	    initialize: function initialize() {
	        common.headerModel.set({ backPath: 'index' });
	    },
	    onClickLast20games: function onClickLast20games() {
	        common.router.navigate('last20games', { trigger: true });
	    },
	    onClickPlayerRankings: function onClickPlayerRankings() {
	        common.router.navigate('playerRankings', { trigger: true });
	    },
	    onClickProfile: function onClickProfile() {
	        common.router.navigate('profile/' + common.user.get('id'), { trigger: true });
	    },
	    onClickNeighbors: function onClickNeighbors() {
	        common.router.navigate('neighbors', { trigger: true });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><div data-js-statistics-profile class=\"btn col-xs-12\">Успеваемость<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div class=\"btn col-xs-12\">Награды<div class=\"btn-arrow\"></div></div></div><br><div class=\"line\"><div data-js-playerRankings class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-players-rating\"></div>Рейтинг игроков<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-neighbors class=\"btn col-xs-12 color-dark\"><div class=\"button-icon icon-rating-neighborhood\"></div>Соседи по рейтингу<div class=\"btn-arrow\"></div></div></div><!--.line--><!--  .btn.col-xs-12(data-js-last20games)--><!--    | 20 последних игр--></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 379 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 380 */,
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _playerRankingsPage = __webpack_require__(382);
	
	var template = _interopRequireDefault(_playerRankingsPage).default;
	
	__webpack_require__(383);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	var _playerRatingCollection = __webpack_require__(385);
	
	var PlayerRatingCollection = _interopRequireDefault(_playerRatingCollection).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'ranking-game-page page',
	
	    bindings: {},
	    regions: {
	        'friendsContainer': '[data-js-friend-list]'
	    },
	
	    initialize: function initialize() {
	        this.friendCollection = new CollectionView({
	            collection: new PlayerRatingCollection()
	        });
	        this.epoxify();
	        common.headerModel.set({ backPath: 'statistics' });
	    },
	    onRender: function onRender() {
	        this.friendsContainer.show(this.friendCollection);
	    },
	    onVisible: function onVisible() {
	        var _this = this;
	
	        this.$el.addClass('load');
	        this.friendCollection.collection.update().done(function () {
	            _this.$el.removeClass('load');
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Рейтинг игроков</h3></div></div><div class=\"line\"><div data-js-friend-list class=\"col-xs-12 p-l-0 p-r-0\"></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 383 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 384 */,
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, $, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _personModel = __webpack_require__(62);
	
	var personModel = _interopRequireDefault(_personModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: personModel,
	
	    initialize: function initialize() {
	        this.ready = $.Deferred();
	        this.listenTo(this, 'change:open', this.onChangeOpen);
	    },
	
	    // dfgd
	    parse: function parse(data) {
	        var _this = this;
	
	        if (data && data.answer) {
	            (function () {
	                var number_rate = 0;
	                _this.reset(_.map(data.answer.rate, function (value) {
	                    number_rate += 1;
	                    value.u_number_rate = number_rate;
	                    return value;
	                }));
	            })();
	        } else {
	            this.reset([]);
	        }
	        this.ready.resolve();
	    },
	    update: function update() {
	        var _this2 = this;
	
	        return common.api.getTopPlayer().done(function (data) {
	            _this2.parse(data);
	            _this2.ready.resolve();
	        }).fail(function (err) {
	            console.log(err.text);
	        });
	    },
	    onChangeOpen: function onChangeOpen(model, open) {
	        if (open) {
	            var openModels = this.where({ open: true });
	            _.each(openModels, function (item) {
	                if (item.get('id') != model.get('id')) {
	                    item.set({ open: false });
	                }
	            });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _authPage = __webpack_require__(387);
	
	var template = _interopRequireDefault(_authPage).default;
	
	__webpack_require__(388);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'auth-page page',
	
	    ui: {
	        buttonVk: '[data-js-vk]',
	        buttonFb: '[data-js-fb]',
	        buttonRegistration: '[data-js-registration]',
	        buttonSignin: '[data-js-signin]',
	        buttonGuest: '[data-js-guest]'
	    },
	    events: {
	        'click @ui.buttonVk': 'onClickVk',
	        'click @ui.buttonFb': 'onClickFb',
	        'click @ui.buttonRegistration': 'onClickRegistration',
	        'click @ui.buttonSignin': 'onClickSignin',
	        'click @ui.buttonGuest': 'onClickGuest'
	    },
	    initialize: function initialize() {
	        common.headerModel.set({ backPath: null });
	    },
	
	
	    onClickVk: function onClickVk() {
	        var _this = this;
	
	        this.$el.addClass('load');
	        SocialVk.login(['email', 'offline'], function (result) {
	            try {
	                result = JSON.parse(result);
	                var user = result.user[0];
	                common.user.setVkIdToken(user.id, result.token);
	                common.api.signInVk(user.first_name, user.last_name).done(function (data) {
	                    common.user.parseAnswer(data);
	                    common.router.navigate('index', { trigger: true });
	                    _this.$el.removeClass('load');
	                }).fail(function (error) {
	                    console.log(error);
	                    new infoModal({ message: err.text }).showModal();
	                    _this.$el.removeClass('load');
	                });
	            } catch (e) {
	                _this.$el.removeClass('load');
	                console.log(error);
	                new infoModal({ message: '' + error }).showModal();
	                SocialVk.logout(function () {}, function () {});
	            }
	        }, function (error) {
	            _this.$el.removeClass('load');
	            console.log(error);
	            new infoModal({ message: '' + error }).showModal();
	            SocialVk.logout(function () {}, function () {});
	        });
	    },
	
	    onClickFb: function onClickFb() {
	        var _this2 = this;
	
	        this.$el.addClass('load');
	        facebookConnectPlugin.login(["public_profile"], function (userData) {
	            common.user.setFbIdToken(userData.authResponse.userID, userData.authResponse.accessToken);
	            facebookConnectPlugin.api('/me?fields=first_name,last_name', [], function (userData) {
	                if (userData['first_name']) {
	                    common.api.signInFb(userData['first_name'], userData['last_name'] || '').done(function (data) {
	                        _this2.$el.removeClass('load');
	                        common.user.parseAnswer(data);
	                        common.router.navigate('index', { trigger: true });
	                    }).fail(function (error) {
	                        _this2.$el.removeClass('load');
	                        console.log(error);
	                        new infoModal({ message: err.text }).showModal();
	                    });
	                } else {
	                    _this2.$el.removeClass('load');
	                    new infoModal({ message: "Error: userData['first_name'] is false" }).showModal();
	                    facebookConnectPlugin.logout(function () {}, function () {});
	                }
	            }, function (error) {
	                _this2.$el.removeClass('load');
	                console.log(error);
	                new infoModal({ message: '' + error }).showModal();
	                facebookConnectPlugin.logout(function () {}, function () {});
	            });
	        }, function (error) {
	            _this2.$el.removeClass('load');
	            console.log(error);
	            new infoModal({ message: '' + error }).showModal();
	            facebookConnectPlugin.logout(function () {}, function () {});
	        });
	    },
	
	    onClickRegistration: function onClickRegistration() {
	        common.router.navigate('registration', { trigger: true });
	    },
	    onClickSignin: function onClickSignin() {
	        common.router.navigate('signin', { trigger: true });
	    },
	    onClickGuest: function onClickGuest() {
	        var _this3 = this;
	
	        this.$el.addClass('load');
	        common.api.auth.signInGuest().always(function () {
	            _this3.$el.removeClass('load');
	        }).done(function (data) {
	            common.storageModel.set({ authDeviceId: data.answer.auth_device_id });
	            common.user.parseAnswer(data);
	            common.router.navigate('index', { trigger: true });
	        }).fail(function (err) {
	            new infoModal({ message: err.text }).showModal();
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><div data-js-guest class=\"btn col-xs-12\">Гость</div></div><div class=\"line\"><div class=\"btn-set col-xs-12 p-l-0 p-r-0\"><div data-js-vk class=\"btn col-xs-3 icon vk-icon\"></div><div class=\"btn col-xs-6\">Войти через</div><div data-js-fb class=\"btn col-xs-3 icon fb-icon\"></div></div></div><div class=\"line\"><div data-js-registration class=\"btn col-xs-12\">Создать аккаунт<div class=\"btn-arrow\"></div></div></div><div class=\"line\"><div data-js-signin class=\"btn col-xs-12\">Войти<div class=\"btn-arrow\"></div></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 388 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _registrationPage = __webpack_require__(393);
	
	var template = _interopRequireDefault(_registrationPage).default;
	
	__webpack_require__(394);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'registration-page page',
	
	    ui: {
	        buttonRegistration: '[data-js-registration]',
	        form: 'form',
	        login: '[data-js-login]',
	        email: '[data-js-email]',
	        password: '[data-js-password]',
	        passwordRepeat: '[data-js-password-repeat]'
	    },
	
	    bindings: {},
	
	    events: {
	        'click @ui.buttonRegistration': 'onClickRegistration',
	        'submit @ui.form': 'onFormSubmit'
	    },
	
	    initialize: function initialize() {
	        this.model = new common.ValidateModel();
	        this.model.bindingView(this, {
	            '@ui.login': 'login',
	            '@ui.email': 'email',
	            '@ui.password': 'password',
	            '@ui.passwordRepeat': 'passwordRepeat'
	        });
	        this.epoxify();
	        common.headerModel.set({ backPath: 'auth' });
	    },
	    onClickRegistration: function onClickRegistration(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        this.ui.form.submit();
	    },
	    onFormSubmit: function onFormSubmit(e) {
	        var _this = this;
	
	        e.preventDefault();
	        if (this.model.validate()) {
	            this.$el.addClass('load');
	            common.api.auth.registration(this.model.get('login'), this.model.get('email'), this.model.get('password')).always(function () {
	                _this.$el.removeClass('load');
	            }).done(function (data) {
	                common.storageModel.set({ authDeviceId: data.answer.auth_device_id });
	                common.user.parseAnswer(data);
	                common.router.navigate('index', { trigger: true });
	            }).fail(function (err) {
	                new infoModal({ message: err.text }).showModal();
	            });
	        } else {
	            new infoModal({ message: 'Данные в форме некорректные!' }).showModal();
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><form autocomplete=\"off\" class=\"container\"><input type=\"submit\" class=\"hide\"><div class=\"line\"><label class=\"input col-xs-12\"><span>Логин</span><input type=\"text\" data-js-login></label></div><div class=\"line\"><label class=\"input col-xs-12\"><span>Email</span><input type=\"email\" data-js-email></label></div><div class=\"line\"><label class=\"input col-xs-12\"><span>Пароль</span><input type=\"password\" data-js-password></label></div><div class=\"line\"><label class=\"input col-xs-12\"><span>Повторите пароль</span><input type=\"password\" data-js-password-repeat></label></div><div class=\"line\"><div data-js-registration class=\"btn col-xs-12 single\">Регистрация</div></div></form></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 394 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 395 */,
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _blockTopicsPage = __webpack_require__(397);
	
	var template = _interopRequireDefault(_blockTopicsPage).default;
	
	__webpack_require__(398);
	
	var _blockTopicsItem = __webpack_require__(402);
	
	var blockTopicsTemplate = _interopRequireDefault(_blockTopicsItem).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BlockTopicsItemView = MarionetteEpoxy.View.extend({
	
	    template: blockTopicsTemplate,
	    className: 'line',
	    ui: {
	        buttonTopic: '[data-js-topick-item]'
	    },
	    events: {
	        'click @ui.buttonTopic': 'onClickItem'
	    },
	    bindings: {
	        '@ui.buttonTopic': 'classes: {blocked: isBlock}',
	        '[data-js-topic-name]': 'text: t_name'
	    },
	    initialize: function initialize() {
	        this.epoxify();
	    },
	    onClickItem: function onClickItem() {
	        this.model.set({ isBlock: !this.model.get('isBlock') });
	    }
	});
	
	var BlockTopicsCollectionView = MarionetteEpoxy.CompositeView.extend({
	    childView: BlockTopicsItemView
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'blockTopics-page page bg-blur',
	
	    regions: {
	        blockTopicsList: '[data-js-block-topics-list]'
	    },
	
	    initialize: function initialize() {
	        this.blockTopicsCollectionView = new BlockTopicsCollectionView({
	            collection: common.topicCollection
	        });
	        common.headerModel.set({ backPath: 'settings' });
	    },
	    onRender: function onRender() {
	        this.blockTopicsList.show(this.blockTopicsCollectionView);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Блокировка категорий</h3></div><div data-js-block-topics-list></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 398 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div data-js-topick-item class=\"btn col-xs-12\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><span data-js-topic-name></span></div></div><div class=\"icon\"></div></div>");;return buf.join("");
	}

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _signinPage = __webpack_require__(404);
	
	var template = _interopRequireDefault(_signinPage).default;
	
	__webpack_require__(405);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	    template: template,
	    className: 'signin-page page',
	
	    ui: {
	        restorePassword: '[data-js-restore-password]',
	        buttonSignin: '[data-js-signin]',
	        login: '[data-js-login]',
	        password: '[data-js-password]',
	        form: 'form'
	    },
	
	    events: {
	        'click @ui.restorePassword': 'onClickRestorePassword',
	        'click @ui.buttonSignin': 'onClickSignIn',
	        'submit @ui.form': 'onFormSubmit'
	    },
	    initialize: function initialize() {
	        common.headerModel.set({ backPath: 'auth' });
	    },
	    onClickRestorePassword: function onClickRestorePassword() {
	        common.router.navigate('restorePassword', { trigger: true });
	    },
	    onClickSignIn: function onClickSignIn(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        this.ui.form.submit();
	    },
	    onFormSubmit: function onFormSubmit(e) {
	        var _this = this;
	
	        e.preventDefault();
	        this.$el.addClass('load');
	        common.api.auth.signIn(this.ui.login.val(), this.ui.password.val()).always(function () {
	            _this.$el.removeClass('load');
	        }).done(function (data) {
	            common.storageModel.set({ authDeviceId: data.answer.auth_device_id });
	            common.user.parseAnswer(data);
	            common.router.navigate('index', { trigger: true });
	        }).fail(function (err) {
	            new infoModal({ message: err.text }).showModal();
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><form autocomplete=\"off\" class=\"container\"><input type=\"submit\" class=\"hide\"><div class=\"line\"><label class=\"input col-xs-12\"><span>Логин</span><input type=\"text\" data-js-login></label></div><div class=\"line\"><label class=\"input col-xs-12\"><span>Пароль</span><input type=\"password\" data-js-password></label></div><div class=\"line\"><div data-js-signin class=\"btn col-xs-12 single\">Войти</div></div></form><div class=\"container\"><div class=\"line\"><div data-js-restore-password class=\"btn col-xs-12\">Востановление пароля<div class=\"btn-arrow\"></div></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 405 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 406 */,
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _neighborsPage = __webpack_require__(408);
	
	var template = _interopRequireDefault(_neighborsPage).default;
	
	__webpack_require__(409);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	var _neighborsCollection = __webpack_require__(411);
	
	var NeighborsCollection = _interopRequireDefault(_neighborsCollection).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'neighbors-game page',
	
	    bindings: {},
	    regions: {
	        'friendsContainer': '[data-js-friend-list]'
	    },
	
	    initialize: function initialize() {
	        this.friendCollection = new CollectionView({
	            collection: new NeighborsCollection()
	        });
	        this.epoxify();
	        common.headerModel.set({ backPath: 'statistics' });
	    },
	    onRender: function onRender() {
	        this.friendsContainer.show(this.friendCollection);
	    },
	    onVisible: function onVisible() {
	        var _this = this;
	
	        this.$el.addClass('load');
	        this.friendCollection.collection.update().done(function () {
	            _this.$el.removeClass('load');
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div class=\"line\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Соседи по рейтингу</h3></div></div><div class=\"line\"><div data-js-friend-list class=\"col-xs-12 p-l-0 p-r-0\"></div></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 409 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 410 */,
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, $, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _personModel = __webpack_require__(62);
	
	var personModel = _interopRequireDefault(_personModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: personModel,
	
	    initialize: function initialize() {
	        this.ready = $.Deferred();
	        this.listenTo(this, 'change:open', this.onChangeOpen);
	    },
	
	    // dfgd
	    parse: function parse(data) {
	        if (data && data.answer) {
	            // let number_rate = 0;
	            this.reset(_.map(data.answer.rate, function (value) {
	                // number_rate+= 1;
	                // value.u_number_rate = number_rate;
	                // value.id = value.enemy_id;
	                return value;
	            }));
	        } else {
	            this.reset([]);
	        }
	        this.ready.resolve();
	    },
	    update: function update() {
	        var _this = this;
	
	        return common.api.getTopPlayerPaid().done(function (data) {
	            _this.parse(data);
	            _this.ready.resolve();
	        }).fail(function (err) {
	            console.log(err.text);
	        });
	    },
	    onChangeOpen: function onChangeOpen(model, open) {
	        if (open) {
	            var openModels = this.where({ open: true });
	            _.each(openModels, function (item) {
	                if (item.get('id') != model.get('id')) {
	                    item.set({ open: false });
	                }
	            });
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _restorePasswordPage = __webpack_require__(413);
	
	var template = _interopRequireDefault(_restorePasswordPage).default;
	
	__webpack_require__(414);
	
	var _infoModal = __webpack_require__(12);
	
	var infoModal = _interopRequireDefault(_infoModal).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.View.extend({
	  template: template,
	  className: 'restore-password-page page',
	
	  ui: {
	    form: 'form',
	    email: '[data-js-email]',
	    buttonRestore: '[data-js-restore]'
	  },
	
	  bindings: {},
	
	  events: {
	    'click @ui.buttonRestore': 'onClickRestore',
	    'submit @ui.form': 'onFormSubmit'
	  },
	
	  initialize: function initialize() {
	    this.model = new common.ValidateModel();
	    this.model.bindingView(this, {
	      '@ui.email': 'email'
	    });
	    this.epoxify();
	    common.headerModel.set({ backPath: 'auth' });
	  },
	  onClickRestore: function onClickRestore(e) {
	    e.preventDefault();
	    e.stopPropagation();
	    this.ui.form.submit();
	  },
	  onFormSubmit: function onFormSubmit(e) {
	    var _this = this;
	
	    e.preventDefault();
	    if (this.model.validate()) {
	      this.ui.buttonRestore.addClass('load');
	      this.$el.addClass('load');
	      common.api.auth.restorePassword(this.model.get('email')).done(function () {
	        new infoModal({ message: 'Письмо с инструкциями по востановлению пароля отправлено на: ' + _this.model.get('email') }).showModal().always(function () {
	          common.router.navigate('', { trigger: true });
	        });
	      }).fail(function (err) {
	        new infoModal({ message: err.text }).showModal();
	      }).always(function () {
	        _this.ui.buttonRestore.removeClass('load');
	        _this.$el.removeClass('load');
	      });
	    }
	  }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(10)))

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><form autocomplete=\"off\" class=\"container\"><input type=\"submit\" class=\"hide\"><div class=\"line\"><label class=\"input col-xs-12\"><span>Email</span><input type=\"email\" data-js-email></label></div><div class=\"line\"><div data-js-restore class=\"btn col-xs-12 single\">Востановить пароль</div></div></form></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 414 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 415 */,
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, Marionette, MarionetteEpoxy, common, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _requestPage = __webpack_require__(417);
	
	var template = _interopRequireDefault(_requestPage).default;
	
	__webpack_require__(418);
	
	var _userWidget = __webpack_require__(311);
	
	var userWidget = _interopRequireDefault(_userWidget).default;
	
	var _personModel = __webpack_require__(62);
	
	var PersonModel = _interopRequireDefault(_personModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RequestCollection = Backbone.Collection.extend({
	    model: PersonModel
	});
	var RequestCollectionView = Marionette.CollectionView.extend({
	    className: 'list-container',
	    tagName: 'ul',
	    childView: userWidget
	});
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'request-page page',
	
	    ui: {},
	
	    bindings: {},
	
	    events: {},
	    regions: {
	        'resultContainer': '[data-js-request-list]'
	    },
	
	    initialize: function initialize() {
	        var _this = this;
	
	        this.collection = new RequestCollection();
	        common.userGameCollection.ready.done(function () {
	            _.each(common.userGameCollection.models, function (model) {
	                if (model.get('isMyRequest')) {
	                    (function () {
	                        var roomId = model.get('room_id');
	                        var modelId = model.get('r_user_id_open');
	                        common.api.user.getDataById(model.get('r_user_id_open')).done(function (data) {
	                            var modelData = data.answer;
	                            modelData.u_number_rate = data.answer.u_rate_pos;
	                            modelData.id = modelId;
	                            modelData.request = true;
	                            modelData.request_room_id = roomId;
	                            _this.collection.add(modelData);
	                        });
	                    })();
	                }
	            });
	        });
	        this.requestCollectionView = new RequestCollectionView({
	            collection: this.collection
	        });
	        common.headerModel.set({ backPath: 'index' });
	    },
	    onRender: function onRender() {
	        this.resultContainer.show(this.requestCollectionView);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(4), __webpack_require__(14), __webpack_require__(10), __webpack_require__(6)))

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"container\"><div class=\"col-xs-12\"><h3 class=\"text-header yellow-text\">Заявки</h3></div><div data-js-request-list></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 418 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 419 */,
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(MarionetteEpoxy, _, common) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _questionPreviewPage = __webpack_require__(421);
	
	var template = _interopRequireDefault(_questionPreviewPage).default;
	
	__webpack_require__(422);
	
	var _questionWidget = __webpack_require__(358);
	
	var questionWidget = _interopRequireDefault(_questionWidget).default;
	
	var _questionModel = __webpack_require__(364);
	
	var questionModel = _interopRequireDefault(_questionModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = MarionetteEpoxy.LayoutView.extend({
	    template: template,
	    className: 'questions-preview-page page bg-blur',
	
	    regions: {
	        questionContainer: '[data-js-question-container]'
	    },
	
	    initialize: function initialize(data) {
	        var dataForModel = {};
	        var params = data.params.split('&');
	        _.each(params, function (param) {
	            var paramSeparate = param.split('=');
	            var paramKey = paramSeparate[0];
	            var paramValue = paramSeparate[1];
	            if (paramKey == 'answers' || paramKey == 'q_img') {
	                try {
	                    paramValue = JSON.parse(paramValue);
	                } catch (err) {
	                    console.log('Не верный параметр для ' + paramKey);
	                    return;
	                }
	            }
	            dataForModel[paramKey] = paramValue;
	        });
	        // this.questionModel = new questionModel({
	        //     q_text: 'текст вопроса',
	        //     answers: [
	        //         {a_text: 'ответ 1'},
	        //         {a_text: 'ответ 2'}
	        //     ],
	        //     q_img: ['http://fonday.ru/images/tmp/16/7/original/16710fBjLzqnJlMXhoFHAG.jpg'],
	        //     q_view: '2'
	        // });
	        this.questionModel = new questionModel(dataForModel);
	    },
	    onRender: function onRender() {
	        this.questionwidget = new questionWidget({
	            model: this.questionModel
	        });
	        this.questionContainer.show(this.questionwidget);
	    },
	    onDestroy: function onDestroy() {
	        common.headerModel.set({ notAction: false });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(6), __webpack_require__(10)))

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div class=\"scroll-content\"><div class=\"table-middle-block\"><div class=\"table-middle-cell\"><div class=\"container\"><div data-js-question-container class=\"questions-answers\"></div></div></div></div></div><div class=\"loading-block\"><div class=\"loading-icon\"></div><div class=\"text-block\"><p>Идет загрузка</p><p>Пожалуйста, подождите</p></div></div>");;return buf.join("");
	}

/***/ },
/* 422 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 423 */,
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _promise = __webpack_require__(425);
	
	var _Promise = _interopRequireDefault(_promise).default;
	
	var _getPrototypeOf = __webpack_require__(478);
	
	var _Object$getPrototypeOf = _interopRequireDefault(_getPrototypeOf).default;
	
	var _classCallCheck2 = __webpack_require__(482);
	
	var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;
	
	var _possibleConstructorReturn2 = __webpack_require__(483);
	
	var _possibleConstructorReturn = _interopRequireDefault(_possibleConstructorReturn2).default;
	
	var _inherits2 = __webpack_require__(501);
	
	var _inherits = _interopRequireDefault(_inherits2).default;
	
	__webpack_require__(508);
	
	var _config = __webpack_require__(509);
	
	var Config = _interopRequireDefault(_config).default;
	
	var _UserModel = __webpack_require__(510);
	
	var UserModel = _interopRequireDefault(_UserModel).default;
	
	var _RoomModel = __webpack_require__(511);
	
	var RoomModel = _interopRequireDefault(_RoomModel).default;
	
	var _RoomWidget = __webpack_require__(517);
	
	var RoomWidget = _interopRequireDefault(_RoomWidget).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AjaxError = function (_Error) {
	    _inherits(AjaxError, _Error);
	
	    function AjaxError(jqXHR, textStatus, errorThrown) {
	        _classCallCheck(this, AjaxError);
	
	        var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(AjaxError).call(this, textStatus));
	
	        _this.name = "AjaxError";
	        _this.message = textStatus;
	        _this.jqXHR = jqXHR;
	        _this.errorThrown = errorThrown;
	        return _this;
	    }
	
	    return AjaxError;
	}(Error);
	
	var Chat = {
	    login: function login(uid, sessionKey, sessionValue, authDeviceId) {
	        var _this2 = this;
	
	        Config.init(sessionKey, sessionValue, authDeviceId);
	
	        if (!this.promise) this.promise = new _Promise(function (resolve, reject) {
	            var user = UserModel.findOrCreate({ uid: uid });
	            user.fetch().done(function () {
	                _this2.user = user;
	                resolve(_this2);
	            }).fail(function (xhr, status, error) {
	                delete _this2.user;
	                delete _this2.promise;
	                reject(new AjaxError(xhr, status, error));
	            });
	        });
	
	        return this.promise;
	    },
	    logout: function logout() {
	        delete this.user;
	        if (this.promise) {
	            delete this.promise;
	        }
	    },
	    getRoomForOpponent: function getRoomForOpponent(uid) {
	        var _this3 = this;
	
	        return new _Promise(function (resolve, reject) {
	            _this3.user.fetch().done(function () {
	                var room = _this3.user.get('chats').find(function (c) {
	                    return c.get('personal') && c.get('users').some(function (u) {
	                        return u.get('uid') == uid;
	                    });
	                });
	                if (room) resolve(room);else {
	                    (function () {
	                        var room = new RoomModel({
	                            users: [_this3.user.get('uid'), uid],
	                            personal: true
	                        });
	
	                        room.save().done(function () {
	                            return resolve(room);
	                        }).fail(function (xhr, status, error) {
	                            return reject(new AjaxError(xhr, status, error));
	                        });
	                    })();
	                }
	            }).fail(function (xhr, status, error) {
	                return reject(new AjaxError(xhr, status, error));
	            });
	        });
	    },
	
	
	    RoomWidget: RoomWidget
	};
	
	//function createUser(uid, session, name) {
	//    let dfd = $.Deferred();
	
	//    let user = UserModel.findOrCreate({ uid });
	//    user.set({ session, name });
	//    user.save()
	//        .done((data, status, xhr) => {
	//            dfd.resolve(user);
	//        })
	//        .fail((xhr, status, error) => {
	//            dfd.reject(status, error);
	//        });
	
	//    return dfd.promise();
	//}
	
	//class AjaxError extends Error {
	//    constructor(jqXHR, textStatus, errorThrown) {
	//        this.name = "AjaxError";
	//        this.message = textStatus;
	//        this.jqXHR = jqXHR;
	//        this.errorThrown = errorThrown;
	//    }
	//}
	
	//let Api = {
	//    init(sessionKey, sessionValue, authDeviceId) {
	//        this.sessionKey = sessionKey;
	//        this.sessionValue = sessionValue;
	//        this.authDeviceId = authDeviceId;
	
	//        return new Promise((resolve, reject) => {
	//            let user = UserModel.findOrCreate({ uid });
	//            user.fetch()
	//                .done(() => resolve(this.user = user))
	//                .fail((xhr, status, error) => {
	//                    delete this.user;
	//                    reject(new AjaxError(xhr, status, error));
	//                })
	//        });
	//    }
	
	//    //fetchOrCreateUser(uid, session, name) {
	//    //    if(queue[uid]) {
	//    //        return queue[uid].dfd.promise();
	//    //    }
	
	//    //    let dfd = $.Deferred();
	
	//    //    queue[uid] = {
	//    //        session,
	//    //        name,
	//    //        dfd
	//    //    };
	
	//    //    dfd.always(() => {
	//    //        delete queue[uid];
	//    //    });
	
	//    //    let user = UserModel.findOrCreate({ uid });
	
	//    //    user
	//    //        .fetch()
	//    //        .done((data, status, xhr) => {
	//    //            if(user.get('session') != session || user.get('name') != name) {
	//    //                createUser(uid, session, name)
	//    //                    .done(user => dfd.resolve(user))
	//    //                    .fail((status, error) => dfd.reject(status, error));
	//    //            } else {
	//    //                dfd.resolve(user);
	//    //            }
	//    //        })
	//    //        .fail((xhr, status, error) => {
	//    //            if (xhr.status == 404) {
	//    //                createUser(uid, session, name)
	//    //                    .done(user => dfd.resolve(user))
	//    //                    .fail((status, error) => dfd.reject(status, error));
	//    //            } else {
	//    //                dfd.reject(status, error);
	//    //            }
	//    //        });
	
	//    //    return dfd.promise();
	//    //},
	//    //getPersonalRoomForUsers(user, opponentUid, opponentName) {
	//    //    let dfd = $.Deferred();
	
	//    //    let room = user.get('chats').find((chat) => chat.get('personal') && chat.get('users').some((user) => user.get('uid') == opponentUid));
	
	//    //    if(room) {
	//    //        dfd.resolve(room);
	//    //    } else {
	//    //        Api.fetchOrCreateUser(opponentUid, '', opponentName)
	//    //            .done((opponent) => {
	//    //                let room = new RoomModel({
	//    //                    users: [
	//    //                        { _id: user.id },
	//    //                        { _id: opponent.id }
	//    //                    ],
	//    //                    personal: true
	//    //                });
	
	//    //                room.save()
	//    //                    .done((data, status, xhr) => dfd.resolve(room) )
	//    //                    .fail((xhr, status, error) => dfd.reject(status, error) );
	//    //            })
	//    //            .fail((status, error) => dfd.reject(status, error) );
	//    //    }
	
	//    //    return dfd.promise();
	//    //}
	//}
	
	exports.default = Chat;

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(426), __esModule: true };

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(427);
	__webpack_require__(428);
	__webpack_require__(457);
	__webpack_require__(461);
	module.exports = __webpack_require__(31).Promise;

/***/ },
/* 427 */
/***/ function(module, exports) {



/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(429)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(432)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(430)
	  , defined   = __webpack_require__(431);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 430 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 431 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(433)
	  , $export        = __webpack_require__(40)
	  , redefine       = __webpack_require__(434)
	  , hide           = __webpack_require__(44)
	  , has            = __webpack_require__(435)
	  , Iterators      = __webpack_require__(436)
	  , $iterCreate    = __webpack_require__(437)
	  , setToStringTag = __webpack_require__(453)
	  , getPrototypeOf = __webpack_require__(455)
	  , ITERATOR       = __webpack_require__(454)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 433 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(44);

/***/ },
/* 435 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 436 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(438)
	  , descriptor     = __webpack_require__(53)
	  , setToStringTag = __webpack_require__(453)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(44)(IteratorPrototype, __webpack_require__(454)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(46)
	  , dPs         = __webpack_require__(439)
	  , enumBugKeys = __webpack_require__(451)
	  , IE_PROTO    = __webpack_require__(448)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(51)('iframe')
	    , i      = enumBugKeys.length
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(452).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(45)
	  , anObject = __webpack_require__(46)
	  , getKeys  = __webpack_require__(440);
	
	module.exports = __webpack_require__(49) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(441)
	  , enumBugKeys = __webpack_require__(451);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(435)
	  , toIObject    = __webpack_require__(442)
	  , arrayIndexOf = __webpack_require__(445)(false)
	  , IE_PROTO     = __webpack_require__(448)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(443)
	  , defined = __webpack_require__(431);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(444);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 444 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(442)
	  , toLength  = __webpack_require__(446)
	  , toIndex   = __webpack_require__(447);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(430)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(430)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(449)('keys')
	  , uid    = __webpack_require__(450);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(41)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 450 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 451 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(41).document && document.documentElement;

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(45).f
	  , has = __webpack_require__(435)
	  , TAG = __webpack_require__(454)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(449)('wks')
	  , uid        = __webpack_require__(450)
	  , Symbol     = __webpack_require__(41).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(435)
	  , toObject    = __webpack_require__(456)
	  , IE_PROTO    = __webpack_require__(448)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(431);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(458);
	var global        = __webpack_require__(41)
	  , hide          = __webpack_require__(44)
	  , Iterators     = __webpack_require__(436)
	  , TO_STRING_TAG = __webpack_require__(454)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(459)
	  , step             = __webpack_require__(460)
	  , Iterators        = __webpack_require__(436)
	  , toIObject        = __webpack_require__(442);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(432)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 459 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 460 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(433)
	  , global             = __webpack_require__(41)
	  , ctx                = __webpack_require__(42)
	  , classof            = __webpack_require__(462)
	  , $export            = __webpack_require__(40)
	  , isObject           = __webpack_require__(47)
	  , anObject           = __webpack_require__(46)
	  , aFunction          = __webpack_require__(43)
	  , anInstance         = __webpack_require__(463)
	  , forOf              = __webpack_require__(464)
	  , setProto           = __webpack_require__(468).set
	  , speciesConstructor = __webpack_require__(471)
	  , task               = __webpack_require__(472).set
	  , microtask          = __webpack_require__(474)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(454)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(475)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(453)($Promise, PROMISE);
	__webpack_require__(476)(PROMISE);
	Wrapper = __webpack_require__(31)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(477)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(444)
	  , TAG = __webpack_require__(454)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 463 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(42)
	  , call        = __webpack_require__(465)
	  , isArrayIter = __webpack_require__(466)
	  , anObject    = __webpack_require__(46)
	  , toLength    = __webpack_require__(446)
	  , getIterFn   = __webpack_require__(467)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(46);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(436)
	  , ITERATOR   = __webpack_require__(454)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(462)
	  , ITERATOR  = __webpack_require__(454)('iterator')
	  , Iterators = __webpack_require__(436);
	module.exports = __webpack_require__(31).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(47)
	  , anObject = __webpack_require__(46);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(42)(Function.call, __webpack_require__(469).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(470)
	  , createDesc     = __webpack_require__(53)
	  , toIObject      = __webpack_require__(442)
	  , toPrimitive    = __webpack_require__(52)
	  , has            = __webpack_require__(435)
	  , IE8_DOM_DEFINE = __webpack_require__(48)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(49) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 470 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(46)
	  , aFunction = __webpack_require__(43)
	  , SPECIES   = __webpack_require__(454)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(42)
	  , invoke             = __webpack_require__(473)
	  , html               = __webpack_require__(452)
	  , cel                = __webpack_require__(51)
	  , global             = __webpack_require__(41)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(444)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 473 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(41)
	  , macrotask = __webpack_require__(472).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(444)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(44);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(41)
	  , core        = __webpack_require__(31)
	  , dP          = __webpack_require__(45)
	  , DESCRIPTORS = __webpack_require__(49)
	  , SPECIES     = __webpack_require__(454)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(454)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(479), __esModule: true };

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(480);
	module.exports = __webpack_require__(31).Object.getPrototypeOf;

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(456)
	  , $getPrototypeOf = __webpack_require__(455);
	
	__webpack_require__(481)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(40)
	  , core    = __webpack_require__(31)
	  , fails   = __webpack_require__(50);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 482 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(484);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(485);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(488);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(486), __esModule: true };

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(428);
	__webpack_require__(457);
	module.exports = __webpack_require__(487).f('iterator');

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(454);

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(489), __esModule: true };

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(490);
	__webpack_require__(427);
	__webpack_require__(499);
	__webpack_require__(500);
	module.exports = __webpack_require__(31).Symbol;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(41)
	  , has            = __webpack_require__(435)
	  , DESCRIPTORS    = __webpack_require__(49)
	  , $export        = __webpack_require__(40)
	  , redefine       = __webpack_require__(434)
	  , META           = __webpack_require__(491).KEY
	  , $fails         = __webpack_require__(50)
	  , shared         = __webpack_require__(449)
	  , setToStringTag = __webpack_require__(453)
	  , uid            = __webpack_require__(450)
	  , wks            = __webpack_require__(454)
	  , wksExt         = __webpack_require__(487)
	  , wksDefine      = __webpack_require__(492)
	  , keyOf          = __webpack_require__(493)
	  , enumKeys       = __webpack_require__(494)
	  , isArray        = __webpack_require__(496)
	  , anObject       = __webpack_require__(46)
	  , toIObject      = __webpack_require__(442)
	  , toPrimitive    = __webpack_require__(52)
	  , createDesc     = __webpack_require__(53)
	  , _create        = __webpack_require__(438)
	  , gOPNExt        = __webpack_require__(497)
	  , $GOPD          = __webpack_require__(469)
	  , $DP            = __webpack_require__(45)
	  , $keys          = __webpack_require__(440)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(498).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(470).f  = $propertyIsEnumerable;
	  __webpack_require__(495).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(433)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(44)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(450)('meta')
	  , isObject = __webpack_require__(47)
	  , has      = __webpack_require__(435)
	  , setDesc  = __webpack_require__(45).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(50)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(41)
	  , core           = __webpack_require__(31)
	  , LIBRARY        = __webpack_require__(433)
	  , wksExt         = __webpack_require__(487)
	  , defineProperty = __webpack_require__(45).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(440)
	  , toIObject = __webpack_require__(442);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(440)
	  , gOPS    = __webpack_require__(495)
	  , pIE     = __webpack_require__(470);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 495 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(444);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(442)
	  , gOPN      = __webpack_require__(498).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(441)
	  , hiddenKeys = __webpack_require__(451).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(492)('asyncIterator');

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(492)('observable');

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(502);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(505);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(484);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(503), __esModule: true };

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(504);
	module.exports = __webpack_require__(31).Object.setPrototypeOf;

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(40);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(468).set});

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(506), __esModule: true };

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(507);
	var $Object = __webpack_require__(31).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(40)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(438)});

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* vim: set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab: */
	/**
	 * Backbone-relational.js 0.10.0
	 * (c) 2011-2014 Paul Uithol and contributors (https://github.com/PaulUithol/Backbone-relational/graphs/contributors)
	 *
	 * Backbone-relational may be freely distributed under the MIT license; see the accompanying LICENSE.txt.
	 * For details and documentation: https://github.com/PaulUithol/Backbone-relational.
	 * Depends on Backbone (and thus on Underscore as well): https://github.com/documentcloud/backbone.
	 *
	 * Example:
	 *
		Zoo = Backbone.RelationalModel.extend({
			relations: [ {
				type: Backbone.HasMany,
				key: 'animals',
				relatedModel: 'Animal',
				reverseRelation: {
					key: 'livesIn',
					includeInJSON: 'id'
					// 'relatedModel' is automatically set to 'Zoo'; the 'relationType' to 'HasOne'.
				}
			} ],
	
			toString: function() {
				return this.get( 'name' );
			}
		});
	
		Animal = Backbone.RelationalModel.extend({
			toString: function() {
				return this.get( 'species' );
			}
		});
	
		// Creating the zoo will give it a collection with one animal in it: the monkey.
		// The animal created after that has a relation `livesIn` that points to the zoo it's currently associated with.
		// If you instantiate (or fetch) the zebra later, it will automatically be added.
	
		var zoo = new Zoo({
			name: 'Artis',
			animals: [ { id: 'monkey-1', species: 'Chimp' }, 'lion-1', 'zebra-1' ]
		});
	
		var lion = new Animal( { id: 'lion-1', species: 'Lion' } ),
			monkey = zoo.get( 'animals' ).first(),
			sameZoo = lion.get( 'livesIn' );
	 */
	( function( root, factory ) {
		// Set up Backbone-relational for the environment. Start with AMD.
		if ( true ) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ exports, __webpack_require__(5), __webpack_require__(6) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}
		// Next for Node.js or CommonJS.
		else if ( typeof exports !== 'undefined' ) {
			factory( exports, require( 'backbone' ), require( 'underscore' ) );
		}
		// Finally, as a browser global. Use `root` here as it references `window`.
		else {
			factory( root, root.Backbone, root._ );
		}
	}( this, function( exports, Backbone, _ ) {
		"use strict";
	
		Backbone.Relational = {
			showWarnings: true
		};
	
		/**
		 * Semaphore mixin; can be used as both binary and counting.
		 **/
		Backbone.Semaphore = {
			_permitsAvailable: null,
			_permitsUsed: 0,
	
			acquire: function() {
				if ( this._permitsAvailable && this._permitsUsed >= this._permitsAvailable ) {
					throw new Error( 'Max permits acquired' );
				}
				else {
					this._permitsUsed++;
				}
			},
	
			release: function() {
				if ( this._permitsUsed === 0 ) {
					throw new Error( 'All permits released' );
				}
				else {
					this._permitsUsed--;
				}
			},
	
			isLocked: function() {
				return this._permitsUsed > 0;
			},
	
			setAvailablePermits: function( amount ) {
				if ( this._permitsUsed > amount ) {
					throw new Error( 'Available permits cannot be less than used permits' );
				}
				this._permitsAvailable = amount;
			}
		};
	
		/**
		 * A BlockingQueue that accumulates items while blocked (via 'block'),
		 * and processes them when unblocked (via 'unblock').
		 * Process can also be called manually (via 'process').
		 */
		Backbone.BlockingQueue = function() {
			this._queue = [];
		};
		_.extend( Backbone.BlockingQueue.prototype, Backbone.Semaphore, {
			_queue: null,
	
			add: function( func ) {
				if ( this.isBlocked() ) {
					this._queue.push( func );
				}
				else {
					func();
				}
			},
	
			// Some of the queued events may trigger other blocking events. By
			// copying the queue here it allows queued events to process closer to
			// the natural order.
			//
			// queue events [ 'A', 'B', 'C' ]
			// A handler of 'B' triggers 'D' and 'E'
			// By copying `this._queue` this executes:
			// [ 'A', 'B', 'D', 'E', 'C' ]
			// The same order the would have executed if they didn't have to be
			// delayed and queued.
			process: function() {
				var queue = this._queue;
				this._queue = [];
				while ( queue && queue.length ) {
					queue.shift()();
				}
			},
	
			block: function() {
				this.acquire();
			},
	
			unblock: function() {
				this.release();
				if ( !this.isBlocked() ) {
					this.process();
				}
			},
	
			isBlocked: function() {
				return this.isLocked();
			}
		});
		/**
		 * Global event queue. Accumulates external events ('add:<key>', 'remove:<key>' and 'change:<key>')
		 * until the top-level object is fully initialized (see 'Backbone.RelationalModel').
		 */
		Backbone.Relational.eventQueue = new Backbone.BlockingQueue();
	
		/**
		 * Backbone.Store keeps track of all created (and destruction of) Backbone.RelationalModel.
		 * Handles lookup for relations.
		 */
		Backbone.Store = function() {
			this._collections = [];
			this._reverseRelations = [];
			this._orphanRelations = [];
			this._subModels = [];
			this._modelScopes = [ exports ];
		};
		_.extend( Backbone.Store.prototype, Backbone.Events, {
			/**
			 * Create a new `Relation`.
			 * @param {Backbone.RelationalModel} [model]
			 * @param {Object} relation
			 * @param {Object} [options]
			 */
			initializeRelation: function( model, relation, options ) {
				var type = !_.isString( relation.type ) ? relation.type : Backbone[ relation.type ] || this.getObjectByName( relation.type );
				if ( type && type.prototype instanceof Backbone.Relation ) {
					var rel = new type( model, relation, options ); // Also pushes the new Relation into `model._relations`
				}
				else {
					Backbone.Relational.showWarnings && typeof console !== 'undefined' && console.warn( 'Relation=%o; missing or invalid relation type!', relation );
				}
			},
	
			/**
			 * Add a scope for `getObjectByName` to look for model types by name.
			 * @param {Object} scope
			 */
			addModelScope: function( scope ) {
				this._modelScopes.push( scope );
			},
	
			/**
			 * Remove a scope.
			 * @param {Object} scope
			 */
			removeModelScope: function( scope ) {
				this._modelScopes = _.without( this._modelScopes, scope );
			},
	
			/**
			 * Add a set of subModelTypes to the store, that can be used to resolve the '_superModel'
			 * for a model later in 'setupSuperModel'.
			 *
			 * @param {Backbone.RelationalModel} subModelTypes
			 * @param {Backbone.RelationalModel} superModelType
			 */
			addSubModels: function( subModelTypes, superModelType ) {
				this._subModels.push({
					'superModelType': superModelType,
					'subModels': subModelTypes
				});
			},
	
			/**
			 * Check if the given modelType is registered as another model's subModel. If so, add it to the super model's
			 * '_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.
			 *
			 * @param {Backbone.RelationalModel} modelType
			 */
			setupSuperModel: function( modelType ) {
				_.find( this._subModels, function( subModelDef ) {
					return _.filter( subModelDef.subModels || [], function( subModelTypeName, typeValue ) {
						var subModelType = this.getObjectByName( subModelTypeName );
	
						if ( modelType === subModelType ) {
							// Set 'modelType' as a child of the found superModel
							subModelDef.superModelType._subModels[ typeValue ] = modelType;
	
							// Set '_superModel', '_subModelTypeValue', and '_subModelTypeAttribute' on 'modelType'.
							modelType._superModel = subModelDef.superModelType;
							modelType._subModelTypeValue = typeValue;
							modelType._subModelTypeAttribute = subModelDef.superModelType.prototype.subModelTypeAttribute;
							return true;
						}
					}, this ).length;
				}, this );
			},
	
			/**
			 * Add a reverse relation. Is added to the 'relations' property on model's prototype, and to
			 * existing instances of 'model' in the store as well.
			 * @param {Object} relation
			 * @param {Backbone.RelationalModel} relation.model
			 * @param {String} relation.type
			 * @param {String} relation.key
			 * @param {String|Object} relation.relatedModel
			 */
			addReverseRelation: function( relation ) {
				var exists = _.any( this._reverseRelations, function( rel ) {
					return _.all( relation || [], function( val, key ) {
						return val === rel[ key ];
					});
				});
	
				if ( !exists && relation.model && relation.type ) {
					this._reverseRelations.push( relation );
					this._addRelation( relation.model, relation );
					this.retroFitRelation( relation );
				}
			},
	
			/**
			 * Deposit a `relation` for which the `relatedModel` can't be resolved at the moment.
			 *
			 * @param {Object} relation
			 */
			addOrphanRelation: function( relation ) {
				var exists = _.any( this._orphanRelations, function( rel ) {
					return _.all( relation || [], function( val, key ) {
						return val === rel[ key ];
					});
				});
	
				if ( !exists && relation.model && relation.type ) {
					this._orphanRelations.push( relation );
				}
			},
	
			/**
			 * Try to initialize any `_orphanRelation`s
			 */
			processOrphanRelations: function() {
				// Make sure to operate on a copy since we're removing while iterating
				_.each( this._orphanRelations.slice( 0 ), function( rel ) {
					var relatedModel = Backbone.Relational.store.getObjectByName( rel.relatedModel );
					if ( relatedModel ) {
						this.initializeRelation( null, rel );
						this._orphanRelations = _.without( this._orphanRelations, rel );
					}
				}, this );
			},
	
			/**
			 *
			 * @param {Backbone.RelationalModel.constructor} type
			 * @param {Object} relation
			 * @private
			 */
			_addRelation: function( type, relation ) {
				if ( !type.prototype.relations ) {
					type.prototype.relations = [];
				}
				type.prototype.relations.push( relation );
	
				_.each( type._subModels || [], function( subModel ) {
					this._addRelation( subModel, relation );
				}, this );
			},
	
			/**
			 * Add a 'relation' to all existing instances of 'relation.model' in the store
			 * @param {Object} relation
			 */
			retroFitRelation: function( relation ) {
				var coll = this.getCollection( relation.model, false );
				coll && coll.each( function( model ) {
					if ( !( model instanceof relation.model ) ) {
						return;
					}
	
					var rel = new relation.type( model, relation );
				}, this );
			},
	
			/**
			 * Find the Store's collection for a certain type of model.
			 * @param {Backbone.RelationalModel} type
			 * @param {Boolean} [create=true] Should a collection be created if none is found?
			 * @return {Backbone.Collection} A collection if found (or applicable for 'model'), or null
			 */
			getCollection: function( type, create ) {
				if ( type instanceof Backbone.RelationalModel ) {
					type = type.constructor;
				}
	
				var rootModel = type;
				while ( rootModel._superModel ) {
					rootModel = rootModel._superModel;
				}
	
				var coll = _.find( this._collections, function( item ) {
					return item.model === rootModel;
				});
	
				if ( !coll && create !== false ) {
					coll = this._createCollection( rootModel );
				}
	
				return coll;
			},
	
			/**
			 * Find a model type on one of the modelScopes by name. Names are split on dots.
			 * @param {String} name
			 * @return {Object}
			 */
			getObjectByName: function( name ) {
				var parts = name.split( '.' ),
					type = null;
	
				_.find( this._modelScopes, function( scope ) {
					type = _.reduce( parts || [], function( memo, val ) {
						return memo ? memo[ val ] : undefined;
					}, scope );
	
					if ( type && type !== scope ) {
						return true;
					}
				}, this );
	
				return type;
			},
	
			_createCollection: function( type ) {
				var coll;
	
				// If 'type' is an instance, take its constructor
				if ( type instanceof Backbone.RelationalModel ) {
					type = type.constructor;
				}
	
				// Type should inherit from Backbone.RelationalModel.
				if ( type.prototype instanceof Backbone.RelationalModel ) {
					coll = new Backbone.Collection();
					coll.model = type;
	
					this._collections.push( coll );
				}
	
				return coll;
			},
	
			/**
			 * Find the attribute that is to be used as the `id` on a given object
			 * @param type
			 * @param {String|Number|Object|Backbone.RelationalModel} item
			 * @return {String|Number}
			 */
			resolveIdForItem: function( type, item ) {
				var id = _.isString( item ) || _.isNumber( item ) ? item : null;
	
				if ( id === null ) {
					if ( item instanceof Backbone.RelationalModel ) {
						id = item.id;
					}
					else if ( _.isObject( item ) ) {
						id = item[ type.prototype.idAttribute ];
					}
				}
	
				// Make all falsy values `null` (except for 0, which could be an id.. see '/issues/179')
				if ( !id && id !== 0 ) {
					id = null;
				}
	
				return id;
			},
	
			/**
			 * Find a specific model of a certain `type` in the store
			 * @param type
			 * @param {String|Number|Object|Backbone.RelationalModel} item
			 */
			find: function( type, item ) {
				var id = this.resolveIdForItem( type, item ),
					coll = this.getCollection( type );
	
				// Because the found object could be of any of the type's superModel
				// types, only return it if it's actually of the type asked for.
				if ( coll ) {
					var obj = coll.get( id );
	
					if ( obj instanceof type ) {
						return obj;
					}
				}
	
				return null;
			},
	
			/**
			 * Add a 'model' to its appropriate collection. Retain the original contents of 'model.collection'.
			 * @param {Backbone.RelationalModel} model
			 */
			register: function( model ) {
				var coll = this.getCollection( model );
	
				if ( coll ) {
					var modelColl = model.collection;
					coll.add( model );
					model.collection = modelColl;
				}
			},
	
			/**
			 * Check if the given model may use the given `id`
			 * @param model
			 * @param [id]
			 */
			checkId: function( model, id ) {
				var coll = this.getCollection( model ),
					duplicate = coll && coll.get( id );
	
				if ( duplicate && model !== duplicate ) {
					if ( Backbone.Relational.showWarnings && typeof console !== 'undefined' ) {
						console.warn( 'Duplicate id! Old RelationalModel=%o, new RelationalModel=%o', duplicate, model );
					}
	
					throw new Error( "Cannot instantiate more than one Backbone.RelationalModel with the same id per type!" );
				}
			},
	
			/**
			 * Explicitly update a model's id in its store collection
			 * @param {Backbone.RelationalModel} model
			 */
			update: function( model ) {
				var coll = this.getCollection( model );
	
				// Register a model if it isn't yet (which happens if it was created without an id).
				if ( !coll.contains( model ) ) {
					this.register( model );
				}
	
				// This triggers updating the lookup indices kept in a collection
				coll._onModelEvent( 'change:' + model.idAttribute, model, coll );
	
				// Trigger an event on model so related models (having the model's new id in their keyContents) can add it.
				model.trigger( 'relational:change:id', model, coll );
			},
	
			/**
			 * Unregister from the store: a specific model, a collection, or a model type.
			 * @param {Backbone.RelationalModel|Backbone.RelationalModel.constructor|Backbone.Collection} type
			 */
			unregister: function( type ) {
				var coll,
					models;
	
				if ( type instanceof Backbone.Model ) {
					coll = this.getCollection( type );
					models = [ type ];
				}
				else if ( type instanceof Backbone.Collection ) {
					coll = this.getCollection( type.model );
					models = _.clone( type.models );
				}
				else {
					coll = this.getCollection( type );
					models = _.clone( coll.models );
				}
	
				_.each( models, function( model ) {
					this.stopListening( model );
					_.invoke( model.getRelations(), 'stopListening' );
				}, this );
	
	
				// If we've unregistered an entire store collection, reset the collection (which is much faster).
				// Otherwise, remove each model one by one.
				if ( _.contains( this._collections, type ) ) {
					coll.reset( [] );
				}
				else {
					_.each( models, function( model ) {
						if ( coll.get( model ) ) {
							coll.remove( model );
						}
						else {
							coll.trigger( 'relational:remove', model, coll );
						}
					}, this );
				}
			},
	
			/**
			 * Reset the `store` to it's original state. The `reverseRelations` are kept though, since attempting to
			 * re-initialize these on models would lead to a large amount of warnings.
			 */
			reset: function() {
				this.stopListening();
	
				// Unregister each collection to remove event listeners
				_.each( this._collections, function( coll ) {
					this.unregister( coll );
				}, this );
	
				this._collections = [];
				this._subModels = [];
				this._modelScopes = [ exports ];
			}
		});
		Backbone.Relational.store = new Backbone.Store();
	
		/**
		 * The main Relation class, from which 'HasOne' and 'HasMany' inherit. Internally, 'relational:<key>' events
		 * are used to regulate addition and removal of models from relations.
		 *
		 * @param {Backbone.RelationalModel} [instance] Model that this relation is created for. If no model is supplied,
		 *      Relation just tries to instantiate it's `reverseRelation` if specified, and bails out after that.
		 * @param {Object} options
		 * @param {string} options.key
		 * @param {Backbone.RelationalModel.constructor} options.relatedModel
		 * @param {Boolean|String} [options.includeInJSON=true] Serialize the given attribute for related model(s)' in toJSON, or just their ids.
		 * @param {Boolean} [options.createModels=true] Create objects from the contents of keys if the object is not found in Backbone.store.
		 * @param {Object} [options.reverseRelation] Specify a bi-directional relation. If provided, Relation will reciprocate
		 *    the relation to the 'relatedModel'. Required and optional properties match 'options', except that it also needs
		 *    {Backbone.Relation|String} type ('HasOne' or 'HasMany').
		 * @param {Object} opts
		 */
		Backbone.Relation = function( instance, options, opts ) {
			this.instance = instance;
			// Make sure 'options' is sane, and fill with defaults from subclasses and this object's prototype
			options = _.isObject( options ) ? options : {};
			this.reverseRelation = _.defaults( options.reverseRelation || {}, this.options.reverseRelation );
			this.options = _.defaults( options, this.options, Backbone.Relation.prototype.options );
	
			this.reverseRelation.type = !_.isString( this.reverseRelation.type ) ? this.reverseRelation.type :
				Backbone[ this.reverseRelation.type ] || Backbone.Relational.store.getObjectByName( this.reverseRelation.type );
	
			this.key = this.options.key;
			this.keySource = this.options.keySource || this.key;
			this.keyDestination = this.options.keyDestination || this.keySource || this.key;
	
			this.model = this.options.model || this.instance.constructor;
	
			this.relatedModel = this.options.relatedModel;
	
			// No 'relatedModel' is interpreted as self-referential
			if ( _.isUndefined( this.relatedModel ) ) {
				this.relatedModel = this.model;
			}
	
			// Otherwise, try to resolve the given value to an object
			if ( _.isFunction( this.relatedModel ) && !( this.relatedModel.prototype instanceof Backbone.RelationalModel ) ) {
				this.relatedModel = _.result( this, 'relatedModel' );
			}
			if ( _.isString( this.relatedModel ) ) {
				this.relatedModel = Backbone.Relational.store.getObjectByName( this.relatedModel );
			}
	
	
			if ( !this.checkPreconditions() ) {
				return;
			}
	
			// Add the reverse relation on 'relatedModel' to the store's reverseRelations
			if ( !this.options.isAutoRelation && this.reverseRelation.type && this.reverseRelation.key ) {
				Backbone.Relational.store.addReverseRelation( _.defaults( {
						isAutoRelation: true,
						model: this.relatedModel,
						relatedModel: this.model,
						reverseRelation: this.options // current relation is the 'reverseRelation' for its own reverseRelation
					},
					this.reverseRelation // Take further properties from this.reverseRelation (type, key, etc.)
				) );
			}
	
			if ( instance ) {
				var contentKey = this.keySource;
				if ( contentKey !== this.key && _.isObject( this.instance.get( this.key ) ) ) {
					contentKey = this.key;
				}
	
				this.setKeyContents( this.instance.get( contentKey ) );
				this.relatedCollection = Backbone.Relational.store.getCollection( this.relatedModel );
	
				// Explicitly clear 'keySource', to prevent a leaky abstraction if 'keySource' differs from 'key'.
				if ( this.keySource !== this.key ) {
					delete this.instance.attributes[ this.keySource ];
				}
	
				// Add this Relation to instance._relations
				this.instance._relations[ this.key ] = this;
	
				this.initialize( opts );
	
				if ( this.options.autoFetch ) {
					this.instance.getAsync( this.key, _.isObject( this.options.autoFetch ) ? this.options.autoFetch : {} );
				}
	
				// When 'relatedModel' are created or destroyed, check if it affects this relation.
				this.listenTo( this.instance, 'destroy', this.destroy )
					.listenTo( this.relatedCollection, 'relational:add relational:change:id', this.tryAddRelated )
					.listenTo( this.relatedCollection, 'relational:remove', this.removeRelated );
			}
		};
		// Fix inheritance :\
		Backbone.Relation.extend = Backbone.Model.extend;
		// Set up all inheritable **Backbone.Relation** properties and methods.
		_.extend( Backbone.Relation.prototype, Backbone.Events, Backbone.Semaphore, {
			options: {
				createModels: true,
				includeInJSON: true,
				isAutoRelation: false,
				autoFetch: false,
				parse: false
			},
	
			instance: null,
			key: null,
			keyContents: null,
			relatedModel: null,
			relatedCollection: null,
			reverseRelation: null,
			related: null,
	
			/**
			 * Check several pre-conditions.
			 * @return {Boolean} True if pre-conditions are satisfied, false if they're not.
			 */
			checkPreconditions: function() {
				var i = this.instance,
					k = this.key,
					m = this.model,
					rm = this.relatedModel,
					warn = Backbone.Relational.showWarnings && typeof console !== 'undefined';
	
				if ( !m || !k || !rm ) {
					warn && console.warn( 'Relation=%o: missing model, key or relatedModel (%o, %o, %o).', this, m, k, rm );
					return false;
				}
				// Check if the type in 'model' inherits from Backbone.RelationalModel
				if ( !( m.prototype instanceof Backbone.RelationalModel ) ) {
					warn && console.warn( 'Relation=%o: model does not inherit from Backbone.RelationalModel (%o).', this, i );
					return false;
				}
				// Check if the type in 'relatedModel' inherits from Backbone.RelationalModel
				if ( !( rm.prototype instanceof Backbone.RelationalModel ) ) {
					warn && console.warn( 'Relation=%o: relatedModel does not inherit from Backbone.RelationalModel (%o).', this, rm );
					return false;
				}
				// Check if this is not a HasMany, and the reverse relation is HasMany as well
				if ( this instanceof Backbone.HasMany && this.reverseRelation.type === Backbone.HasMany ) {
					warn && console.warn( 'Relation=%o: relation is a HasMany, and the reverseRelation is HasMany as well.', this );
					return false;
				}
				// Check if we're not attempting to create a relationship on a `key` that's already used.
				if ( i && _.keys( i._relations ).length ) {
					var existing = _.find( i._relations, function( rel ) {
						return rel.key === k;
					}, this );
	
					if ( existing ) {
						warn && console.warn( 'Cannot create relation=%o on %o for model=%o: already taken by relation=%o.',
							this, k, i, existing );
						return false;
					}
				}
	
				return true;
			},
	
			/**
			 * Set the related model(s) for this relation
			 * @param {Backbone.Model|Backbone.Collection} related
			 */
			setRelated: function( related ) {
				this.related = related;
				this.instance.attributes[ this.key ] = related;
			},
	
			/**
			 * Determine if a relation (on a different RelationalModel) is the reverse
			 * relation of the current one.
			 * @param {Backbone.Relation} relation
			 * @return {Boolean}
			 */
			_isReverseRelation: function( relation ) {
				return relation.instance instanceof this.relatedModel && this.reverseRelation.key === relation.key &&
					this.key === relation.reverseRelation.key;
			},
	
			/**
			 * Get the reverse relations (pointing back to 'this.key' on 'this.instance') for the currently related model(s).
			 * @param {Backbone.RelationalModel} [model] Get the reverse relations for a specific model.
			 *    If not specified, 'this.related' is used.
			 * @return {Backbone.Relation[]}
			 */
			getReverseRelations: function( model ) {
				var reverseRelations = [];
				// Iterate over 'model', 'this.related.models' (if this.related is a Backbone.Collection), or wrap 'this.related' in an array.
				var models = !_.isUndefined( model ) ? [ model ] : this.related && ( this.related.models || [ this.related ] ),
					relations = null,
					relation = null;
	
				for( var i = 0; i < ( models || [] ).length; i++ ) {
					relations = models[ i ].getRelations() || [];
	
					for( var j = 0; j < relations.length; j++ ) {
						relation = relations[ j ];
	
						if ( this._isReverseRelation( relation ) ) {
							reverseRelations.push( relation );
						}
					}
				}
	
				return reverseRelations;
			},
	
			/**
			 * When `this.instance` is destroyed, cleanup our relations.
			 * Get reverse relation, call removeRelated on each.
			 */
			destroy: function() {
				this.stopListening();
	
				if ( this instanceof Backbone.HasOne ) {
					this.setRelated( null );
				}
				else if ( this instanceof Backbone.HasMany ) {
					this.setRelated( this._prepareCollection() );
				}
	
				_.each( this.getReverseRelations(), function( relation ) {
					relation.removeRelated( this.instance );
				}, this );
			}
		});
	
		Backbone.HasOne = Backbone.Relation.extend({
			options: {
				reverseRelation: { type: 'HasMany' }
			},
	
			initialize: function( opts ) {
				this.listenTo( this.instance, 'relational:change:' + this.key, this.onChange );
	
				var related = this.findRelated( opts );
				this.setRelated( related );
	
				// Notify new 'related' object of the new relation.
				_.each( this.getReverseRelations(), function( relation ) {
					relation.addRelated( this.instance, opts );
				}, this );
			},
	
			/**
			 * Find related Models.
			 * @param {Object} [options]
			 * @return {Backbone.Model}
			 */
			findRelated: function( options ) {
				var related = null;
	
				options = _.defaults( { parse: this.options.parse }, options );
	
				if ( this.keyContents instanceof this.relatedModel ) {
					related = this.keyContents;
				}
				else if ( this.keyContents || this.keyContents === 0 ) { // since 0 can be a valid `id` as well
					var opts = _.defaults( { create: this.options.createModels }, options );
					related = this.relatedModel.findOrCreate( this.keyContents, opts );
				}
	
				// Nullify `keyId` if we have a related model; in case it was already part of the relation
				if ( related ) {
					this.keyId = null;
				}
	
				return related;
			},
	
			/**
			 * Normalize and reduce `keyContents` to an `id`, for easier comparison
			 * @param {String|Number|Backbone.Model} keyContents
			 */
			setKeyContents: function( keyContents ) {
				this.keyContents = keyContents;
				this.keyId = Backbone.Relational.store.resolveIdForItem( this.relatedModel, this.keyContents );
			},
	
			/**
			 * Event handler for `change:<key>`.
			 * If the key is changed, notify old & new reverse relations and initialize the new relation.
			 */
			onChange: function( model, attr, options ) {
				// Don't accept recursive calls to onChange (like onChange->findRelated->findOrCreate->initializeRelations->addRelated->onChange)
				if ( this.isLocked() ) {
					return;
				}
				this.acquire();
				options = options ? _.clone( options ) : {};
	
				// 'options.__related' is set by 'addRelated'/'removeRelated'. If it is set, the change
				// is the result of a call from a relation. If it's not, the change is the result of
				// a 'set' call on this.instance.
				var changed = _.isUndefined( options.__related ),
					oldRelated = changed ? this.related : options.__related;
	
				if ( changed ) {
					this.setKeyContents( attr );
					var related = this.findRelated( options );
					this.setRelated( related );
				}
	
				// Notify old 'related' object of the terminated relation
				if ( oldRelated && this.related !== oldRelated ) {
					_.each( this.getReverseRelations( oldRelated ), function( relation ) {
						relation.removeRelated( this.instance, null, options );
					}, this );
				}
	
				// Notify new 'related' object of the new relation. Note we do re-apply even if this.related is oldRelated;
				// that can be necessary for bi-directional relations if 'this.instance' was created after 'this.related'.
				// In that case, 'this.instance' will already know 'this.related', but the reverse might not exist yet.
				_.each( this.getReverseRelations(), function( relation ) {
					relation.addRelated( this.instance, options );
				}, this );
	
				// Fire the 'change:<key>' event if 'related' was updated
				if ( !options.silent && this.related !== oldRelated ) {
					var dit = this;
					this.changed = true;
					Backbone.Relational.eventQueue.add( function() {
						dit.instance.trigger( 'change:' + dit.key, dit.instance, dit.related, options, true );
						dit.changed = false;
					});
				}
				this.release();
			},
	
			/**
			 * If a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'
			 */
			tryAddRelated: function( model, coll, options ) {
				if ( ( this.keyId || this.keyId === 0 ) && model.id === this.keyId ) { // since 0 can be a valid `id` as well
					this.addRelated( model, options );
					this.keyId = null;
				}
			},
	
			addRelated: function( model, options ) {
				// Allow 'model' to set up its relations before proceeding.
				// (which can result in a call to 'addRelated' from a relation of 'model')
				var dit = this;
				model.queue( function() {
					if ( model !== dit.related ) {
						var oldRelated = dit.related || null;
						dit.setRelated( model );
						dit.onChange( dit.instance, model, _.defaults( { __related: oldRelated }, options ) );
					}
				});
			},
	
			removeRelated: function( model, coll, options ) {
				if ( !this.related ) {
					return;
				}
	
				if ( model === this.related ) {
					var oldRelated = this.related || null;
					this.setRelated( null );
					this.onChange( this.instance, model, _.defaults( { __related: oldRelated }, options ) );
				}
			}
		});
	
		Backbone.HasMany = Backbone.Relation.extend({
			collectionType: null,
	
			options: {
				reverseRelation: { type: 'HasOne' },
				collectionType: Backbone.Collection,
				collectionKey: true,
				collectionOptions: {}
			},
	
			initialize: function( opts ) {
				this.listenTo( this.instance, 'relational:change:' + this.key, this.onChange );
	
				// Handle a custom 'collectionType'
				this.collectionType = this.options.collectionType;
				if ( _.isFunction( this.collectionType ) && this.collectionType !== Backbone.Collection && !( this.collectionType.prototype instanceof Backbone.Collection ) ) {
					this.collectionType = _.result( this, 'collectionType' );
				}
				if ( _.isString( this.collectionType ) ) {
					this.collectionType = Backbone.Relational.store.getObjectByName( this.collectionType );
				}
				if ( this.collectionType !== Backbone.Collection && !( this.collectionType.prototype instanceof Backbone.Collection ) ) {
					throw new Error( '`collectionType` must inherit from Backbone.Collection' );
				}
	
				var related = this.findRelated( opts );
				this.setRelated( related );
			},
	
			/**
			 * Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.
			 * If no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.
			 * @param {Backbone.Collection} [collection]
			 * @return {Backbone.Collection}
			 */
			_prepareCollection: function( collection ) {
				if ( this.related ) {
					this.stopListening( this.related );
				}
	
				if ( !collection || !( collection instanceof Backbone.Collection ) ) {
					var options = _.isFunction( this.options.collectionOptions ) ?
						this.options.collectionOptions( this.instance ) : this.options.collectionOptions;
	
					collection = new this.collectionType( null, options );
				}
	
				collection.model = this.relatedModel;
	
				if ( this.options.collectionKey ) {
					var key = this.options.collectionKey === true ? this.options.reverseRelation.key : this.options.collectionKey;
	
					if ( collection[ key ] && collection[ key ] !== this.instance ) {
						if ( Backbone.Relational.showWarnings && typeof console !== 'undefined' ) {
							console.warn( 'Relation=%o; collectionKey=%s already exists on collection=%o', this, key, this.options.collectionKey );
						}
					}
					else if ( key ) {
						collection[ key ] = this.instance;
					}
				}
	
				this.listenTo( collection, 'relational:add', this.handleAddition )
					.listenTo( collection, 'relational:remove', this.handleRemoval )
					.listenTo( collection, 'relational:reset', this.handleReset );
	
				return collection;
			},
	
			/**
			 * Find related Models.
			 * @param {Object} [options]
			 * @return {Backbone.Collection}
			 */
			findRelated: function( options ) {
				var related = null;
	
				options = _.defaults( { parse: this.options.parse }, options );
	
				// Replace 'this.related' by 'this.keyContents' if it is a Backbone.Collection
				if ( this.keyContents instanceof Backbone.Collection ) {
					this._prepareCollection( this.keyContents );
					related = this.keyContents;
				}
				// Otherwise, 'this.keyContents' should be an array of related object ids.
				// Re-use the current 'this.related' if it is a Backbone.Collection; otherwise, create a new collection.
				else {
					var toAdd = [];
	
					_.each( this.keyContents, function( attributes ) {
						var model = null;
	
						if ( attributes instanceof this.relatedModel ) {
							model = attributes;
						}
						else {
							// If `merge` is true, update models here, instead of during update.
							model = ( _.isObject( attributes ) && options.parse && this.relatedModel.prototype.parse ) ?
								this.relatedModel.prototype.parse( _.clone( attributes ), options ) : attributes;
						}
	
						model && toAdd.push( model );
					}, this );
	
					if ( this.related instanceof Backbone.Collection ) {
						related = this.related;
					}
					else {
						related = this._prepareCollection();
					}
	
					// By now, `parse` will already have been executed just above for models if specified.
					// Disable to prevent additional calls.
					related.set( toAdd, _.defaults( { parse: false }, options ) );
				}
	
				// Remove entries from `keyIds` that were already part of the relation (and are thus 'unchanged')
				this.keyIds = _.difference( this.keyIds, _.pluck( related.models, 'id' ) );
	
				return related;
			},
	
			/**
			 * Normalize and reduce `keyContents` to a list of `ids`, for easier comparison
			 * @param {String|Number|String[]|Number[]|Backbone.Collection} keyContents
			 */
			setKeyContents: function( keyContents ) {
				this.keyContents = keyContents instanceof Backbone.Collection ? keyContents : null;
				this.keyIds = [];
	
				if ( !this.keyContents && ( keyContents || keyContents === 0 ) ) { // since 0 can be a valid `id` as well
					// Handle cases the an API/user supplies just an Object/id instead of an Array
					this.keyContents = _.isArray( keyContents ) ? keyContents : [ keyContents ];
	
					_.each( this.keyContents, function( item ) {
						var itemId = Backbone.Relational.store.resolveIdForItem( this.relatedModel, item );
						if ( itemId || itemId === 0 ) {
							this.keyIds.push( itemId );
						}
					}, this );
				}
			},
	
			/**
			 * Event handler for `change:<key>`.
			 * If the contents of the key are changed, notify old & new reverse relations and initialize the new relation.
			 */
			onChange: function( model, attr, options ) {
				options = options ? _.clone( options ) : {};
				this.setKeyContents( attr );
				this.changed = false;
	
				var related = this.findRelated( options );
				this.setRelated( related );
	
				if ( !options.silent ) {
					var dit = this;
					Backbone.Relational.eventQueue.add( function() {
						// The `changed` flag can be set in `handleAddition` or `handleRemoval`
						if ( dit.changed ) {
							dit.instance.trigger( 'change:' + dit.key, dit.instance, dit.related, options, true );
							dit.changed = false;
						}
					});
				}
			},
	
			/**
			 * When a model is added to a 'HasMany', trigger 'add' on 'this.instance' and notify reverse relations.
			 * (should be 'HasOne', must set 'this.instance' as their related).
			 */
			handleAddition: function( model, coll, options ) {
				//console.debug('handleAddition called; args=%o', arguments);
				options = options ? _.clone( options ) : {};
				this.changed = true;
	
				_.each( this.getReverseRelations( model ), function( relation ) {
					relation.addRelated( this.instance, options );
				}, this );
	
				// Only trigger 'add' once the newly added model is initialized (so, has its relations set up)
				var dit = this;
				!options.silent && Backbone.Relational.eventQueue.add( function() {
					dit.instance.trigger( 'add:' + dit.key, model, dit.related, options );
				});
			},
	
			/**
			 * When a model is removed from a 'HasMany', trigger 'remove' on 'this.instance' and notify reverse relations.
			 * (should be 'HasOne', which should be nullified)
			 */
			handleRemoval: function( model, coll, options ) {
				//console.debug('handleRemoval called; args=%o', arguments);
				options = options ? _.clone( options ) : {};
				this.changed = true;
	
				_.each( this.getReverseRelations( model ), function( relation ) {
					relation.removeRelated( this.instance, null, options );
				}, this );
	
				var dit = this;
				!options.silent && Backbone.Relational.eventQueue.add( function() {
					dit.instance.trigger( 'remove:' + dit.key, model, dit.related, options );
				});
			},
	
			handleReset: function( coll, options ) {
				var dit = this;
				options = options ? _.clone( options ) : {};
				!options.silent && Backbone.Relational.eventQueue.add( function() {
					dit.instance.trigger( 'reset:' + dit.key, dit.related, options );
				});
			},
	
			tryAddRelated: function( model, coll, options ) {
				var item = _.contains( this.keyIds, model.id );
	
				if ( item ) {
					this.addRelated( model, options );
					this.keyIds = _.without( this.keyIds, model.id );
				}
			},
	
			addRelated: function( model, options ) {
				// Allow 'model' to set up its relations before proceeding.
				// (which can result in a call to 'addRelated' from a relation of 'model')
				var dit = this;
				model.queue( function() {
					if ( dit.related && !dit.related.get( model ) ) {
						dit.related.add( model, _.defaults( { parse: false }, options ) );
					}
				});
			},
	
			removeRelated: function( model, coll, options ) {
				if ( this.related.get( model ) ) {
					this.related.remove( model, options );
				}
			}
		});
	
		/**
		 * A type of Backbone.Model that also maintains relations to other models and collections.
		 * New events when compared to the original:
		 *  - 'add:<key>' (model, related collection, options)
		 *  - 'remove:<key>' (model, related collection, options)
		 *  - 'change:<key>' (model, related model or collection, options)
		 */
		Backbone.RelationalModel = Backbone.Model.extend({
			relations: null, // Relation descriptions on the prototype
			_relations: null, // Relation instances
			_isInitialized: false,
			_deferProcessing: false,
			_queue: null,
			_attributeChangeFired: false, // Keeps track of `change` event firing under some conditions (like nested `set`s)
	
			subModelTypeAttribute: 'type',
			subModelTypes: null,
	
			constructor: function( attributes, options ) {
				// Nasty hack, for cases like 'model.get( <HasMany key> ).add( item )'.
				// Defer 'processQueue', so that when 'Relation.createModels' is used we trigger 'HasMany'
				// collection events only after the model is really fully set up.
				// Example: event for "p.on( 'add:jobs' )" -> "p.get('jobs').add( { company: c.id, person: p.id } )".
				if ( options && options.collection ) {
					var dit = this,
						collection = this.collection = options.collection;
	
					// Prevent `collection` from cascading down to nested models; they shouldn't go into this `if` clause.
					delete options.collection;
	
					this._deferProcessing = true;
	
					var processQueue = function( model ) {
						if ( model === dit ) {
							dit._deferProcessing = false;
							dit.processQueue();
							collection.off( 'relational:add', processQueue );
						}
					};
					collection.on( 'relational:add', processQueue );
	
					// So we do process the queue eventually, regardless of whether this model actually gets added to 'options.collection'.
					_.defer( function() {
						processQueue( dit );
					});
				}
	
				Backbone.Relational.store.processOrphanRelations();
				Backbone.Relational.store.listenTo( this, 'relational:unregister', Backbone.Relational.store.unregister );
	
				this._queue = new Backbone.BlockingQueue();
				this._queue.block();
				Backbone.Relational.eventQueue.block();
	
				try {
					Backbone.Model.apply( this, arguments );
				}
				finally {
					// Try to run the global queue holding external events
					Backbone.Relational.eventQueue.unblock();
				}
			},
	
			/**
			 * Override 'trigger' to queue 'change' and 'change:*' events
			 */
			trigger: function( eventName ) {
				if ( eventName.length > 5 && eventName.indexOf( 'change' ) === 0 ) {
					var dit = this,
						args = arguments;
	
					if ( !Backbone.Relational.eventQueue.isBlocked() ) {
						// If we're not in a more complicated nested scenario, fire the change event right away
						Backbone.Model.prototype.trigger.apply( dit, args );
					}
					else {
						Backbone.Relational.eventQueue.add( function() {
							// Determine if the `change` event is still valid, now that all relations are populated
							var changed = true;
							if ( eventName === 'change' ) {
								// `hasChanged` may have gotten reset by nested calls to `set`.
								changed = dit.hasChanged() || dit._attributeChangeFired;
								dit._attributeChangeFired = false;
							}
							else {
								var attr = eventName.slice( 7 ),
									rel = dit.getRelation( attr );
	
								if ( rel ) {
									// If `attr` is a relation, `change:attr` get triggered from `Relation.onChange`.
									// These take precedence over `change:attr` events triggered by `Model.set`.
									// The relation sets a fourth attribute to `true`. If this attribute is present,
									// continue triggering this event; otherwise, it's from `Model.set` and should be stopped.
									changed = ( args[ 4 ] === true );
	
									// If this event was triggered by a relation, set the right value in `this.changed`
									// (a Collection or Model instead of raw data).
									if ( changed ) {
										dit.changed[ attr ] = args[ 2 ];
									}
									// Otherwise, this event is from `Model.set`. If the relation doesn't report a change,
									// remove attr from `dit.changed` so `hasChanged` doesn't take it into account.
									else if ( !rel.changed ) {
										delete dit.changed[ attr ];
									}
								}
								else if ( changed ) {
									dit._attributeChangeFired = true;
								}
							}
	
							changed && Backbone.Model.prototype.trigger.apply( dit, args );
						});
					}
				}
				else if ( eventName === 'destroy' ) {
					Backbone.Model.prototype.trigger.apply( this, arguments );
					Backbone.Relational.store.unregister( this );
				}
				else {
					Backbone.Model.prototype.trigger.apply( this, arguments );
				}
	
				return this;
			},
	
			/**
			 * Initialize Relations present in this.relations; determine the type (HasOne/HasMany), then creates a new instance.
			 * Invoked in the first call so 'set' (which is made from the Backbone.Model constructor).
			 */
			initializeRelations: function( options ) {
				this.acquire(); // Setting up relations often also involve calls to 'set', and we only want to enter this function once
				this._relations = {};
	
				_.each( this.relations || [], function( rel ) {
					Backbone.Relational.store.initializeRelation( this, rel, options );
				}, this );
	
				this._isInitialized = true;
				this.release();
				this.processQueue();
			},
	
			/**
			 * When new values are set, notify this model's relations (also if options.silent is set).
			 * (called from `set`; Relation.setRelated locks this model before calling 'set' on it to prevent loops)
			 * @param {Object} [changedAttrs]
			 * @param {Object} [options]
			 */
			updateRelations: function( changedAttrs, options ) {
				if ( this._isInitialized && !this.isLocked() ) {
					_.each( this._relations, function( rel ) {
						if ( !changedAttrs || ( rel.keySource in changedAttrs || rel.key in changedAttrs ) ) {
							// Fetch data in `rel.keySource` if data got set in there, or `rel.key` otherwise
							var value = this.attributes[ rel.keySource ] || this.attributes[ rel.key ],
								attr = changedAttrs && ( changedAttrs[ rel.keySource ] || changedAttrs[ rel.key ] );
	
							// Update a relation if its value differs from this model's attributes, or it's been explicitly nullified.
							// Which can also happen before the originally intended related model has been found (`val` is null).
							if ( rel.related !== value || ( value === null && attr === null ) ) {
								this.trigger( 'relational:change:' + rel.key, this, value, options || {} );
							}
						}
	
						// Explicitly clear 'keySource', to prevent a leaky abstraction if 'keySource' differs from 'key'.
						if ( rel.keySource !== rel.key ) {
							delete this.attributes[ rel.keySource ];
						}
					}, this );
				}
			},
	
			/**
			 * Either add to the queue (if we're not initialized yet), or execute right away.
			 */
			queue: function( func ) {
				this._queue.add( func );
			},
	
			/**
			 * Process _queue
			 */
			processQueue: function() {
				if ( this._isInitialized && !this._deferProcessing && this._queue.isBlocked() ) {
					this._queue.unblock();
				}
			},
	
			/**
			 * Get a specific relation.
			 * @param {string} attr The relation key to look for.
			 * @return {Backbone.Relation} An instance of 'Backbone.Relation', if a relation was found for 'attr', or null.
			 */
			getRelation: function( attr ) {
				return this._relations[ attr ];
			},
	
			/**
			 * Get all of the created relations.
			 * @return {Backbone.Relation[]}
			 */
			getRelations: function() {
				return _.values( this._relations );
			},
	
	
			/**
			 * Get a list of ids that will be fetched on a call to `getAsync`.
			 * @param {string|Backbone.Relation} attr The relation key to fetch models for.
			 * @param [refresh=false] Add ids for models that are already in the relation, refreshing them?
			 * @return {Array} An array of ids that need to be fetched.
			 */
			getIdsToFetch: function( attr, refresh ) {
				var rel = attr instanceof Backbone.Relation ? attr : this.getRelation( attr ),
					ids = rel ? ( rel.keyIds && rel.keyIds.slice( 0 ) ) || ( ( rel.keyId || rel.keyId === 0 ) ? [ rel.keyId ] : [] ) : [];
	
				// On `refresh`, add the ids for current models in the relation to `idsToFetch`
				if ( refresh ) {
					var models = rel.related && ( rel.related.models || [ rel.related ] );
					_.each( models, function( model ) {
						if ( model.id || model.id === 0 ) {
							ids.push( model.id );
						}
					});
				}
	
				return ids;
			},
	
			/**
			 * Get related objects. Returns a single promise, which can either resolve immediately (if the related model[s])
			 * are already present locally, or after fetching the contents of the requested attribute.
			 * @param {string} attr The relation key to fetch models for.
			 * @param {Object} [options] Options for 'Backbone.Model.fetch' and 'Backbone.sync'.
			 * @param {Boolean} [options.refresh=false] Fetch existing models from the server as well (in order to update them).
			 * @return {jQuery.Deferred} A jQuery promise object. When resolved, its `done` callback will be called with
			 *  contents of `attr`.
			 */
			getAsync: function( attr, options ) {
				// Set default `options` for fetch
				options = _.extend( { add: true, remove: false, refresh: false }, options );
	
				var dit = this,
					requests = [],
					rel = this.getRelation( attr ),
					idsToFetch = rel && this.getIdsToFetch( rel, options.refresh ),
					coll = rel.related instanceof Backbone.Collection ? rel.related : rel.relatedCollection;
	
				if ( idsToFetch && idsToFetch.length ) {
					var models = [],
						createdModels = [],
						setUrl,
						createModels = function() {
							// Find (or create) a model for each one that is to be fetched
							models = _.map( idsToFetch, function( id ) {
								var model = rel.relatedModel.findModel( id );
	
								if ( !model ) {
									var attrs = {};
									attrs[ rel.relatedModel.prototype.idAttribute ] = id;
									model = rel.relatedModel.findOrCreate( attrs, options );
									createdModels.push( model );
								}
	
								return model;
							}, this );
						};
	
					// Try if the 'collection' can provide a url to fetch a set of models in one request.
					// This assumes that when 'Backbone.Collection.url' is a function, it can handle building of set urls.
					// To make sure it can, test if the url we got by supplying a list of models to fetch is different from
					// the one supplied for the default fetch action (without args to 'url').
					if ( coll instanceof Backbone.Collection && _.isFunction( coll.url ) ) {
						var defaultUrl = coll.url();
						setUrl = coll.url( idsToFetch );
	
						if ( setUrl === defaultUrl ) {
							createModels();
							setUrl = coll.url( models );
	
							if ( setUrl === defaultUrl ) {
								setUrl = null;
							}
						}
					}
	
					if ( setUrl ) {
						// Do a single request to fetch all models
						var opts = _.defaults(
							{
								error: function() {
									_.each( createdModels, function( model ) {
										model.trigger( 'destroy', model, model.collection, options );
									});
									
									options.error && options.error.apply( models, arguments );
								},
								url: setUrl
							},
							options
						);
	
						requests = [ coll.fetch( opts ) ];
					}
					else {
						// Make a request per model to fetch
						if  ( !models.length ) {
							createModels();
						}
	
						requests = _.map( models, function( model ) {
							var opts = _.defaults(
								{
									error: function() {
										if ( _.contains( createdModels, model ) ) {
											model.trigger( 'destroy', model, model.collection, options );
										}
										options.error && options.error.apply( models, arguments );
									}
								},
								options
							);
							return model.fetch( opts );
						}, this );
					}
				}
	
				return this.deferArray(requests).then(
					function() {
						return Backbone.Model.prototype.get.call( dit, attr );
					}
				);
			},
			
			deferArray: function(deferArray) {
				return Backbone.$.when.apply(null, deferArray);
			},
	
			set: function( key, value, options ) {
				Backbone.Relational.eventQueue.block();
	
				// Duplicate backbone's behavior to allow separate key/value parameters, instead of a single 'attributes' object
				var attributes,
					result;
	
				if ( _.isObject( key ) || key == null ) {
					attributes = key;
					options = value;
				}
				else {
					attributes = {};
					attributes[ key ] = value;
				}
	
				try {
					var id = this.id,
						newId = attributes && this.idAttribute in attributes && attributes[ this.idAttribute ];
	
					// Check if we're not setting a duplicate id before actually calling `set`.
					Backbone.Relational.store.checkId( this, newId );
	
					result = Backbone.Model.prototype.set.apply( this, arguments );
	
					// Ideal place to set up relations, if this is the first time we're here for this model
					if ( !this._isInitialized && !this.isLocked() ) {
						this.constructor.initializeModelHierarchy();
	
						// Only register models that have an id. A model will be registered when/if it gets an id later on.
						if ( newId || newId === 0 ) {
							Backbone.Relational.store.register( this );
						}
	
						this.initializeRelations( options );
					}
					// The store should know about an `id` update asap
					else if ( newId && newId !== id ) {
						Backbone.Relational.store.update( this );
					}
	
					if ( attributes ) {
						this.updateRelations( attributes, options );
					}
				}
				finally {
					// Try to run the global queue holding external events
					Backbone.Relational.eventQueue.unblock();
				}
	
				return result;
			},
	
			clone: function() {
				var attributes = _.clone( this.attributes );
				if ( !_.isUndefined( attributes[ this.idAttribute ] ) ) {
					attributes[ this.idAttribute ] = null;
				}
	
				_.each( this.getRelations(), function( rel ) {
					delete attributes[ rel.key ];
				});
	
				return new this.constructor( attributes );
			},
	
			/**
			 * Convert relations to JSON, omits them when required
			 */
			toJSON: function( options ) {
				// If this Model has already been fully serialized in this branch once, return to avoid loops
				if ( this.isLocked() ) {
					return this.id;
				}
	
				this.acquire();
				var json = Backbone.Model.prototype.toJSON.call( this, options );
	
				if ( this.constructor._superModel && !( this.constructor._subModelTypeAttribute in json ) ) {
					json[ this.constructor._subModelTypeAttribute ] = this.constructor._subModelTypeValue;
				}
	
				_.each( this._relations, function( rel ) {
					var related = json[ rel.key ],
						includeInJSON = rel.options.includeInJSON,
						value = null;
	
					if ( includeInJSON === true ) {
						if ( related && _.isFunction( related.toJSON ) ) {
							value = related.toJSON( options );
						}
					}
					else if ( _.isString( includeInJSON ) ) {
						if ( related instanceof Backbone.Collection ) {
							value = related.pluck( includeInJSON );
						}
						else if ( related instanceof Backbone.Model ) {
							value = related.get( includeInJSON );
						}
	
						// Add ids for 'unfound' models if includeInJSON is equal to (only) the relatedModel's `idAttribute`
						if ( includeInJSON === rel.relatedModel.prototype.idAttribute ) {
							if ( rel instanceof Backbone.HasMany ) {
								value = value.concat( rel.keyIds );
							}
							else if ( rel instanceof Backbone.HasOne ) {
								value = value || rel.keyId;
	
								if ( !value && !_.isObject( rel.keyContents ) ) {
									value = rel.keyContents || null;
								}
							}
						}
					}
					else if ( _.isArray( includeInJSON ) ) {
						if ( related instanceof Backbone.Collection ) {
							value = [];
							related.each( function( model ) {
								var curJson = {};
								_.each( includeInJSON, function( key ) {
									curJson[ key ] = model.get( key );
								});
								value.push( curJson );
							});
						}
						else if ( related instanceof Backbone.Model ) {
							value = {};
							_.each( includeInJSON, function( key ) {
								value[ key ] = related.get( key );
							});
						}
					}
					else {
						delete json[ rel.key ];
					}
	
					// In case of `wait: true`, Backbone will simply push whatever's passed into `save` into attributes.
					// We'll want to get this information into the JSON, even if it doesn't conform to our normal
					// expectations of what's contained in it (no model/collection for a relation, etc).
					if ( value === null && options && options.wait ) {
						value = related;
					}
	
					if ( includeInJSON ) {
						json[ rel.keyDestination ] = value;
					}
	
					if ( rel.keyDestination !== rel.key ) {
						delete json[ rel.key ];
					}
				});
	
				this.release();
				return json;
			}
		},
		{
			/**
			 *
			 * @param superModel
			 * @returns {Backbone.RelationalModel.constructor}
			 */
			setup: function( superModel ) {
				// We don't want to share a relations array with a parent, as this will cause problems with reverse
				// relations. Since `relations` may also be a property or function, only use slice if we have an array.
				this.prototype.relations = ( this.prototype.relations || [] ).slice( 0 );
	
				this._subModels = {};
				this._superModel = null;
	
				// If this model has 'subModelTypes' itself, remember them in the store
				if ( this.prototype.hasOwnProperty( 'subModelTypes' ) ) {
					Backbone.Relational.store.addSubModels( this.prototype.subModelTypes, this );
				}
				// The 'subModelTypes' property should not be inherited, so reset it.
				else {
					this.prototype.subModelTypes = null;
				}
	
				// Initialize all reverseRelations that belong to this new model.
				_.each( this.prototype.relations || [], function( rel ) {
					if ( !rel.model ) {
						rel.model = this;
					}
	
					if ( rel.reverseRelation && rel.model === this ) {
						var preInitialize = true;
						if ( _.isString( rel.relatedModel ) ) {
							/**
							 * The related model might not be defined for two reasons
							 *  1. it is related to itself
							 *  2. it never gets defined, e.g. a typo
							 *  3. the model hasn't been defined yet, but will be later
							 * In neither of these cases do we need to pre-initialize reverse relations.
							 * However, for 3. (which is, to us, indistinguishable from 2.), we do need to attempt
							 * setting up this relation again later, in case the related model is defined later.
							 */
							var relatedModel = Backbone.Relational.store.getObjectByName( rel.relatedModel );
							preInitialize = relatedModel && ( relatedModel.prototype instanceof Backbone.RelationalModel );
						}
	
						if ( preInitialize ) {
							Backbone.Relational.store.initializeRelation( null, rel );
						}
						else if ( _.isString( rel.relatedModel ) ) {
							Backbone.Relational.store.addOrphanRelation( rel );
						}
					}
				}, this );
	
				return this;
			},
	
			/**
			 * Create a 'Backbone.Model' instance based on 'attributes'.
			 * @param {Object} attributes
			 * @param {Object} [options]
			 * @return {Backbone.Model}
			 */
			build: function( attributes, options ) {
				// 'build' is a possible entrypoint; it's possible no model hierarchy has been determined yet.
				this.initializeModelHierarchy();
	
				// Determine what type of (sub)model should be built if applicable.
				var model = this._findSubModelType( this, attributes ) || this;
	
				return new model( attributes, options );
			},
	
			/**
			 * Determines what type of (sub)model should be built if applicable.
			 * Looks up the proper subModelType in 'this._subModels', recursing into
			 * types until a match is found.  Returns the applicable 'Backbone.Model'
			 * or null if no match is found.
			 * @param {Backbone.Model} type
			 * @param {Object} attributes
			 * @return {Backbone.Model}
			 */
			_findSubModelType: function( type, attributes ) {
				if ( type._subModels && type.prototype.subModelTypeAttribute in attributes ) {
					var subModelTypeAttribute = attributes[ type.prototype.subModelTypeAttribute ];
					var subModelType = type._subModels[ subModelTypeAttribute ];
					if ( subModelType ) {
						return subModelType;
					}
					else {
						// Recurse into subModelTypes to find a match
						for ( subModelTypeAttribute in type._subModels ) {
							subModelType = this._findSubModelType( type._subModels[ subModelTypeAttribute ], attributes );
							if ( subModelType ) {
								return subModelType;
							}
						}
					}
				}
	
				return null;
			},
	
			/**
			 *
			 */
			initializeModelHierarchy: function() {
				// Inherit any relations that have been defined in the parent model.
				this.inheritRelations();
	
				// If we came here through 'build' for a model that has 'subModelTypes' then try to initialize the ones that
				// haven't been resolved yet.
				if ( this.prototype.subModelTypes ) {
					var resolvedSubModels = _.keys( this._subModels );
					var unresolvedSubModels = _.omit( this.prototype.subModelTypes, resolvedSubModels );
					_.each( unresolvedSubModels, function( subModelTypeName ) {
						var subModelType = Backbone.Relational.store.getObjectByName( subModelTypeName );
						subModelType && subModelType.initializeModelHierarchy();
					});
				}
			},
	
			inheritRelations: function() {
				// Bail out if we've been here before.
				if ( !_.isUndefined( this._superModel ) && !_.isNull( this._superModel ) ) {
					return;
				}
				// Try to initialize the _superModel.
				Backbone.Relational.store.setupSuperModel( this );
	
				// If a superModel has been found, copy relations from the _superModel if they haven't been inherited automatically
				// (due to a redefinition of 'relations').
				if ( this._superModel ) {
					// The _superModel needs a chance to initialize its own inherited relations before we attempt to inherit relations
					// from the _superModel. You don't want to call 'initializeModelHierarchy' because that could cause sub-models of
					// this class to inherit their relations before this class has had chance to inherit it's relations.
					this._superModel.inheritRelations();
					if ( this._superModel.prototype.relations ) {
						// Find relations that exist on the '_superModel', but not yet on this model.
						var inheritedRelations = _.filter( this._superModel.prototype.relations || [], function( superRel ) {
							return !_.any( this.prototype.relations || [], function( rel ) {
								return superRel.relatedModel === rel.relatedModel && superRel.key === rel.key;
							}, this );
						}, this );
	
						this.prototype.relations = inheritedRelations.concat( this.prototype.relations );
					}
				}
				// Otherwise, make sure we don't get here again for this type by making '_superModel' false so we fail the
				// isUndefined/isNull check next time.
				else {
					this._superModel = false;
				}
			},
	
			/**
			 * Find an instance of `this` type in 'Backbone.Relational.store'.
			 * A new model is created if no matching model is found, `attributes` is an object, and `options.create` is true.
			 * - If `attributes` is a string or a number, `findOrCreate` will query the `store` and return a model if found.
			 * - If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.merge` is `false`.
			 * @param {Object|String|Number} attributes Either a model's id, or the attributes used to create or update a model.
			 * @param {Object} [options]
			 * @param {Boolean} [options.create=true]
			 * @param {Boolean} [options.merge=true]
			 * @param {Boolean} [options.parse=false]
			 * @return {Backbone.RelationalModel}
			 */
			findOrCreate: function( attributes, options ) {
				options || ( options = {} );
				var parsedAttributes = ( _.isObject( attributes ) && options.parse && this.prototype.parse ) ?
					this.prototype.parse( _.clone( attributes ), options ) : attributes;
	
				// If specified, use a custom `find` function to match up existing models to the given attributes.
				// Otherwise, try to find an instance of 'this' model type in the store
				var model = this.findModel( parsedAttributes );
	
				// If we found an instance, update it with the data in 'item' (unless 'options.merge' is false).
				// If not, create an instance (unless 'options.create' is false).
				if ( _.isObject( attributes ) ) {
					if ( model && options.merge !== false ) {
						// Make sure `options.collection` and `options.url` doesn't cascade to nested models
						delete options.collection;
						delete options.url;
	
						model.set( parsedAttributes, options );
					}
					else if ( !model && options.create !== false ) {
						model = this.build( parsedAttributes, _.defaults( { parse: false }, options ) );
					}
				}
	
				return model;
			},
	
			/**
			 * Find an instance of `this` type in 'Backbone.Relational.store'.
			 * - If `attributes` is a string or a number, `find` will query the `store` and return a model if found.
			 * - If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.merge` is `false`.
			 * @param {Object|String|Number} attributes Either a model's id, or the attributes used to create or update a model.
			 * @param {Object} [options]
			 * @param {Boolean} [options.merge=true]
			 * @param {Boolean} [options.parse=false]
			 * @return {Backbone.RelationalModel}
			 */
			find: function( attributes, options ) {
				options || ( options = {} );
				options.create = false;
				return this.findOrCreate( attributes, options );
			},
	
			/**
			 * A hook to override the matching when updating (or creating) a model.
			 * The default implementation is to look up the model by id in the store.
			 * @param {Object} attributes
			 * @returns {Backbone.RelationalModel}
			 */
			findModel: function( attributes ) {
				return Backbone.Relational.store.find( this, attributes );
			}
		});
		_.extend( Backbone.RelationalModel.prototype, Backbone.Semaphore );
	
		/**
		 * Override Backbone.Collection._prepareModel, so objects will be built using the correct type
		 * if the collection.model has subModels.
		 * Attempts to find a model for `attrs` in Backbone.store through `findOrCreate`
		 * (which sets the new properties on it if found), or instantiates a new model.
		 */
		Backbone.Collection.prototype.__prepareModel = Backbone.Collection.prototype._prepareModel;
		Backbone.Collection.prototype._prepareModel = function( attrs, options ) {
			var model;
	
			if ( attrs instanceof Backbone.Model ) {
				if ( !attrs.collection ) {
					attrs.collection = this;
				}
				model = attrs;
			}
			else {
				options = options ? _.clone( options ) : {};
				options.collection = this;
	
				if ( typeof this.model.findOrCreate !== 'undefined' ) {
					model = this.model.findOrCreate( attrs, options );
				}
				else {
					model = new this.model( attrs, options );
				}
	
				if ( model && model.validationError ) {
					this.trigger( 'invalid', this, attrs, options );
					model = false;
				}
			}
	
			return model;
		};
	
	
		/**
		 * Override Backbone.Collection.set, so we'll create objects from attributes where required,
		 * and update the existing models. Also, trigger 'relational:add'.
		 */
		var set = Backbone.Collection.prototype.__set = Backbone.Collection.prototype.set;
		Backbone.Collection.prototype.set = function( models, options ) {
			// Short-circuit if this Collection doesn't hold RelationalModels
			if ( !( this.model.prototype instanceof Backbone.RelationalModel ) ) {
				return set.call( this, models, options );
			}
	
			if ( options && options.parse ) {
				models = this.parse( models, options );
			}
	
			var singular = !_.isArray( models ),
				newModels = [],
				toAdd = [],
				model = null;
	
			models = singular ? ( models ? [ models ] : [] ) : _.clone( models );
	
			//console.debug( 'calling add on coll=%o; model=%o, options=%o', this, models, options );
			for ( var i = 0; i < models.length; i++ ) {
				model = models[i];
				if ( !( model instanceof Backbone.Model ) ) {
					model = Backbone.Collection.prototype._prepareModel.call( this, model, options );
				}
				if ( model ) {
					toAdd.push( model );
					if ( !( this.get( model ) || this.get( model.cid ) ) ) {
						newModels.push( model );
					}
					// If we arrive in `add` while performing a `set` (after a create, so the model gains an `id`),
					// we may get here before `_onModelEvent` has had the chance to update `_byId`.
					else if ( model.id !== null && model.id !== undefined ) {
						this._byId[ model.id ] = model;
					}
				}
			}
	
			// Add 'models' in a single batch, so the original add will only be called once (and thus 'sort', etc).
			// If `parse` was specified, the collection and contained models have been parsed now.
			toAdd = singular ? ( toAdd.length ? toAdd[ 0 ] : null ) : toAdd;
			var result = set.call( this, toAdd, _.defaults( { merge: false, parse: false }, options ) );
	
			for ( i = 0; i < newModels.length; i++ ) {
				model = newModels[i];
				// Fire a `relational:add` event for any model in `newModels` that has actually been added to the collection.
				if ( this.get( model ) || this.get( model.cid ) ) {
					this.trigger( 'relational:add', model, this, options );
				}
			}
	
			return result;
		};
	
		/**
		 * Override 'Backbone.Collection._removeModels' to trigger 'relational:remove'.
		 */
		var _removeModels = Backbone.Collection.prototype.___removeModels = Backbone.Collection.prototype._removeModels;
		Backbone.Collection.prototype._removeModels = function( models, options ) {
			// Short-circuit if this Collection doesn't hold RelationalModels
			if ( !( this.model.prototype instanceof Backbone.RelationalModel ) ) {
				return _removeModels.call( this, models, options );
			}
	
			var toRemove = [];
	
			//console.debug('calling remove on coll=%o; models=%o, options=%o', this, models, options );
			_.each( models, function( model ) {
				model = this.get( model ) || ( model && this.get( model.cid ) );
				model && toRemove.push( model );
			}, this );
	
			var result = _removeModels.call( this, toRemove, options );
	
			_.each( toRemove, function( model ) {
				this.trigger( 'relational:remove', model, this, options );
			}, this );
	
			return result;
		};
	
		/**
		 * Override 'Backbone.Collection.reset' to trigger 'relational:reset'.
		 */
		var reset = Backbone.Collection.prototype.__reset = Backbone.Collection.prototype.reset;
		Backbone.Collection.prototype.reset = function( models, options ) {
			options = _.extend( { merge: true }, options );
			var result = reset.call( this, models, options );
	
			if ( this.model.prototype instanceof Backbone.RelationalModel ) {
				this.trigger( 'relational:reset', this, options );
			}
	
			return result;
		};
	
		/**
		 * Override 'Backbone.Collection.sort' to trigger 'relational:reset'.
		 */
		var sort = Backbone.Collection.prototype.__sort = Backbone.Collection.prototype.sort;
		Backbone.Collection.prototype.sort = function( options ) {
			var result = sort.call( this, options );
	
			if ( this.model.prototype instanceof Backbone.RelationalModel ) {
				this.trigger( 'relational:reset', this, options );
			}
	
			return result;
		};
	
		/**
		 * Override 'Backbone.Collection.trigger' so 'add', 'remove' and 'reset' events are queued until relations
		 * are ready.
		 */
		var trigger = Backbone.Collection.prototype.__trigger = Backbone.Collection.prototype.trigger;
		Backbone.Collection.prototype.trigger = function( eventName ) {
			// Short-circuit if this Collection doesn't hold RelationalModels
			if ( !( this.model.prototype instanceof Backbone.RelationalModel ) ) {
				return trigger.apply( this, arguments );
			}
	
			if ( eventName === 'add' || eventName === 'remove' || eventName === 'reset' || eventName === 'sort' ) {
				var dit = this,
					args = arguments;
	
				if ( _.isObject( args[ 3 ] ) ) {
					args = _.toArray( args );
					// the fourth argument is the option object.
					// we need to clone it, as it could be modified while we wait on the eventQueue to be unblocked
					args[ 3 ] = _.clone( args[ 3 ] );
				}
	
				Backbone.Relational.eventQueue.add( function() {
					trigger.apply( dit, args );
				});
			}
			else {
				trigger.apply( this, arguments );
			}
	
			return this;
		};
	
		// Override .extend() to automatically call .setup()
		Backbone.RelationalModel.extend = function( protoProps, classProps ) {
			var child = Backbone.Model.extend.call( this, protoProps, classProps );
	
			child.setup( this );
	
			return child;
		};
	}));


/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(508);
	
	var Config = {
	    init: function init(sessionKey, sessionValue, authDeviceId) {
	        this.sessionKey = sessionKey;
	        this.sessionValue = sessionValue;
	        this.authDeviceId = authDeviceId;
	    },
	    url: function url(path) {
	        if (window.cordova) path = path.replace('/chat', 'http://40.113.104.110:3001');
	        return path + ('?sessionKey=' + encodeURIComponent(Config.sessionKey) + '&sessionValue=' + encodeURIComponent(Config.sessionValue) + '&authDeviceId=' + encodeURIComponent(Config.authDeviceId));
	    }
	};
	
	exports.default = Config;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(508);
	
	var _RoomModel = __webpack_require__(511);
	
	var RoomModel = _interopRequireDefault(_RoomModel).default;
	
	var _RoomCollection = __webpack_require__(516);
	
	var RoomCollection = _interopRequireDefault(_RoomCollection).default;
	
	var _config = __webpack_require__(509);
	
	var Config = _interopRequireDefault(_config).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UserModel = Backbone.RelationalModel.extend({
	    idAttribute: '_id',
	    url: function url() {
	        return Config.url('/chat/user');
	    },
	    defaults: {
	        name: 'Incognito',
	        avatar: ''
	    },
	    relations: [{
	        type: Backbone.HasMany,
	        key: 'chats',
	        relatedModel: RoomModel,
	        collectionType: RoomCollection,
	        includeInJSON: false
	    }]
	});
	
	UserModel.findModel = function (attributes) {
	    var model = Backbone.Relational.store.find(this, attributes);
	
	    if (!model && _.isObject(attributes)) {
	        var coll = Backbone.Relational.store.getCollection(this);
	
	        model = coll.find(function (m) {
	            return m.get('uid') == attributes.uid;
	        });
	    }
	
	    return model;
	};
	
	exports.default = UserModel;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(6)))

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(508);
	
	var _MessageModel = __webpack_require__(512);
	
	var MessageModel = _interopRequireDefault(_MessageModel).default;
	
	var _MessageCollection = __webpack_require__(514);
	
	var MessageCollection = _interopRequireDefault(_MessageCollection).default;
	
	var _UserInfoModel = __webpack_require__(513);
	
	var UserInfoModel = _interopRequireDefault(_UserInfoModel).default;
	
	var _UserInfoCollection = __webpack_require__(515);
	
	var UserInfoCollection = _interopRequireDefault(_UserInfoCollection).default;
	
	var _config = __webpack_require__(509);
	
	var Config = _interopRequireDefault(_config).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.RelationalModel.extend({
	    idAttribute: '_id',
	    url: function url() {
	        if (this.isNew()) return Config.url('/chat/room');else return Config.url('/chat/room/' + encodeURIComponent(this.id));
	    },
	    relations: [{
	        type: Backbone.HasMany,
	        key: 'messages',
	        relatedModel: MessageModel,
	        collectionType: MessageCollection,
	        includeInJSON: '_id',
	        reverseRelation: {
	            key: 'room',
	            includeInJSON: '_id'
	        }
	    }, {
	        type: Backbone.HasMany,
	        key: 'users',
	        relatedModel: UserInfoModel,
	        collectionType: UserInfoCollection,
	        includeInJSON: '_id'
	    }]
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(508);
	
	var _UserInfoModel = __webpack_require__(513);
	
	var UserInfoModel = _interopRequireDefault(_UserInfoModel).default;
	
	var _config = __webpack_require__(509);
	
	var Config = _interopRequireDefault(_config).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.RelationalModel.extend({
	    idAttribute: '_id',
	    url: function url() {
	        if (this.isNew()) return Config.url('/chat/room/' + encodeURIComponent(this.get('room').id) + '/message');else return Config.url('/chat/room/' + encodeURIComponent(this.get('room').id) + '/message/' + encodeURIComponent(this.id));
	    },
	    defaults: {
	        text: ''
	    },
	    relations: [{
	        type: Backbone.HasOne,
	        key: 'user',
	        relatedModel: UserInfoModel,
	        includeInJSON: '_id'
	    }]
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(508);
	
	exports.default = Backbone.RelationalModel.extend({
	    idAttribute: '_id',
	    defaults: {
	        name: 'Incognito',
	        avatar: ''
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _MessageModel = __webpack_require__(512);
	
	var MessageModel = _interopRequireDefault(_MessageModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: MessageModel
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(508);
	
	var _UserInfoModel = __webpack_require__(513);
	
	var UserInfoModel = _interopRequireDefault(_UserInfoModel).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    model: UserInfoModel
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _RoomModel = __webpack_require__(511);
	
	var RoomModel = _interopRequireDefault(_RoomModel).default;
	
	var _config = __webpack_require__(509);
	
	var Config = _interopRequireDefault(_config).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Backbone.Collection.extend({
	    url: function url() {
	        return Config.url('/chat/room');
	    },
	    model: RoomModel
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _MessageModel = __webpack_require__(512);
	
	var MessageModel = _interopRequireDefault(_MessageModel).default;
	
	var _MessageCollectionView = __webpack_require__(518);
	
	var MessageCollectionView = _interopRequireDefault(_MessageCollectionView).default;
	
	var _MessageEditorView = __webpack_require__(522);
	
	var MessageEditorView = _interopRequireDefault(_MessageEditorView).default;
	
	__webpack_require__(524);
	
	var _layout = __webpack_require__(530);
	
	var layout = _interopRequireDefault(_layout).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Marionette.LayoutView.extend({
	    template: layout,
	    className: 'chatWidget',
	
	    regions: {
	        messages: '[data-js-messages]',
	        editor: '[data-js-editor]'
	    },
	
	    initialize: function initialize(options) {
	        this.user = options.user;
	    },
	
	    onRender: function onRender() {
	        var _this = this;
	
	        this.messages.show(new MessageCollectionView({ collection: this.model.get('messages'), user: this.user }));
	        this.editor.show(new MessageEditorView());
	
	        this.model.fetch();
	
	        var autoupdate = function autoupdate() {
	            clearInterval(_this.timer);
	            _this.timer = setInterval(function () {
	                return _this.model.fetch();
	            }, 5000);
	        };
	
	        this.editor.currentView.on('message:add', function (text) {
	            if (text) {
	                _this.editor.currentView.trigger('disable');
	                var msg = new MessageModel({
	                    text: text,
	                    room: _this.model,
	                    user: _this.user
	                });
	
	                msg.save().done(function () {
	                    _this.editor.currentView.trigger('clear');
	                    _this.editor.currentView.trigger('enable');
	                    _this.editor.currentView.trigger('focus');
	                    autoupdate();
	                });
	            }
	        });
	
	        autoupdate();
	    },
	
	    onDestroy: function onDestroy() {
	        clearInterval(this.timer);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _MessageItemView = __webpack_require__(519);
	
	var MessageItemView = _interopRequireDefault(_MessageItemView).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Marionette.CollectionView.extend({
	    tagName: 'ul',
	    className: 'message-collection container',
	    childView: MessageItemView,
	
	    initialize: function initialize(options) {
	        this.user = options.user;
	    },
	
	    childViewOptions: function childViewOptions() {
	        return { user: this.user };
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _item = __webpack_require__(520);
	
	var template = _interopRequireDefault(_item).default;
	
	var _avatarDefault = __webpack_require__(521);
	
	var defaultAvatar = _interopRequireDefault(_avatarDefault).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Marionette.ItemView.extend({
	    template: template,
	
	    initialize: function initialize(options) {
	        this.user = options.user;
	    },
	
	    onRender: function onRender() {
	        this.$el = this.$el.children().first();
	        this.$el.unwrap();
	        this.setElement(this.$el);
	    },
	
	    serializeData: function serializeData() {
	        var data = this.serializeModel(this.model);
	        data.user = this.model.get('user').toJSON();
	
	        if (!data.user.avatar) data.user.avatar = defaultAvatar;
	
	        data.isSelf = this.model.get('user').id === this.user.id;
	
	        return data;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (isSelf, text, user) {
	if ( isSelf)
	{
	buf.push("<li class=\"right\"><div class=\"msg\"><p class=\"name self\">" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + "</p><p class=\"text\">" + (jade.escape((jade_interp = text) == null ? '' : jade_interp)) + "</p></div></li>");
	}
	else
	{
	buf.push("<li class=\"left\"><div class=\"avatar\"><img" + (jade.attr("src", user.avatar, true, true)) + " class=\"img-circle\"></div><div class=\"msg\"><p class=\"name\">" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + "</p><p class=\"text\">" + (jade.escape((jade_interp = text) == null ? '' : jade_interp)) + "</p></div></li>");
	}}.call(this,"isSelf" in locals_for_with?locals_for_with.isSelf:typeof isSelf!=="undefined"?isSelf:undefined,"text" in locals_for_with?locals_for_with.text:typeof text!=="undefined"?text:undefined,"user" in locals_for_with?locals_for_with.user:typeof user!=="undefined"?user:undefined));;return buf.join("");
	}

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "images/avatar-default.c1c6ff.png";

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _editor = __webpack_require__(523);
	
	var template = _interopRequireDefault(_editor).default;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Marionette.ItemView.extend({
	    template: template,
	
	    ui: {
	        text: '[data-js-text]'
	    },
	
	    events: {
	        'submit': 'onSubmit'
	    },
	
	    initialize: function initialize() {
	        var _this = this;
	
	        this.listenTo(this, 'clear', function () {
	            _this.ui.text.val('');
	        });
	        this.listenTo(this, 'disable', function () {
	            _this.ui.text.prop('disabled', true);
	        });
	        this.listenTo(this, 'enable', function () {
	            _this.ui.text.prop('disabled', false);
	        });
	        this.listenTo(this, 'focus', function () {
	            _this.ui.text.focus();
	        });
	    },
	
	
	    onRender: function onRender() {
	        this.$el = this.$el.children().first();
	        this.$el.unwrap();
	        this.setElement(this.$el);
	    },
	
	    onSubmit: function onSubmit(e) {
	        var _this2 = this;
	
	        e.preventDefault();
	        this.$el.addClass('load');
	
	        this.triggerMethod('message:add', this.ui.text.val());
	
	        setTimeout(function () {
	            _this2.$el.removeClass('load');
	        }, 1000);
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (Date, Math) {
	var id = 'input-' + (new Date()).getTime() + Math.random().toString(16).slice(2)
	buf.push("<form><!--label(for = id) Message--><div class=\"input-group\"><input data-js-text type=\"text\"" + (jade.attr("id", id, true, true)) + " rows=\"2\" placeholder=\"Type your message here...\" class=\"form-control\"><button type=\"submit\" class=\"send\"></button></div></form>");}.call(this,"Date" in locals_for_with?locals_for_with.Date:typeof Date!=="undefined"?Date:undefined,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined));;return buf.join("");
	}

/***/ },
/* 524 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(23);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	
	buf.push("<div data-js-messages class=\"messages\"></div><div data-js-editor class=\"editor\"></div>");;return buf.join("");
	}

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, Backbone) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = Marionette.AppRouter.extend({
	    appRoutes: {
	        '': 'onShowAuth',
	        'auth': 'onShowAuth',
	        'restorePassword': 'onShowRestorePassword',
	        'registration': 'onShowRegistration',
	        'signin': 'onShowSignin',
	        'index': 'onShowIndex',
	        'userGames': 'onShowUserGames',
	        'settings': 'onShowSettings',
	        'newgame': 'onShowNewGame',
	        'searchuser': 'onShowSearchUser',
	        'blockTopics': 'onShowBlockTopics',
	        //	'last20games': 'onShowLast20Games',
	        'game/:roomId': 'onShowGamePage',
	        'requests': 'onShowRequestPage',
	        'profile/:userId': 'onShowProfilePage',
	        'gameResult/:roomId': 'onShowGameResultPage',
	        'questions/:roomId': 'onShowQuestionsPage',
	        'questionPreview': 'onShowQuestionPreviewPage',
	        'blackList': 'onShowBlackList',
	        'accountSetting': 'onShowAccountSetting',
	        'changeAvatar': 'onShowChangeAvatar',
	        'statistics': 'onShowStatistics',
	        'last20games': 'onShowLast20games',
	        'playerRankings': 'onShowPlayerRankings',
	        'neighbors': 'onShowNeighbors',
	        //'game/:roomId/chat': 'onShowGameChat',
	        'chat/:rival_id': 'onShowPersonalChat'
	    },
	    navigate: function navigate(fragment, options) {
	        if (!options) {
	            options = { trigger: true, replace: true };
	        } else if (!options.replace) {
	            options.replace = true;
	        }
	        Backbone.history.navigate(fragment, options);
	        return this;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(5)))

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Marionette, _, $, Backbone) {'use strict';
	
	// init jade template
	Marionette.Renderer.render = function (template, data) {
	    if (!template) {
	        return '';
	    }
	    return template(data);
	};
	
	// rewrite event click
	var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	var CLASSNAME = 'touchHover';
	var DATANAME = 'notouch';
	Backbone.View.prototype.delegateEvents = function (events) {
	    var _this = this;
	
	    events || (events = _.result(this, 'events'));
	    if (!events) return this;
	    this.undelegateEvents();
	
	    var _loop = function _loop(key) {
	        var method = events[key];
	        if (!_.isFunction(method)) method = _this[method];
	        if (!method) return 'continue';
	        var match = key.match(delegateEventSplitter);
	        var eventName = match[1];
	        var selector = match[2];
	        if (eventName == 'click') {
	            if (Modernizr.touchevents) {
	                bindEvent.call(_this, 'touchstart', selector, function (e) {
	                    if ($(e.currentTarget).not('.disabled').length) {
	                        $(e.currentTarget).addClass(CLASSNAME);
	                    }
	                });
	                bindEvent.call(_this, 'touchmove', selector, function (e) {
	                    if ($(e.currentTarget).not('.disabled').length) {
	                        $(e.currentTarget).removeClass(CLASSNAME).data(DATANAME, true);
	                    }
	                });
	                bindEvent.call(_this, 'touchend', selector, function (e) {
	                    if ($(e.currentTarget).not('.disabled').length) {
	                        e.preventDefault();
	                        var $el = $(e.currentTarget);
	                        if (!$el.data(DATANAME)) {
	                            $(':focus').blur();
	                            method.call(_this, e);
	                        }
	                        $el.removeClass(CLASSNAME).data(DATANAME, false);
	                    }
	                });
	            }
	            bindEvent.call(_this, match[1], match[2], function (e) {
	                if ($(e.currentTarget).not('.disabled').length) {
	                    method.call(_this, e);
	                }
	            });
	        } else {
	            bindEvent.call(_this, match[1], match[2], _.bind(method, _this));
	        }
	    };
	
	    for (var key in events) {
	        var _ret = _loop(key);
	
	        if (_ret === 'continue') continue;
	    }
	    return this;
	};
	
	function bindEvent(eventName, selector, buildMethod) {
	    eventName += '.delegateEvents' + this.cid;
	    if (selector === '') {
	        return this.$el.on(eventName, buildMethod);
	    } else {
	        return this.$el.on(eventName, selector, buildMethod);
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(6), __webpack_require__(7), __webpack_require__(5)))

/***/ }
/******/ ]);
//# sourceMappingURL=application.91b2b986892185c94c8c.js.map